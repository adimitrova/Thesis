[MUSIC] Hello, welcome back,
this is the last lesson in the module Cryptographic Solutions for
Cyber Physical Systems. It also concludes the course,
Web Connectivity and Security in Cyber Physical Systems. In this final video lecture, we will
look into the transport layer security protocol, what it is, and how it works. Transport Layer Security or
TLS is a cryptographic protocol, which facilitates secure communication or
networks. The predecessor of TLS is called
Secure Socket Layer or SSL. In fact,
also TLS is often referred to as SSL, because both of these protocols
offer the same basic functionality, and the first version of TLS is heavily
based on the last version of SSL. TLS provides a secured
tunnel between two hosts. The primary goal of TLS is to provide
privacy and data integrity between communicating applications, for example,
between web browsers and web servers. The TLS protocol is implemented on
top of a reliable transport protocol, such as the transmission control protocol,
or TCP. Or a datagram-oriented transport protocol,
such as the User Datagram Protocol, UDP, and the Datagram Congestion
Control Protocol, DCCP. The TLS protocol is composed
of two base protocols, called the Handshake Protocol and
the Record Protocol. Information transferred through TLS is
protected using symmetric cryptography. Unique keys for symmetric encryption
are generated for each session and exchanged using the handshake
protocol at the start of the session. The handshake protocol enables the client
and server to authenticate each other and select an encryption algorithm
prior to sending the data. The handshake protocol uses the public key
cryptography to establish a shared secret key for symmetric encryption between a
client, which is usually a web browser and a server,
which provides a service to the client. In addition to the shared secret key,
the handshake protocol also exchanges some other information,
such as message formatting instructions. Suppose you are trying to buy
something from the Amazon website, to start a secure transaction, a TLS or SSL connection is established between
your browser and the Amazon server. First, your browser sends a hello
message to Amazon server to request for a TLS or SSL connection. This message also includes
some essential information, such as session id and
a list of cipher suits. That is combinations of cryptographic
methods supported by your system. Then the server chooses one of the offered
cipher suits, and sends a server hello message, which includes a
certificate and the selected cipher suite. The certificate contains
the servers public key, which is verified and
signed by a certificate authority. In some cases, the server might want
to also authenticate the client. In this case, it sends also an authentication request
as part of the server hello message. Once your browser has received the servers
certificate, it will verify and validate the certificate. Then if everything is all right, the
browser will generate a session key and encrypt it with the server's public
key and send it to the server. Handshaking has now been completed. And your browser and the Amazon server
are ready to start a secure communication. The second part of the TLS
protocol is the record protocol. After establishing a shared secret
key using the handshake protocol, the record protocol provides a secure
communication session between the client and the server using
the shared secret key. The record protocol has
multiple responsibilities. First, it splits the message, which it
received from the application layer into fixed size blocks of data. Compresses them if required, and then adds
a Message Authentication Code or MAC. This is not to be confused with the Media
Access Control Concept at the link layer. A MAC has the same function
as a digital signature. It is used for message authentication and
integrity checking. A digital signature is generated
by using public key cryptography to encrypt a hash value of a message
with a sender's private key. A MAC is also obtained by encrypting
the hash value of a message, but now a shared symmetric key is used. Since symmetric cryptography is use for
a MAC, it is faster to generate and verify it in a normal digital signature. After generating and
appending the MAC, the record protocol encrypts the message block
with the shared symmetric key. As the last step, it adds a TLS header and sends the message block
to the other party. On the receiver side, the message block
is first decrypted using the shared key. Then its authenticity and integrity
are verified by comparing the MAC computer from the received message block
with the one appended to the block. TLS or SSL secure connections are widely
used in contemporary websites. If a website uses such a connection,
HTTPS appears in the beginning of the web address, which indicates that
a secure connection has been established. HTTPS stands for
Hypertext Transfer Protocol Secure. Typically, there's also a small
padlock icon beside the address line. If you click on the padlock, you will see
information about the secure connection in question as well as the certificate which
the website has sent to your browser. If the certificate becomes invalid for
some reason, you will notice a red line across
the HTTPS acronym indicating that the connection is still secure,
but the server cannot be verified. A normal HTTP connection is establish when the web address in your browser
begin with the HTTP acronym. And there is no padlock icon present, indicating a connection which
is not secured by TLS or SSL. Digital certificates and information on their issuing
authorities are stored in your browser. You can simply check them in
the settings of your browser. For example,in this image
you see Firefox settings. If you click on View Certificates,
in the advanced menu and certificate tabs, you will see the list of certificate
authorities and their issued certificates. Protocol such as session
initiation protocol, or SIP, and electronic gaming protocols
are getting more and more popular. Such protocols are based on
the user datagram protocol or UDP and require secure communication. Datagram-based protocols
cannot directly use TLS, because of their delay-sensitive nature. The Datagram Transport
Layer Security Protocol, or DTLS,
is a natural extension of TLS over UDP. With maximized reuse of code and infrastructure to minimize the need for
new security invention. Like TLS, also DTLS is designed
to provide communication privacy with equivalent security
guarantees for datagrams. TLS is inefficient for
datagram-oriented transport protocols, because due to the inherent
features of DTLS, possible lost or out of order packets can cause
unpredictable communication delays. This is not acceptable or tolerable for
delay senstive UDP based applications. A TLS handshake breaks if the handshake
messages are not delivered reliably or in order, or are lost. To solve this, DTLS assigns
a specific sequence number for each handshake message within
the handshaking process. It also uses a simple retransmission
timer for each message. Once a receiver receives
a handshake message, it determines, by checking the sequence number,
if the message is in order or not. If the right sequence number is detected,
the message is processed. Otherwise, it is queued for
future delivery. A queued message is processed only when
all previous messages have been received. On the sender side, if the sender doesn't
get any reply for its handshake message before the retransmission time runs out,
it will resend that specific message. The record protocols of DTLS and
TLS are very similar. The difference is that DTLS uses sequence
numbers to re-order out of order packets. This concludes our course
on web connectivity and security in cyber physical systems. We started with the basics of the
internet, and learned about its layered structure and involved communication and
connectivity protocols. Then we learned how to design web
connected cyber physical systems. We also learned that cyber physical
systems have a close relationship with Internet of Things and
cloud computing. In the security segment of the course, we learned about the basic concepts and
components of security and privacy, and so how cryptographic solutions can
be used to secure your system. That's it,
I hope you have enjoyed the course. Thanks for attending, bye, bye. >> [SOUND]