[music] hi, welcome back.
previously, we introduced cryptography as a tool for security solutions in cyber physical systems.
we also presented how symmetry key ciphers are used for securing wireless networks.
in this video lecture, we will learn how public key cryptography works, we will have a close look at the well-known rsa algorithm.
public key cryptography comprises a set of algorithms that are designed based on some mathematical problems.
as we discussed earlier, unlike in symmetric cryptography, in public key cryptography the decryption key is not the same as the encryption key.
and for this reason it is also known as asymmetric cryptography.
a pair of key is called a public key and a private key are used in such a system.
the public key, as it is clear from its name, is publicly known by everybody and is used for encryption, while the private key is kept secret and used for decryption.
so anybody can encrypt the message with the recipient's public key, but only the recipient can decrypt it using his or her own private key.
this eliminates the need for a secure channel to exchange the key between two parties.
in a public key cryptography, the key pairs are mathematically related, but it is computationally infeasible to get the decryption key from the encryption key.
let's have a brief look at some important and popular public key encryption algorithms.
the rivest-shamir-adlerman or rsa algorithm is one of the most practical and secure public key algorithms, which is widely used for secure communication.
rsa, which is named after its three inventors was published in 1977. it provides three main functionalities, key generation, encryption, and decryption.
diffie-hellman, or dh protocol, provides an efficient and secure way of exchanging an encryption key often symmetric cipher through a public channel without any need for a secure channel.
diffie-hellman is one of the earliest applications of public key encryption, published in 1976. this protocol is still used in many applications.
elliptic curve cryptography or ecc provides an alternative mechanism for public key encryption.
it was introduced in 1985. ecc is based on algebraic elliptic curves over finite fields.
and offer smaller keys with a reasonable level of security compared to other public key encryption algorithms.
it is therefore known as a lightweight encryption method.
ecc is widely use in embedded resource constraint devices and provides many applications of public encryption such as, encryption and decryption, digital signatures, and digital certificates.
to demonstrate how a public key system mathematically works, we will first have a bit closer look into the popular rsa algorithm.
in another lecture, we will also have a look at the diffie-hellman algorithm.
we use these classic algorithms as examples, because they are well known and relatively easy to present in a short lecture.
if you are interested in details of ecc, i encourage you to search for related online documentation.
there is a lot of information on ecc in a reader friendly forum.
the complex mathematics behind ecc is out of the scope of this course.
so, let's look at rsa.
we start with generation of the public and private keys.
the first step is to choose two relatively large prime numbers p and q. typically, 1,024 bits or more in length.
the next step is to calculate product of n of p and q, and product phi(n) of (p-1) and (q-1).
n later becomes the modulus of the public and private keys, which we will see shortly.
now, the encryption key e is chosen in such a way that it needs two properties.
first, e has to be relatively prime to phi(n).
second, e has to be greater than 1 and less than phi(n).
two integers are relatively prime if they share no common positive factors or divisors except 1. in other words, the greatest common divisor of e and phi(n) must be 1. we use a tuple notation for the greatest common divisor as shown on the screen.
now our public key is the pair of e and n. let's see how the private key is calculated.
if e and phi n are prime, then there is some integer d for decryption, such that e times d equals one modular phi(n).
our private key is then defined as the pair of d and n. notice that without knowing p and q it is practically impossible to determine d. security of rsa relies on this observation.
now that we have generated the keys, we can encrypt and decrypt a message.
in rsa, a full message is presented as a sequence of positive integers between 0 and n-1.
each taking a fix number of bits depending on the value of the modulus n. the same applies to the produced cipher text.
for simplicity, let's consider a message m, which is composed of a single integer between 0 and n- 1. for encryption, we take the message m and compute the ciphertext c as m to the power of e modular n. for decryption we take the cypher text c and compute the message m as c to the power of d modulo n. now let's try an example.
suppose our two primes, p and q, are 5 and 11 respectively.
then n is equal to 55, and phi(n) is equal to 40. now we should select the encryption exponent, e. divisors of phi(n) are 1, 2, 4, 5, 8, 10, 20, and 40. so, it could be any number less than 40, which has no common divisor with 40. of the candidates, well, let's pick seven.
we should now select the decryption exponent d, such that d times e equals 1 mod 40. let's pick 23, which satisfies the given condition, because 23 times 7 equals 161, which equals 4 times 40 plus 1. determining d is computationally a non-trivial task.
the best way is to use the extended euclidean algorithm.
we don't study this algorithm here though.
so, here it is, our public key is the pair 7, 55, and our private key is the pair 23, 55. now, let's check how encryption and decryption work.
first, our message m could be any integer between 0 and 54. let's randomly pick the number 8. for encryption to get the ciphertext c, we calculate 8 to the power of 7 modulo 55, which equals 2. so our ciphertext c is 2. let's then decrypt the cypher text and see if we get our original message or plain text in or not.
we calculate 2 to the power of 23, modulo 55, which, amazingly, equals 8. so it worked, we managed to retrieve the original message m. in this lesson, we learned about basics of public key cryptography.
moreover, we saw how we can protect confidentiality of data by rsa public key encryption.
in the next video lecture, we will learn how public key encryption is used for establishing a shared secret between two parties that don't know each other previously.
[sound]
