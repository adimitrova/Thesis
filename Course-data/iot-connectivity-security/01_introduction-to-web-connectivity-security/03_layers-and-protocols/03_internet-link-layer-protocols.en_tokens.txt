[
music
]
welcome
to
the
final
lesson
on
the
basics
of
tcp
ip
suite
.
so
far
we
have
looked
into
protocols
that
help
applications
understand
each
other
and
protocols
that
help
applications
build
a
communication
link
.
tn
this
video
lecture
,
we
will
look
at
the
tcp
ip
layers
and
protocols
that
helps
devices
or
machines
connect
and
exchange
package
.
we
will
look
at
how
you
get
the
data
that
applications
have
generated
and
take
it
out
of
the
local
machine
and
carry
it
over
the
network
to
another
device
.
this
is
where
the
internet
,
or
network
layer
and
link
layer
come
in
.
first
,
the
internet
layer
.
this
layer
is
responsible
for
addressing
,
routing
,
error
handling
,
and
of
course
,
managing
data
flow
to
the
layer
beneath
it
.
the
ip
part
in
tcp/ip
means
the
internet
protocol
which
operates
on
this
layer
.
we
will
look
in
to
the
internet
protocol
and
see
how
it
offers
the
functions
that
the
internet
layer
is
supposed
to
provide
.
so
,
ip
stands
for
the
internet
protocol
.
and
it
's
the
protocol
that
everyone
in
the
tcp
ip
suite
relies
on
to
transmit
data
packets
over
the
network
.
no
matter
what
transport
layer
protocol
you
use
,
whether
tcp
or
udp
the
data
eventually
is
handled
by
ip
.
like
udp
,
it
is
a
connection-less
protocol
meaning
each
data
packet
is
considered
unique
and
there
is
no
context
maintained
.
sending
the
current
packet
has
no
relation
to
the
previous
or
next
packet
.
it
's
not
a
reliable
transport
mechanism
.
there
is
no
guarantee
that
the
packet
will
be
successfully
delivered
.
as
there
is
no
link
establishment
in
advance
and
no
assured
delivery
,
the
packet
can
take
any
path
over
the
network
to
reach
a
destination
.
this
helps
against
link
failures
.
if
a
router
or
a
physical
link
goes
down
,
the
back
end
just
takes
an
alternative
path
.
the
internet
protocol
is
available
in
two
versions
.
ipv
version
4
or
ipv4
.
and
ip
version
6
or
ipv6
.
both
offer
the
same
service
,
but
in
a
slightly
different
way
.
the
very
basic
difference
between
them
is
addressing
.
we
will
look
into
this
later
on
.
ip
is
also
responsible
for
routing
,
meaning
finding
a
path
for
a
packet
to
move
around
the
networks
until
it
reaches
the
destination
.
if
the
receiving
node
is
on
the
same
network
,
the
packet
is
delivered
directly
.
this
is
called
local
delivery
.
if
the
receiver
is
on
another
network
,
then
the
protocol
delivers
the
message
to
a
device
called
a
router
.
if
the
receiver
is
connected
to
the
router
the
message
is
passed
to
it
.
otherwise
,
it
is
sent
to
the
next
router
and
then
to
the
next
and
so
on
.
a
jump
from
one
router
to
another
is
called
a
hop
.
it
is
theorized
that
you
can
reach
anywhere
on
the
internet
with
a
maximum
of
64
hops
,
and
reach
more
than
99
%
of
the
internet
using
32
hops
.
some
protocols
might
have
their
own
limitations
.
for
example
,
the
routing
information
protocol
,
or
rip
,
has
a
limit
of
15
hops
.
other
routing
protocols
are
,
for
example
,
open
shortest
path
first
,
or
ospf
and
border
gateway
protocol
or
bgp
.
the
internet
control
message
protocol
,
or
icmp
,
is
used
for
reporting
errors
in
the
delivery
of
ip
packets
.
it
is
part
of
the
ip
suite
.
think
of
it
running
in
parallel
with
the
normal
ip
functions
.
imagine
running
two
network
cables
between
the
nodes
a
and
b
,
the
first
one
carries
data
from
a
to
b.
the
second
one
carries
an
error
message
from
b
to
a.
only
if
the
path
between
a
and
b
is
blocked
or
unreachable
.
in
this
example
,
the
network
cable
between
a
and
b
represents
standard
ip
packets
and
the
network
cable
between
b
and
a
carrying
error
messages
represents
icmp
.
whenever
an
ip
packet
ca
n't
be
delivered
,
the
router
on
that
point
generates
an
icmp
packet
,
and
forwards
it
to
the
sender
.
ip
does
n't
act
on
the
error
message
,
but
sends
it
to
the
transport
layer
protocol
,
tcp
or
udp
.
and
they
can
then
decide
whether
to
retransmit
the
lost
data
or
not
.
another
important
protocol
of
the
ip
suite
is
ipsec
.
ip
security
is
a
set
of
protocols
for
securing
communication
between
devices
.
unlike
,
tos
and
dtls
mentioned
earlier
,
this
one
operates
in
the
internet
layer
.
it
will
be
discussed
further
later
on
in
the
course
.
a
little
bit
about
the
ip
version
4.
this
is
the
most
common
version
of
the
internet
protocol
.
the
one
you
will
most
likely
encounter
.
it
has
a
32
bit
address
space
and
can
have
4.29
billion
unique
addresses
.
ipv4
address
space
is
divided
into
different
portions
,
each
portion
is
reserved
for
a
special
purpose
.
have
you
ever
wondered
why
the
default
ip
address
of
every
broadband
router
that
you
buy
is
1.92.168.01
?
that
's
because
the
range
is
reserved
for
private
use
.
to
build
your
own
home
network
for
example
.
ipv4
addresses
have
a
dotted
decimal
notation
and
example
at
risk
is
shown
here
.
ipv
version
6
is
the
new
version
of
the
internet
protocol
suite
.
the
basic
attributes
and
functionalities
are
the
same
as
in
ipv4
.
but
ipv6
has
a
128
bit
address
space
instead
of
32
,
and
twice
the
header
size
.
it
's
designed
to
replace
ipv4
.
one
particular
problem
with
ipv4
is
that
there
are
more
devices
connected
to
the
internet
then
there
are
available
at
vertices
that
you
can
assign
.
with
ipv4
,
that
unit
is
4.29
billion
.
with
ipv6
,
it
is
,
well
,
try
to
count
the
number
of
zeros
on
the
screen
.
with
more
and
more
smart
devices
connected
to
the
internet
,
reaching
50
billion
by
2020
according
to
estimations
.
you
need
a
large
address
pool
.
ipv6
provides
you
the
needed
address
space
.
here
's
an
example
of
an
ipv6
address
.
clearly
it
's
not
readable
for
human
eyes
in
the
same
way
as
the
ipv4
address
.
here
you
see
the
difference
between
the
ipv4
and
ipv6
headers
.
the
large
address
field
of
the
ipv6
header
is
instantly
noticeable
.
on
the
other
hand
the
overall
structure
of
the
ipv6
header
is
simpler
.
in
the
ipv4
header
,
the
fields
with
great
text
,
the
ipv4
attributes
that
were
not
carried
to
ipv6
.
remember
,
ipv6
is
designed
to
replace
ipv4
.
they
are
not
interoperable
.
this
ends
our
discussion
on
the
internet
layer
.
now
,
we
will
have
a
quick
layer
of
the
tcp-ip
model
,
the
link
layer
.
so
far
,
we
have
seen
how
data
moves
across
programs
and
networks
.
and
now
,
we
will
look
into
how
it
goes
from
one
local
network
point
to
another
.
the
link
layer
is
the
lowest
layer
in
the
tcpip
model
.
it
's
responsible
for
transmitting
information
from
one
point
in
the
local
network
to
another
point
in
the
same
network
.
so
,
in
theory
,
with
the
presence
of
this
layer
,
you
would
be
able
to
create
a
local
area
network
.
or
be
able
to
communicate
locally
even
if
you
do
n't
implement
the
internet
layer
.
the
link
layer
acts
as
an
interface
between
the
lower
physical
hardware
implementation
of
the
network
and
the
upper
,
more
logical
,
software-focused
implementation
of
the
network
.
the
link
layer
has
several
functions
.
first
,
it
provides
local
addressing
.
let
's
look
at
ethernet
,
a
system
of
connecting
computers
in
a
local
area
network
.
each
ethernet
adapter
has
a
specific
,
unique
address
assigned
by
the
manufacturer
called
a
mac
address
.
a
mac
address
is
how
a
network
adapter
knows
who
is
who
on
the
network
.
the
difference
between
a
mac
address
and
an
ip
address
is
that
mac
address
are
used
for
identifying
devices
on
the
local
network
.
and
ip
address
are
used
to
identify
devices
across
networks
even
globally
.
you
can
change
your
ip
address
several
times
but
still
the
data
packet
intended
for
your
device
reaches
you
,
how
?
well
,
that
's
because
of
the
mac
address
.
a
link
layer
protocol
called
arp
or
address
resolution
protocol
,
has
the
job
of
identifying
which
ip
address
corresponds
to
which
mac
address
.
so
when
you
change
your
ip
address
,
arp
updates
the
local
table
and
puts
the
new
address
against
your
mac
address
.
the
link
layer
also
provides
local
error
detection
of
errors
that
could
have
been
caused
by
noise
on
the
network
channels
.
the
most
common
method
is
adding
cyclic
redundancy
check
or
crc
codes
.
when
you
take
the
data
from
the
upper
layers
add
the
local
mac
addresses
of
the
destination
on
yours
add
crc
codes
for
error
detection
and
any
other
fields
required
by
the
local
lead
protocol
.
this
new
packet
of
data
is
called
a
frame
.
frames
are
what
you
then
send
over
the
physical
medium
.
now
,
concerning
the
physical
medium
,
there
needs
to
be
a
way
to
handle
communication
on
the
local
network
.
to
decide
who
has
the
right
to
use
the
network
cable
for
instance
.
who
can
talk
and
for
how
long
.
and
to
assure
there
are
no
collisions
of
signals
.
all
of
this
is
called
media
access
control
,
or
mac
.
yes
,
this
is
where
the
name
mac
at
risk
comes
from
.
media
access
control
includes
different
methods
to
ensure
successful
communication
,
but
these
methods
are
out
of
the
scope
of
this
lesson
.
the
actual
transmission
of
the
data
bits
over
the
network
takes
place
in
the
form
of
signals
.
electrical
signals
in
the
case
of
ethernet
and
electromagnetic
signals
in
the
case
of
wifi
.
this
is
not
actually
regulated
or
described
in
the
tcp/ip
model
.
the
tcp/ip
model
does
n't
care
about
the
physical
characteristics
of
the
network
technology
.
this
however
does
present
an
interesting
problem
.
what
about
standards
like
wifi
that
define
both
a
physical
layer
and
media
access
control
.
where
would
you
put
wifi
in
the
tcpip
model
?
well
as
already
stated
in
another
video
lecture
,
for
the
sake
of
simplicity
we
will
put
all
the
machine
to
machine
,
or
m
to
m
connectivity
protocols
like
wifi
,
bluetooth
,
and
zigbee
under
the
umbrella
of
the
link
layer
.
here
is
an
overview
of
what
we
studied
in
this
module
.
to
your
left
is
the
tcp/ip
layered
model
,
and
to
the
right
are
some
of
the
associated
protocols
at
rest
in
the
lectures
.
i
hope
you
have
now
a
better
understanding
of
all
these
layers
and
an
idea
of
what
the
basic
properties
of
a
protocol
are
when
it
belongs
to
a
specific
layer
.
in
the
next
module
,
we
will
have
a
closer
look
at
the
protocols
that
we
sign
on
the
application
and
link
layers
.
[
music
]
