welcome
to
the
web
connectivity
and
security
course
.
in
this
course
we
will
study
different
web
connectivity
standards
,
solutions
,
and
protocols
.
we
will
also
study
the
need
for
security
as
well
as
protocols
,
methodologies
and
solutions
that
will
help
you
mitigate
security
risks
.
before
talking
about
web
connectivity
in
cyber-physical
systems
,
the
first
question
that
arises
is
,
why
then
bother
connecting
your
embedded
systems
?
if
there
is
a
device
that
controls
the
settings
on
my
microwave
oven
,
what
need
does
it
have
to
talk
to
other
devices
?
this
is
a
valid
point
.
standalone
embedded
systems
do
exist
and
cater
to
a
specific
problem
as
in
the
case
of
a
microwave
oven
.
another
example
is
an
image
processor
in
a
digital
camera
.
whose
purpose
is
handling
the
light
capture
from
the
sensor
and
to
digitize
,
process
,
and
store
that
information
as
an
image
.
it
performs
that
specific
job
and
does
it
very
well
.
the
reality
is
that
devices
are
getting
more
and
more
complex
and
that
connection
is
needed
.
the
same
digital
camera
now
has
wi-fi
and
gps
modules
to
offer
seamless
transfer
of
photos
and
a
geopack
then
.
these
wi-fi
and
gps
modules
have
their
own
baseline
processors
and
for
all
of
them
to
work
seamlessly
,
you
have
to
bring
them
together
.
you
have
to
connect
them
.
any
reasonably
modern
car
can
have
25
to
50
onboard
processors
.
a
modern
7-series
bmw
has
up
to
a
hundred
processors
.
all
of
these
control
different
functions
of
the
car
.
for
example
gps
navigation
,
entertainment
,
parking
distance
control
,
radar
cruise
control
,
and
so
on
.
to
make
the
car
really
function
and
provides
a
safer
journey
,
the
processors
have
to
communicate
with
each
other
.
a
classic
example
is
that
of
a
car
crash
.
in
case
of
a
crash
,
your
car
will
open
the
door
locks
and
deploy
the
air
bag
.
it
may
perform
other
emergency
functions
like
flashing
the
headlights
,
and
sending
your
location
coordinates
to
an
emergency
service
.
all
of
this
is
possible
because
of
the
in-car
network
.
if
you
think
this
is
too
much
,
nvidia
announced
car
computation
platform
that
has
a
combined
performance
of
8
teraflops
.
to
put
this
in
perspective
,
the
world
's
418th-ranked
super
computer
in
2008
had
a
computational
power
of
9.1
teraflops
and
that
one
had
4,096
processor
cores
.
so
,
soon
your
car
will
have
the
same
computation
or
capability
as
the
super
computers
in
2008.
and
here
we
only
discuss
the
self-contained
local
networks
within
cars
.
soon
cars
will
be
able
to
communicate
with
other
cars
on
the
road
and
with
the
traffic
monitoring
systems
.
thus
,
the
future
is
connected
and
connectivity
is
not
optional
anymore
,
it
's
fundamental
.
after
establishing
the
case
for
connectivity
in
cyber-physical
or
embedded
systems
,
the
next
question
would
be
why
do
we
need
web
connectivity
?
here
we
need
to
have
a
deeper
look
.
let
's
first
look
into
the
benefits
of
web
connectivity
.
the
first
and
foremost
benefit
is
ubiquity
.
the
web
is
everywhere
,
from
your
pc
,
to
phones
,
to
even
smart
watches
.
you
can
access
the
world
wide
web
not
only
on
smartphones
but
also
on
dumb
phones
from
a
decade
ago
.
all
you
need
is
a
browser
.
a
browser
like
opera
mini
that
can
even
be
bundled
into
embedded
systems
.
scalability
is
another
important
point
.
the
world
wide
web
is
already
quite
large
and
it
can
accommodate
even
more
sources
of
information
and
users
.
web
technologies
can
automatically
scale
,
based
on
demand
,
with
minimal
user
intervention
.
they
can
scale
to
user
needs
,
computational
load
,
or
network
requirements
.
the
world
wide
web
has
been
with
us
for
well
more
than
two
decades
now
.
that
is
enough
time
to
test
and
optimize
the
web-enabling
technologies
,
html
,
http
,
and
web
servers
are
fully
understood
.
there
are
highly
optimized
web
servers
available
for
small
sensors
that
take
less
than
seven
kilobytes
of
space
,
which
is
an
efficient
use
of
memory
.
one
of
the
main
features
of
web
technologies
is
that
they
do
n't
care
about
the
underlying
architecture
or
technologies
.
one
web-supported
device
can
communicate
effectively
with
another
one
,
irrespective
of
the
system
and
communication
infrastructure
used
.
lastly
,
major
future
technologies
will
reside
on
the
web
or
heavily
utilize
the
current
internet
technologies
.
let
's
take
cloud
computing
where
you
are
provided
with
on-demand
computational
power
and
services
.
you
can
use
these
services
for
big
data
analytics
and
then
utilize
these
data
insights
for
better
decision-making
.
imagine
gathering
data
from
hundreds
of
thousands
of
sensors
,
then
transferring
this
data
to
the
cloud
for
storage
and
processing
,
and
afterwards
relaying
this
decision
back
to
the
nodes
or
an
actuator
to
activate
.
despite
the
benefits
of
web
connectivity
,
it
also
comes
at
a
cost
.
with
web
connectivity
,
you
get
to
leverage
the
cloud
computing
infrastructure
,
remote
monitoring
and
assessment
as
well
as
remote
command
and
control
.
however
,
the
very
first
thing
for
people
involved
with
design
and
development
of
connected
embedded
systems
is
an
increase
in
complexity
.
compared
to
a
stand
alone
setup
,
a
network
connected
system
requires
extra
effort
in
network
design
and
connectivity
solutions
,
and
in
hardware
and
software
design
to
enable
that
connectivity
.
in
later
videos
we
'll
discuss
more
on
the
choices
you
have
when
it
comes
to
network
connectivity
.
moreover
,
with
web
connectivity
you
inherit
its
security
issues
as
well
.
when
you
connect
your
cyber-physical
systems
through
the
internet
,
you
open
then
to
roughly
the
same
level
of
security
weaknesses
and
attacks
as
in
other
internet-connected
networks
.
security
ca
n't
be
an
afterthought
anymore
.
if
you
are
building
a
connected
system
,
security
should
be
an
inherent
feature
right
from
the
beginning
.
in
case
of
the
car
example
,
you
have
a
network
limited
to
the
car
's
internals
.
so
,
locking
the
door
will
effectively
lock
out
most
thieves
from
accessing
the
computer
systems
.
but
when
you
connect
that
car
to
the
internet
,
you
ca
n't
rely
on
locking
the
doors
only
.
you
have
opened
the
car
to
attacks
from
anywhere
in
the
world
.
but
be
assured
,
we
have
technologies
,
protocols
,
and
solutions
that
will
help
mitigate
these
threats
.
and
we
'll
discuss
them
in
later
videos
.
and
lastly
web
connectivity
is
resource
heavy
.
for
really
small
low
power
devices
,
memory
and
computational
power
are
a
limited
resource
,
connectivity
puts
an
extra
burden
on
these
resources
.
depending
upon
the
connectivity
solutions
,
solutions
that
you
choose
,
you
will
have
to
add
the
extra
hardware
and
software
layers
to
communicate
and
that
takes
both
memory
and
processing
power
.
some
solutions
are
more
resource
hungry
than
others
and
we
will
discuss
that
further
later
on
.
but
nonetheless
,
connectivity
adds
an
extra
cost
.
additionally
,
if
you
decide
to
add
security
,
which
you
should
,
you
'll
need
some
sort
of
cryptographic
algorithm
to
secure
your
data
.
cryptographic
computations
are
processor-intensive
,
meaning
that
they
put
a
lot
of
strain
on
the
processor
.
this
can
drive
up
the
energy
consumption
as
well
.
let
's
discuss
connectivity
in
cyber-physical
systems
in
a
general
context
.
of
course
,
it
's
nice
to
have
an
overview
of
your
home
when
you
are
on
vacation
or
remote
start
your
car
in
a
freezing
weather
so
,
it
's
warm
when
you
get
inside
.
or
to
be
able
to
assess
what
's
wrong
in
the
production
plant
without
physically
being
there
.
but
,
you
will
come
across
situations
where
you
wo
n't
need
web
connectivity
.
for
our
very
daily
life
for
example
,
do
you
really
need
to
connect
your
stand-alone
coffee
machine
to
your
wi-fi
?
of
course
you
might
think
,
it
's
just
a
coffee
machine
.
what
can
go
wrong
if
hackers
get
access
to
it
?
over
boil
my
coffee
to
give
it
a
bitter
taste
?
the
thing
is
that
through
your
coffee
machine
if
its
security
is
weak
,
hackers
will
get
access
to
your
network
and
from
there
they
can
go
to
your
system
or
anywhere
.
in
this
case
,
the
coffee
machine
is
not
the
target
itself
but
,
another
attack
vector
against
your
system
.
so
,
yes
,
there
are
benefits
to
web
connectivity
and
there
are
the
downsides
.
what
you
will
need
to
do
is
assess
whether
you
really
need
web
connectivity
or
not
.
once
you
decide
on
the
former
,
you
'll
need
a
proper
implementation
.
that
is
where
this
course
will
help
you
.
by
the
end
,
you
'll
be
more
informed
about
the
protocols
and
solutions
available
to
you
.
and
you
will
be
able
to
make
informed
decisions
when
it
comes
to
adding
connectivity
to
your
embedded
solutions
.
[
music
]
