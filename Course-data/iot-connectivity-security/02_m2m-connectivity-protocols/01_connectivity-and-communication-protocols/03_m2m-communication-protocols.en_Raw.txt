[music]
hello, welcome to the lesson on machine to
machine or m2m communication protocols.
what are they, and
what are their basic characteristics, and
which ones are the dominant ones?
m2m communication protocols
are application layer protocols
that facilitate the transfer of
messages between two devices.
an important distinction between
connectivity and communication protocols
is that m2m connectivity protocols
facilitated linking of the devices and
reside on the link layer, while m2m
communication protocols facilitate
messaging between devices and
reside on the application layer.
these protocols allow devices
to interoperate with each other.
they do this by standardizing the key
aspects of naming, messaging,
and controls.
standardized naming means defining
how each device will be referred,
recognized, or found.
standard messaging determines how
each message is formatted, so
that all the devices can understand it.
standard controls enable the devices
to control the flow of communication or
quality of service, or
to define the type of a message.
let's have a look at some of the basic
features of m2m communication protocols.
these features allow us to
differentiate the protocols,
and to define their use cases.
communication pattern refers
to the communication model or
paradigm the protocol follows.
an example of a communication pattern
is the request-response model.
in this model,
the client node sends a request
to the central server node to
initiate a connection, and
the server responds in a predefined
pattern depending on the protocol.
another communication pattern
is the publish-subscribe model,
or pub-sub in short.
in this paradigm, all the clients during
or after connection establishment define
what type of messages they are interested
in, generally called topics or classes.
whenever a client,
a publisher sends a message
of a specific topic, the message is
forwarded to all those clients or
subscribers who have expressed
interest in the topic in question.
all application layer protocols
in the scope of this course
assume an underlying transport
protocol to be present.
the choice of a transport protocol is
important, as it effects the performance,
bandwidth, and reliability of
the m2m communication protocol.
the main contenders at tcp and udp.
tcp is used in cases where
reliability is of key importance.
udp being very simple and taking only
a few steps to form a connection
is preferred if speed is
the most important factor.
does the protocol offer
any assurance of delivery?
does it have mechanisms to ensure
the transmission of messages
in uncertain circumstances or
during unreliable connections?
what mechanisms would the protocol
would rely on to achieve this?
the answers to these questions
define the level of dependability or
reliability of the protocol.
a web connected cyber physical
system inherits the problems
of the current internet and
most likely amplifies them,
because of it's direct
connection to the real world.
two of these issues are security and
privacy.
security is an important differentiating
factor in the choice of a protocol.
security aspects of systems are discussed
in detail in later video lectures.
distributed operations means
that there is no central node to
control operation and
communication of the other nodes.
instead, communication is one to one,
where the communicating
nodes are on equal grounds.
some protocols might request that
the data goes first to a central point,
a server or broker, from which it is then
distributed to the intended recipient.
being able to know who and
what is on the network is as
important as the ability
to communicate with them.
the protocol may offer means by which
machines can recognize peers or
associated group members in the network.
messages and payload support can be
a decisive factor in selecting a protocol.
knowing which protocol will easily
integrate with the current systems
is valuable and
knowing the payload helps in this regard.
current web services and
technologies benefit from
a protocol that offer support for
typical web payloads,
such as html, plain text,
udf8 and coded text and xml.
based on the features we defined, let's
look at the dominant protocols today.
the constraint application protocol or
coap is a standardized
request response protocol.
it's creators redesign functions from http
taking into consideration,
the target device's coap will be used on.
that is embedded devices with limited
processing power, storage, and bandwidth.
it also supports publish-subscribe style
communication and resource discovery.
coap uses udp as the transport protocol
and has a dual layered structure.
the transactional layer takes care of
message handling between nodes, and
the request response layer manages
resources and transmits messages.
this enables efficient congestion
control and reliability over
udp here you see a short
overview of the protocol.
hypertext transport protocol, http,
is the backbone of modern world wide web.
it is the defacto protocol for exchanging
information between internet connected
nodes that communicate via hypertext, for
example, your browser and web server.
http sets up the regulations on how
nodes are going to communicate,
and also specifies the content.
http relies on tcp as the transport
protocol for packet transmission.
here, you see a short
overview of the protocol.
the message queuing telemetry transport,
or mqtt, was invented by ibm and
rcom to collect data from remote
devices to back up it's server.
it was introduced in 1999 by ibm,
and it was standardized in 2014.
mqtt is meant for lightweight devices,
which are constrained by both
processing power and memory.
besides this, the protocol can
transmit data over low bandwidth and
reliable connection.
the static header size
of mqtt is just 2 bytes.
it is an open-source free
to use standard protocol.
mqtt relies on tcp as
the transport protocol.
mqtt is inherently a published
subscribe protocol.
clients connect to a server to send and
receive messages on
the channels of their interest.
the server is called a broker, senders are
publishers, and receivers are subscribers.
here you see a short
overview of the protocol.
the extensible messaging and
presence protocol or
xmpp was originally a text-based
messaging protocol for
messaging between devices over a network
using the xml document format.
xmpp is being explored for
internet of things by the xmpp
standards foundations for
access control and censor data.
it's strong point is it's very familiar
device at server naming approach.
besides this, it provides end
to end security, provisioning,
and publish subscribe style communication.
it is slow, but secure and
uses tcp as the transport protocol.
here you can see a short
overview of the protocol.
the data distribution service,
or dds, is a standardized,
publish-subscribe protocol that enables
devices to communicate in near real-time.
dds has its own interoperability
protocol called wire,
which enables different implementations
of dds to communicate and interoperate.
in a dds environment, anyone can be
a publisher, subscriber or both.
it also offers an extensive quality of
service support allowing efficient and
versatile implementations of
quality of service policies.
it can use either tcp or
udp as a transport protocol.
here you see a short
overview of the protocol.
the advanced message queueing protocol or
amqp has its roots in
the financial industry.
it relies on queues between senders and
receivers for
reliability and in delivery of messages.
amqp uses tcp as the transport protocol.
it allows a server to initiate
a connection with the client.
unlike http in which the connection
has to be initiated by a client.
anqp is flexible.
it offers peer-to-peer, client-to-broker
and broker-to-broker communication.
here is a short overview of the protocol.
in this lesson, we learned the basic
features of m2m communication protocols
and studied briefly a set of popular
real world protocols in this category.
in the next lesson, we will learn about
the use cases for connectivity protocols.
[sound]
