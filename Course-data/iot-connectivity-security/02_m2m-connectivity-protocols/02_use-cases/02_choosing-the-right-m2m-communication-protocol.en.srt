1
00:00:00,222 --> 00:00:05,746
[MUSIC]

2
00:00:05,746 --> 00:00:08,030
Hello, welcome back.

3
00:00:08,030 --> 00:00:11,560
In earlier video lectures,
we have discussed the key properties

4
00:00:11,560 --> 00:00:15,700
of the application layer M2M
communication protocols.

5
00:00:15,700 --> 00:00:20,490
In this lessons, we will look at set
of popular communication protocols

6
00:00:20,490 --> 00:00:24,450
with the goal to give some guidelines to
select the right protocol for your system.

7
00:00:25,920 --> 00:00:29,010
One thing that always
needs to be considered

8
00:00:29,010 --> 00:00:33,460
is that selection between any
protocols is a matter of compromise.

9
00:00:34,910 --> 00:00:38,590
It's rare to find a situation
where a protocol fits perfectly.

10
00:00:39,610 --> 00:00:41,100
Checking all the check marks.

11
00:00:42,630 --> 00:00:47,960
In the light of this is always
a good idea to divide your criteria

12
00:00:47,960 --> 00:00:50,490
at least into two categories.

13
00:00:50,490 --> 00:00:53,844
The absolutely necessary
must have features and

14
00:00:53,844 --> 00:00:56,550
the optional of good to have features.

15
00:00:57,640 --> 00:01:01,060
Absolutely, necessary
will be the features that

16
00:01:01,060 --> 00:01:05,170
are critical to the project or
the operations performed.

17
00:01:06,560 --> 00:01:12,904
Good to have features would be those
that facilitate the operations further.

18
00:01:12,904 --> 00:01:15,957
In this video lecture,
we will describe and

19
00:01:15,957 --> 00:01:21,249
provide some of these criteria and
use cases for the considered protocols.

20
00:01:23,906 --> 00:01:28,350
These criteria are Deployment Scenario.

21
00:01:30,010 --> 00:01:34,250
The Deployment Scenario is one of
the most important factors to look into.

22
00:01:35,910 --> 00:01:39,200
In what kind of scenario
will a protocol be deployed?

23
00:01:39,200 --> 00:01:46,327
Would be a real-time system,
telemetry, security, messaging?

24
00:01:46,327 --> 00:01:49,403
What kind of connection will be provided?

25
00:01:49,403 --> 00:01:55,249
Is it a low power lossy network or
a high throughput always on setup?

26
00:01:55,249 --> 00:01:59,870
All of these cases require different
features from the communication protocol.

27
00:02:01,861 --> 00:02:02,760
Security.

28
00:02:04,040 --> 00:02:08,075
You need to determine what
kind of security you need and

29
00:02:08,075 --> 00:02:13,525
then look into whether it is provided or
not by your candidate protocols.

30
00:02:13,525 --> 00:02:18,523
With the current emergence of malware and
data breaches,

31
00:02:18,523 --> 00:02:25,459
it's very important to not only project
data at rest, but also data in motion and

32
00:02:25,459 --> 00:02:30,487
this means the data that would
be carried by the protocol.

33
00:02:30,487 --> 00:02:34,351
Communication Paradigm.

34
00:02:34,351 --> 00:02:38,436
If your link layer connectivity
product goal is mesh-based.

35
00:02:38,436 --> 00:02:42,320
Meaning, there is no primary gateway or
broker.

36
00:02:42,320 --> 00:02:44,750
It make sense to use an application layer,

37
00:02:44,750 --> 00:02:47,870
communication protocol
that has the same feature.

38
00:02:48,950 --> 00:02:52,950
A protocol which offers direct
client to client communication

39
00:02:52,950 --> 00:02:54,300
without a central server.

40
00:02:55,830 --> 00:03:01,950
On the contrary, if you need to
aggregate data from multiple sensors,

41
00:03:01,950 --> 00:03:06,200
it's better to use a protocol that
has a broker or central server.

42
00:03:07,560 --> 00:03:12,315
In this case, there is by default,
only one data point,

43
00:03:12,315 --> 00:03:18,572
the broker from which all the information
can be collected and processed.

44
00:03:18,572 --> 00:03:20,641
Payload Format.

45
00:03:20,641 --> 00:03:24,150
The cyber-physical system
rarely works on its own.

46
00:03:25,490 --> 00:03:31,480
Generally, it is part of a larger system,
such as a control or monitoring system.

47
00:03:32,710 --> 00:03:37,310
In this case, design time and
complexity can be reduced by

48
00:03:37,310 --> 00:03:41,930
using a protocol that supports the payload
format of the rest of the system.

49
00:03:44,170 --> 00:03:48,432
Web connected system should
utilize communication

50
00:03:48,432 --> 00:03:53,368
protocols that support web
related formats, such as HDML,

51
00:03:53,368 --> 00:03:57,354
XML, even JSON or
JavaScript object notation.

52
00:03:57,354 --> 00:04:02,176
Strictly, machine to machine
systems should utilize protocols

53
00:04:02,176 --> 00:04:04,548
that provide support for JSON.

54
00:04:04,548 --> 00:04:07,120
Compatibility with Existing Installation.

55
00:04:08,610 --> 00:04:13,731
It is important to know what kind of
protocols and systems are in use at

56
00:04:13,731 --> 00:04:18,959
the moment in the environment in
which your system will be installed.

57
00:04:18,959 --> 00:04:23,954
This should be the primary guideline for
your decision unless there are severe

58
00:04:23,954 --> 00:04:28,960
limitations in the current systems that
are going to be fixed with the new one.

59
00:04:31,025 --> 00:04:32,390
Quality of Service.

60
00:04:33,860 --> 00:04:38,160
Critical systems require
strong quality of service.

61
00:04:39,250 --> 00:04:42,890
Some protocols offer built-in
quality of service features.

62
00:04:42,890 --> 00:04:49,660
Some protocols do not, but rely on
low layer protocols to provide them.

63
00:04:52,159 --> 00:04:53,570
Communication Performance.

64
00:04:55,220 --> 00:04:59,220
Speed, throughput, cashing, complexity and

65
00:04:59,220 --> 00:05:02,160
quality of service are all
factors of performance.

66
00:05:03,620 --> 00:05:06,691
How fast are the connections established?

67
00:05:06,691 --> 00:05:10,069
How much throughput can
the protocol provide?

68
00:05:10,069 --> 00:05:13,590
Does it for a cashing and resending?

69
00:05:14,650 --> 00:05:19,809
What is the communication complexity and
how is quality of service handled?

70
00:05:19,809 --> 00:05:24,840
All of these provide a measure of the
communication performance of the protocol.

71
00:05:27,913 --> 00:05:32,528
The first protocol to address is HTTP.

72
00:05:32,528 --> 00:05:37,233
HTTP offers non-optimal performance,
as it was designed for

73
00:05:37,233 --> 00:05:41,240
always on always reliable
connectivity platforms.

74
00:05:42,650 --> 00:05:48,300
However, it offers the highest level of
flexibility and ease of integration into

75
00:05:48,300 --> 00:05:53,750
current and future cloud systems
without any gateways or translations.

76
00:05:55,510 --> 00:06:01,260
It also offers the most comprehensive
support for different payload formats.

77
00:06:01,260 --> 00:06:09,100
And moreover, the newer standard
HTTPS offers solid security features.

78
00:06:09,100 --> 00:06:15,628
The downside of HTTP are low performance
and high energy consumption.

79
00:06:15,628 --> 00:06:19,829
Also, it is a connection list protocol.

80
00:06:19,829 --> 00:06:22,601
So new connections have to be established,
frequently.

81
00:06:25,834 --> 00:06:30,190
Consider CoAP,
Constrained Application Protocol to be

82
00:06:30,190 --> 00:06:35,370
a cyber-physical systems and
Internet of Things version of HTTP.

83
00:06:36,840 --> 00:06:41,620
It offers what HTTP does
plus it is lightweight,

84
00:06:41,620 --> 00:06:44,370
has basic quality of service features and

85
00:06:44,370 --> 00:06:48,210
higher performance in terms of
processing power and memory consumption.

86
00:06:50,020 --> 00:06:54,460
CoAP was designed in such
a way that it is easy

87
00:06:54,460 --> 00:06:58,664
to build a gateway between HTTP and CoAP.

88
00:06:58,664 --> 00:07:04,020
And therefore, CoAP can be used,
rather seamlessly in web-based scenarios.

89
00:07:07,539 --> 00:07:13,023
MQTT or Message Queuing Telemetry
Transport Protocol is good for telemetry

90
00:07:13,023 --> 00:07:19,030
applications, of course, because it was
originally designed for this purpose.

91
00:07:20,420 --> 00:07:23,610
The main issue with MQTT is security.

92
00:07:24,710 --> 00:07:29,885
It by itself doesn't provide any security
features although it can used with

93
00:07:29,885 --> 00:07:35,980
lower-level security solutions,
such as TLS, transport layer security.

94
00:07:37,190 --> 00:07:39,810
MQTT is very lightweight.

95
00:07:39,810 --> 00:07:43,760
It doesn't offer any specific
payload format support.

96
00:07:43,760 --> 00:07:47,890
It just transmits everything has bias.

97
00:07:47,890 --> 00:07:53,121
This makes its integration with
current systems, rather difficult.

98
00:07:53,121 --> 00:07:56,399
Because of its quality
of service features,

99
00:07:56,399 --> 00:08:01,924
it can handle unreliable connections
very well and should be considered for

100
00:08:01,924 --> 00:08:07,205
applications where remote operations or
messaging plays the key role.

101
00:08:09,885 --> 00:08:12,818
XMPP or Extensible Messaging and

102
00:08:12,818 --> 00:08:18,060
Presence Protocol is all about messaging,
and security.

103
00:08:19,230 --> 00:08:23,990
If your devices or notes require
messaging between each other and

104
00:08:23,990 --> 00:08:30,120
this messaging should be done securely,
XMPP used the protocol of choice.

105
00:08:31,280 --> 00:08:35,780
XMPP supports both one to one and
group oriented messaging.

106
00:08:37,890 --> 00:08:44,839
Security alarm systems can use XMPP
to alert users on their smartphones.

107
00:08:44,839 --> 00:08:49,610
As most of the modern operating
systems have some form of

108
00:08:49,610 --> 00:08:53,273
XMPP implementation already built-in.

109
00:08:53,273 --> 00:08:57,733
Cities can use XMPP to alert users
about traffic changes due to

110
00:08:57,733 --> 00:09:01,870
construction work or
natural disasters, for example.

111
00:09:03,590 --> 00:09:07,034
XMPP suitable to mashing
to mashing messaging and

112
00:09:07,034 --> 00:09:11,135
then relaying that information
to humans or controllers.

113
00:09:11,135 --> 00:09:17,889
On the downside, it is heavy and
not very real-time.

114
00:09:17,889 --> 00:09:24,140
DDS or Data Distribution Service protocol
is about reliability and performance.

115
00:09:25,360 --> 00:09:28,880
It has a comprehensive support for
quality of service.

116
00:09:30,340 --> 00:09:35,810
Each message will get delivered to
its recipient even if the broker,

117
00:09:35,810 --> 00:09:38,590
which the recipient is
connected to goes offline.

118
00:09:39,840 --> 00:09:43,580
This reliability feature
is one of the key reasons

119
00:09:43,580 --> 00:09:46,770
why DDS is preferred in
military applications.

120
00:09:47,870 --> 00:09:50,110
It also has a strong focus on security.

121
00:09:51,200 --> 00:09:55,789
It's very scalable and can easily
accommodate growing number of nodes.

122
00:09:57,170 --> 00:10:02,404
In this module and the previous one, we
have discussed different communication and

123
00:10:02,404 --> 00:10:07,871
connectivity protocols and the underlying
architecture of the web and its protocols.

124
00:10:07,871 --> 00:10:09,154
In the next module,

125
00:10:09,154 --> 00:10:13,545
we will move onto building web
connectivity into embedded systems.

126
00:10:13,545 --> 00:10:14,045
[MUSIC]