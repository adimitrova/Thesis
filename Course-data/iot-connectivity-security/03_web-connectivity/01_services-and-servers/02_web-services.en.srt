1
00:00:00,008 --> 00:00:06,680
[SOUND] Welcome back.

2
00:00:06,680 --> 00:00:10,934
In this video lecture, we will look
into the technologies that allow you to

3
00:00:10,934 --> 00:00:13,990
interact with the different web services.

4
00:00:13,990 --> 00:00:17,520
The benefit of web connectivity
is that you can utilize and

5
00:00:17,520 --> 00:00:20,230
interact with different web services.

6
00:00:20,230 --> 00:00:23,380
Services developed and
perfected by other vendors.

7
00:00:24,700 --> 00:00:29,720
For example, if you want to build user
authentication into your product,

8
00:00:29,720 --> 00:00:31,070
you can just use Authy.

9
00:00:32,450 --> 00:00:36,130
Authy is a web service that
provides two factor authentication.

10
00:00:38,050 --> 00:00:41,719
In another video, we discussed
a temperature sensor with a web server.

11
00:00:43,490 --> 00:00:48,390
If you want that temperature sensor
to send you a tweet for every alert,

12
00:00:48,390 --> 00:00:53,160
you can just call Twitter's API or
Application Programming Interface service.

13
00:00:54,410 --> 00:00:56,910
Are you running out of on-board storage?

14
00:00:58,300 --> 00:01:01,130
Call the Amazon Web Services API and

15
00:01:01,130 --> 00:01:04,149
off load all the data to
Amazon's data centers.

16
00:01:05,770 --> 00:01:08,640
All of this is possible because we have

17
00:01:08,640 --> 00:01:11,611
standard ways to connect
to these web services.

18
00:01:13,380 --> 00:01:14,412
In this lesson,

19
00:01:14,412 --> 00:01:20,290
we will look into two of the major classes
of such technologies, REST and soap.

20
00:01:20,290 --> 00:01:24,819
But before we get into that, we will look
into the data formats that they use.

21
00:01:25,840 --> 00:01:27,040
Let's start with JSON.

22
00:01:30,330 --> 00:01:33,370
JSON is a text-based data
serialization format.

23
00:01:34,570 --> 00:01:37,360
It stands for JavaScript Object Notation.

24
00:01:38,720 --> 00:01:42,769
JSON is made of two structures,
objects and arrays.

25
00:01:45,160 --> 00:01:49,180
Objects start and end with curly brackets.

26
00:01:49,180 --> 00:01:52,950
Arrays start and end with square brackets.

27
00:01:52,950 --> 00:01:56,355
The data is in name value pairs and
one set or

28
00:01:56,355 --> 00:02:00,527
pair of data is separated
from another with a comma.

29
00:02:00,527 --> 00:02:04,300
And this is pretty much
the basics of JSON.

30
00:02:04,300 --> 00:02:10,640
On the screen you see
an example JSON object Plants.

31
00:02:10,640 --> 00:02:16,650
The data is in name value pairs, the pairs
are separated from each other with commas.

32
00:02:17,950 --> 00:02:20,573
We also have an array
with three objects in it.

33
00:02:20,573 --> 00:02:23,743
In JSON, everything can be nested.

34
00:02:23,743 --> 00:02:28,734
As you can see here that we have an array
of objects that itself is a part

35
00:02:28,734 --> 00:02:30,900
of a larger object, Plants.

36
00:02:34,770 --> 00:02:40,370
If we want to represent that same
data in XML, it will look like this.

37
00:02:43,800 --> 00:02:47,570
XML stands for Extensible Markup Language.

38
00:02:47,570 --> 00:02:49,290
It is another data encoding format.

39
00:02:50,360 --> 00:02:53,245
And like JSON it is also text-based.

40
00:02:54,720 --> 00:03:01,790
The chat protocol XMPP uses XML based
objects to send and receive messages.

41
00:03:04,790 --> 00:03:08,860
The example that you see on
the screen is pretty simple.

42
00:03:08,860 --> 00:03:11,340
But XML is relatively complex.

43
00:03:13,080 --> 00:03:18,155
Old Microsoft Office Word files
had an extension of doc or

44
00:03:18,155 --> 00:03:24,670
d-o-c and
the newer ones have docx or d-o-c-x.

45
00:03:24,670 --> 00:03:27,810
That last x in docx stands for XML.

46
00:03:29,060 --> 00:03:33,920
This is because the whole structure of the
newer Word documents is formatted in XML.

47
00:03:36,100 --> 00:03:40,730
And because XML is an open standard,
other applications besides

48
00:03:40,730 --> 00:03:46,269
Microsoft Office can also accurately
read and format docx files.

49
00:03:47,900 --> 00:03:50,220
Now back to our web services.

50
00:03:51,810 --> 00:03:55,050
We just describe two
data exchange formats.

51
00:03:55,050 --> 00:03:59,028
And now we will describe two of
the common specifications for

52
00:03:59,028 --> 00:04:00,981
implementing a web service.

53
00:04:04,011 --> 00:04:08,294
REST stands for representation or
state transfer and

54
00:04:08,294 --> 00:04:12,870
lays out some ground rules on
how to design web services.

55
00:04:15,830 --> 00:04:19,929
REST is not a protocol but
a style of designing services.

56
00:04:22,380 --> 00:04:28,530
It is also protocol independent,
but is generally paired with HTTP.

57
00:04:30,660 --> 00:04:35,093
Some salient features of REST
are shown on the screen.

58
00:04:35,093 --> 00:04:41,408
We will discuss it in much
more detail in a later video.

59
00:04:41,408 --> 00:04:45,935
As this style of designing web
services can be easily translated into

60
00:04:45,935 --> 00:04:47,270
embedded systems.

61
00:04:48,900 --> 00:04:52,862
In short, for every service,
we have a URL and

62
00:04:52,862 --> 00:04:57,650
we interact with that service via HTTP and
its methods.

63
00:05:01,354 --> 00:05:04,205
Some of the basic principles of REST are,

64
00:05:06,481 --> 00:05:11,672
Keep your design limited to
HTTP methods like get and put.

65
00:05:14,075 --> 00:05:18,731
Each request should be independent
of the previous or next one.

66
00:05:23,700 --> 00:05:27,543
For each service you should
have a separate URI.

67
00:05:30,399 --> 00:05:35,912
The data exchange format can be JSON,
XML or both.

68
00:05:35,912 --> 00:05:37,445
Generally, it is JSON.

69
00:05:41,184 --> 00:05:45,320
SOAP stands for
simple object access protocol and

70
00:05:45,320 --> 00:05:49,860
is another method for
interacting with web services.

71
00:05:52,220 --> 00:05:58,970
It relies on XML and like REST,
it is protocol and platform independent.

72
00:06:01,860 --> 00:06:05,100
The protocol has three
main characteristics.

73
00:06:07,120 --> 00:06:10,804
Extensibility, meaning it
supports expansion and

74
00:06:10,804 --> 00:06:15,920
there are several extensions available
that you can use with that SOAP.

75
00:06:18,940 --> 00:06:22,524
Neutrality in this case means
is it protocol neutral.

76
00:06:26,123 --> 00:06:29,590
Independence from the platform and
programming language.

77
00:06:30,670 --> 00:06:34,720
The developers can use any
programming model they see fit,

78
00:06:34,720 --> 00:06:39,828
whether it is object-oriented or
agent-oriented or dataflow-based.

79
00:06:42,731 --> 00:06:45,360
So, which one should you use?

80
00:06:46,660 --> 00:06:49,300
Sometimes you don't really have a choice.

81
00:06:49,300 --> 00:06:52,010
If you are interacting with a web service,

82
00:06:52,010 --> 00:06:55,339
you will have to use the technology
that they have used.

83
00:06:56,350 --> 00:06:59,720
If you're building you're own web service,
then you do have a choice.

84
00:07:02,010 --> 00:07:05,830
The basic difference is between our
two candidates are outlined here.

85
00:07:08,270 --> 00:07:12,559
REST is lighter than SOAP in
terms of network resources.

86
00:07:14,460 --> 00:07:18,480
REST is more power efficient than
SOAP in small embedded systems.

87
00:07:20,510 --> 00:07:21,570
It is also simpler.

88
00:07:23,530 --> 00:07:27,402
On the other hand,
SOAP offers better security.

89
00:07:27,402 --> 00:07:30,880
It has many extensions and

90
00:07:30,880 --> 00:07:36,420
it is inherently protocol independent.

91
00:07:37,690 --> 00:07:43,420
Also REST is protocol independent in
principle, but is generally bound to HTTP.

92
00:07:44,860 --> 00:07:47,968
In this lesson,
we looked at the technologies and

93
00:07:47,968 --> 00:07:51,600
data formats that allow us to
interact with web services.

94
00:07:51,600 --> 00:07:56,949
In the next video lecture, we will learn
about RESTful web services in detail.

95
00:07:56,949 --> 00:08:01,320
[SOUND]