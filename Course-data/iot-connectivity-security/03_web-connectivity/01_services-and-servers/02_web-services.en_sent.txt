[sound] welcome back.
in this video lecture, we will look into the technologies that allow you to interact with the different web services.
the benefit of web connectivity is that you can utilize and interact with different web services.
services developed and perfected by other vendors.
for example, if you want to build user authentication into your product, you can just use authy.
authy is a web service that provides two factor authentication.
in another video, we discussed a temperature sensor with a web server.
if you want that temperature sensor to send you a tweet for every alert, you can just call twitter's api or application programming interface service.
are you running out of on-board storage?
call the amazon web services api and off load all the data to amazon's data centers.
all of this is possible because we have standard ways to connect to these web services.
in this lesson, we will look into two of the major classes of such technologies, rest and soap.
but before we get into that, we will look into the data formats that they use.
let's start with json.
json is a text-based data serialization format.
it stands for javascript object notation.
json is made of two structures, objects and arrays.
objects start and end with curly brackets.
arrays start and end with square brackets.
the data is in name value pairs and one set or pair of data is separated from another with a comma.
and this is pretty much the basics of json.
on the screen you see an example json object plants.
the data is in name value pairs, the pairs are separated from each other with commas.
we also have an array with three objects in it.
in json, everything can be nested.
as you can see here that we have an array of objects that itself is a part of a larger object, plants.
if we want to represent that same data in xml, it will look like this.
xml stands for extensible markup language.
it is another data encoding format.
and like json it is also text-based.
the chat protocol xmpp uses xml based objects to send and receive messages.
the example that you see on the screen is pretty simple.
but xml is relatively complex.
old microsoft office word files had an extension of doc or d-o-c and the newer ones have docx or d-o-c-x.
that last x in docx stands for xml.
this is because the whole structure of the newer word documents is formatted in xml.
and because xml is an open standard, other applications besides microsoft office can also accurately read and format docx files.
now back to our web services.
we just describe two data exchange formats.
and now we will describe two of the common specifications for implementing a web service.
rest stands for representation or state transfer and lays out some ground rules on how to design web services.
rest is not a protocol but a style of designing services.
it is also protocol independent, but is generally paired with http.
some salient features of rest are shown on the screen.
we will discuss it in much more detail in a later video.
as this style of designing web services can be easily translated into embedded systems.
in short, for every service, we have a url and we interact with that service via http and its methods.
some of the basic principles of rest are, keep your design limited to http methods like get and put.
each request should be independent of the previous or next one.
for each service you should have a separate uri.
the data exchange format can be json, xml or both.
generally, it is json.
soap stands for simple object access protocol and is another method for interacting with web services.
it relies on xml and like rest, it is protocol and platform independent.
the protocol has three main characteristics.
extensibility, meaning it supports expansion and there are several extensions available that you can use with that soap.
neutrality in this case means is it protocol neutral.
independence from the platform and programming language.
the developers can use any programming model they see fit, whether it is object-oriented or agent-oriented or dataflow-based.
so, which one should you use?
sometimes you don't really have a choice.
if you are interacting with a web service, you will have to use the technology that they have used.
if you're building you're own web service, then you do have a choice.
the basic difference is between our two candidates are outlined here.
rest is lighter than soap in terms of network resources.
rest is more power efficient than soap in small embedded systems.
it is also simpler.
on the other hand, soap offers better security.
it has many extensions and it is inherently protocol independent.
also rest is protocol independent in principle, but is generally bound to http.
in this lesson, we looked at the technologies and data formats that allow us to interact with web services.
in the next video lecture, we will learn about restful web services in detail.
[sound]
