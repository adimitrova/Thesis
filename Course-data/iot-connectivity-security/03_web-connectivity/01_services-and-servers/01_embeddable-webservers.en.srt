1
00:00:00,000 --> 00:00:05,355
[MUSIC]

2
00:00:05,355 --> 00:00:07,020
Hello.

3
00:00:07,020 --> 00:00:09,650
Welcome back to the course
on web connectivity and

4
00:00:09,650 --> 00:00:12,810
security in cyber physical systems.

5
00:00:12,810 --> 00:00:17,950
This lesson starts a module on web
solutions for embedded systems.

6
00:00:17,950 --> 00:00:21,770
In this video lecture,
we will walk you through web servers

7
00:00:21,770 --> 00:00:25,700
that are inherently designed for
low power embedded systems.

8
00:00:25,700 --> 00:00:29,120
We call them embeddable web servers.

9
00:00:29,120 --> 00:00:32,732
But first of all, what is a web server?

10
00:00:32,732 --> 00:00:35,810
If you have been following
the lessons in this course,

11
00:00:35,810 --> 00:00:39,720
you might remember that in an earlier
lecture we talked about the key

12
00:00:39,720 --> 00:00:43,710
technologies that enable
the World Wide Web.

13
00:00:43,710 --> 00:00:49,530
These technologies are HTML,
HTTP and Webservers.

14
00:00:50,810 --> 00:00:54,970
HTTP has been discuss in
detail in other lessons.

15
00:00:54,970 --> 00:00:57,370
Today, we will look into web servers.

16
00:00:59,030 --> 00:01:02,810
The protocol HTTP works
on a client server model.

17
00:01:03,820 --> 00:01:08,130
A client sends a request to a server and
the server responds.

18
00:01:10,230 --> 00:01:15,610
Therefore, web servers
are applications that accept, read and

19
00:01:15,610 --> 00:01:20,004
respond to the HTTP requests from clients.

20
00:01:20,004 --> 00:01:27,630
One of the principles of a web server is
that it's always responds to a request.

21
00:01:27,630 --> 00:01:33,790
The response can be some information that
the user requested or an error message.

22
00:01:33,790 --> 00:01:35,330
But the server will respond.

23
00:01:37,370 --> 00:01:40,810
What if the server is too
busy to fulfill a request?

24
00:01:42,100 --> 00:01:45,380
Then it will send an error
message with a status code

25
00:01:45,380 --> 00:01:49,950
503 indicating that it's temporarily busy.

26
00:01:51,850 --> 00:01:56,560
The next question you might have is,
okay, I now know that I have to request

27
00:01:56,560 --> 00:02:00,670
a web server, but
how do I identify and access one.

28
00:02:02,990 --> 00:02:05,370
This is what URLs are for.

29
00:02:07,200 --> 00:02:11,900
URL stands for
uniform resource locator and

30
00:02:11,900 --> 00:02:16,230
as the name suggests, it is used
to identify resources on the web.

31
00:02:18,980 --> 00:02:21,490
On the screen is an example URL.

32
00:02:22,730 --> 00:02:23,732
It has three parts.

33
00:02:26,494 --> 00:02:31,470
The first is the protocol,
in our case, it is HTTP.

34
00:02:33,050 --> 00:02:39,529
The second is the IP address of the
machine where the web server is running.

35
00:02:40,920 --> 00:02:44,590
And the third is the location
of the resource or

36
00:02:44,590 --> 00:02:47,650
file that we want to
access on that machine.

37
00:02:49,760 --> 00:02:56,281
So at the very least, a web server should
be able to understand HTTP and URLs.

38
00:02:58,278 --> 00:03:04,520
Next, we will look into web servers
designed for lightweight use.

39
00:03:04,520 --> 00:03:10,060
When you are on your computer and you want
to access the web, you open a browser and

40
00:03:10,060 --> 00:03:13,690
type the URL of the web server
that you want to access.

41
00:03:14,710 --> 00:03:17,660
Similarly, if you want
your embedded device or

42
00:03:17,660 --> 00:03:21,560
sensor to access the web,
you don't need a web server.

43
00:03:22,680 --> 00:03:28,380
All you need is a small client that
can send and receive HTTP requests.

44
00:03:28,380 --> 00:03:29,060
Simple enough.

45
00:03:30,530 --> 00:03:36,260
But what if someone else on the web wants
to access your embedded device or sensor?

46
00:03:36,260 --> 00:03:37,829
Then you will need a web server.

47
00:03:39,180 --> 00:03:43,960
Remember, web servers comes
in all sizes and shapes.

48
00:03:43,960 --> 00:03:48,732
From resource heavy ones
like Apache to light-weight

49
00:03:48,732 --> 00:03:53,260
ones like [INAUDIBLE]
and nginx.

50
00:03:53,260 --> 00:03:58,110
But we are looking for web servers that
will run on devices with a few megabytes,

51
00:03:58,110 --> 00:04:02,800
even kilobytes, of RAM and
with very limited processing power.

52
00:04:03,970 --> 00:04:08,840
Web servers that are small enough that
you can execute them as part of your

53
00:04:08,840 --> 00:04:12,570
standard application code.

54
00:04:12,570 --> 00:04:15,900
We will look into two of these small,

55
00:04:15,900 --> 00:04:19,940
lightweight web servers,
SMEWS and Mongoose.

56
00:04:22,420 --> 00:04:26,630
SMEWS stands for Smart and
Mobile Embedded Web Server.

57
00:04:28,140 --> 00:04:32,180
It is developed by researchers
from Lille 1 University in France.

58
00:04:34,230 --> 00:04:39,200
It can run on devices with as
low as 200 bytes of RAM and

59
00:04:39,200 --> 00:04:40,989
8 kilobytes of flash memory.

60
00:04:42,350 --> 00:04:44,870
It supports multiple connections and

61
00:04:44,870 --> 00:04:49,800
doesn't require any operating system
to be installed in the system.

62
00:04:49,800 --> 00:04:52,160
It has its own TCP/IP stack.

63
00:04:53,330 --> 00:04:57,290
This web server comes as a very
compact and complete package.

64
00:04:59,940 --> 00:05:02,989
Mongoose is another embeddable web server.

65
00:05:04,850 --> 00:05:08,400
It's open source and
free for non-commercial use.

66
00:05:10,000 --> 00:05:14,965
Mongoose is more advanced and
also heavier than SMEWS.

67
00:05:14,965 --> 00:05:18,700
The list of features that Mongoose
supports is on the screen.

68
00:05:21,100 --> 00:05:24,790
It's constantly being developed and
more features are being added.

69
00:05:26,170 --> 00:05:30,830
We have tested an implementation of
Mongoose in our lab and it was able to

70
00:05:30,830 --> 00:05:37,130
handle up to 2,000 clients and 1 million
request in total on our test set up.

71
00:05:39,480 --> 00:05:44,250
To show you how to use an embeddable
web server in your application,

72
00:05:44,250 --> 00:05:45,539
we will use Mongoose.

73
00:05:47,150 --> 00:05:48,950
Let's look at an example scenario.

74
00:05:50,230 --> 00:05:53,360
Imagine you have a temperature
sensor whose value

75
00:05:53,360 --> 00:05:55,810
you would like to access via your browser.

76
00:05:57,550 --> 00:06:01,910
We will not go into too much detail but
we'll only explore the basic

77
00:06:01,910 --> 00:06:06,910
functions that we need to implement
the scenario we just defined.

78
00:06:09,170 --> 00:06:14,940
First of all, include the Mongoose
header file into your C program.

79
00:06:17,330 --> 00:06:21,530
Next we will use a function
from the Mongoose API or

80
00:06:21,530 --> 00:06:27,309
application programming interface, that
enables us to handle incoming requests.

81
00:06:28,650 --> 00:06:33,008
In this function, we will specify
what happens when a user access

82
00:06:33,008 --> 00:06:36,030
a specific URL or
uniform resource locator.

83
00:06:39,232 --> 00:06:46,162
If you look at the line number 10,
we have defined that if the access URI or

84
00:06:46,162 --> 00:06:53,760
uniform resource identifier is /TEMP,
the program should take three actions.

85
00:06:55,010 --> 00:06:59,870
Call a function to check the temperature,
send

86
00:06:59,870 --> 00:07:04,970
the temperature back and
close the connection.

87
00:07:04,970 --> 00:07:10,000
The last step is to build the main
function and call the web server.

88
00:07:11,500 --> 00:07:13,940
How that is done is shown on the screen.

89
00:07:16,780 --> 00:07:17,430
And that's it.

90
00:07:18,530 --> 00:07:21,900
In three simple functions you
can make your applications or

91
00:07:21,900 --> 00:07:25,129
devices respond to HTTP requests.

92
00:07:28,120 --> 00:07:34,560
Now as a last step in this example,
if you go to any browser and type the URL

93
00:07:34,560 --> 00:07:39,880
in the form shown on the screen,
you will get the temperature as text.

94
00:07:41,510 --> 00:07:42,940
To summarize.

95
00:07:42,940 --> 00:07:46,588
In this lesson,
we learned about basics of web servers and

96
00:07:46,588 --> 00:07:49,500
looked at an example
web server application.

97
00:07:50,690 --> 00:07:55,019
In the next lecture, we will look at web
services and their dominant technologies.

98
00:07:55,019 --> 00:08:00,679
[SOUND]