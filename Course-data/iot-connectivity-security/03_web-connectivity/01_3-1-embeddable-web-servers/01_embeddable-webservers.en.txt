[MUSIC] Hello. Welcome back to the course
on web connectivity and security in cyber physical systems. This lesson starts a module on web
solutions for embedded systems. In this video lecture,
we will walk you through web servers that are inherently designed for
low power embedded systems. We call them embeddable web servers. But first of all, what is a web server? If you have been following
the lessons in this course, you might remember that in an earlier
lecture we talked about the key technologies that enable
the World Wide Web. These technologies are HTML,
HTTP and Webservers. HTTP has been discuss in
detail in other lessons. Today, we will look into web servers. The protocol HTTP works
on a client server model. A client sends a request to a server and
the server responds. Therefore, web servers
are applications that accept, read and respond to the HTTP requests from clients. One of the principles of a web server is
that it's always responds to a request. The response can be some information that
the user requested or an error message. But the server will respond. What if the server is too
busy to fulfill a request? Then it will send an error
message with a status code 503 indicating that it's temporarily busy. The next question you might have is,
okay, I now know that I have to request a web server, but
how do I identify and access one. This is what URLs are for. URL stands for
uniform resource locator and as the name suggests, it is used
to identify resources on the web. On the screen is an example URL. It has three parts. The first is the protocol,
in our case, it is HTTP. The second is the IP address of the
machine where the web server is running. And the third is the location
of the resource or file that we want to
access on that machine. So at the very least, a web server should
be able to understand HTTP and URLs. Next, we will look into web servers
designed for lightweight use. When you are on your computer and you want
to access the web, you open a browser and type the URL of the web server
that you want to access. Similarly, if you want
your embedded device or sensor to access the web,
you don't need a web server. All you need is a small client that
can send and receive HTTP requests. Simple enough. But what if someone else on the web wants
to access your embedded device or sensor? Then you will need a web server. Remember, web servers comes
in all sizes and shapes. From resource heavy ones
like Apache to light-weight ones like [INAUDIBLE]
and nginx. But we are looking for web servers that
will run on devices with a few megabytes, even kilobytes, of RAM and
with very limited processing power. Web servers that are small enough that
you can execute them as part of your standard application code. We will look into two of these small, lightweight web servers,
SMEWS and Mongoose. SMEWS stands for Smart and
Mobile Embedded Web Server. It is developed by researchers
from Lille 1 University in France. It can run on devices with as
low as 200 bytes of RAM and 8 kilobytes of flash memory. It supports multiple connections and doesn't require any operating system
to be installed in the system. It has its own TCP/IP stack. This web server comes as a very
compact and complete package. Mongoose is another embeddable web server. It's open source and
free for non-commercial use. Mongoose is more advanced and
also heavier than SMEWS. The list of features that Mongoose
supports is on the screen. It's constantly being developed and
more features are being added. We have tested an implementation of
Mongoose in our lab and it was able to handle up to 2,000 clients and 1 million
request in total on our test set up. To show you how to use an embeddable
web server in your application, we will use Mongoose. Let's look at an example scenario. Imagine you have a temperature
sensor whose value you would like to access via your browser. We will not go into too much detail but
we'll only explore the basic functions that we need to implement
the scenario we just defined. First of all, include the Mongoose
header file into your C program. Next we will use a function
from the Mongoose API or application programming interface, that
enables us to handle incoming requests. In this function, we will specify
what happens when a user access a specific URL or
uniform resource locator. If you look at the line number 10,
we have defined that if the access URI or uniform resource identifier is /TEMP,
the program should take three actions. Call a function to check the temperature,
send the temperature back and
close the connection. The last step is to build the main
function and call the web server. How that is done is shown on the screen. And that's it. In three simple functions you
can make your applications or devices respond to HTTP requests. Now as a last step in this example,
if you go to any browser and type the URL in the form shown on the screen,
you will get the temperature as text. To summarize. In this lesson,
we learned about basics of web servers and looked at an example
web server application. In the next lecture, we will look at web
services and their dominant technologies. [SOUND]