Throughout the code of Mflix, we can find some queries being submitted to database. We have queries on movies where we express an filters. We have other queries directly matching a particular field like in the square object ID or even some other searching by its email address. Now some of these find operations that we've seen are very straightforward. We're filtering based on one single value for one single field. Which is great. However, MongoDB offers much more extensive sets of query operators that allows us to find documents using multiple operators and that's the purpose of this lesson today. Querying movies using some of these query operators that allows us to do a bunch of different things around our documents. Let's see some of this in action. Within the course handouts you'll see this movies query operators, Jupiter notebook. Let's go ahead and load it. And just do the typical steps. Let's import our needed modules. Our PyMongo and our Pprint. Let's make sure we can connect to our Atlas cluster. Again, it's the same cluster been using with the same username and password. Don't forget about that and don't forget where to get it. Go to your cluster, press the connect, look into your connect your application and copy the uri. Once you get it, paste it and replace the password placeholder. Now let's go ahead and run this and we have connection. No errors. All good. Now, since I was born in 1983, yes, I am that old, I want to know all movies launched after 1983 so that means every single movie where the year of launch is greater than equals 1983 and that's exactly what $gte stands for, greater than equals 1983. Once I run this I can see that the first pprint is the counts 32,584. A lot of different movies launched since I was born and I can guarantee you I did not see all of these. Which is fine. In the first few years of my existence I was quite a young child. I wouldn't be watching a lot of movies like this. Now let's say that I would like to reduce the scope of this amount of data for the ones that correspond to the period of my childhood, let's say from 1989 to 1999. And here we can use the operators greater than equals again for the year but also combine it with $lt. LT stands for lower than. In this case since I want to go from 1989 to 1999, I can also go to lower than 2000 being exclusive the year 2000 onwards. If I run this I can have a smaller amount of information or a smaller amount of movies launched in this period. But let's say that I'm also only interested on a specific set of different movies or in this particular case a different set of years in which movies were launched. I'm only interested right now in knowing which movies were launched in 1995 and 2005 or 2015. For that I can use the $in operator over the field year to find exactly that information. This will filter out only the movies which were launched on all of these three years combined. Once I run the query I can see that 3,980 movies were launched in those three years. A very prolific set of years. But we can do further than that. I'm going to keep the same initial predictor of saying that I want all movies which were released in 1995, 2005 and 2015 and also exclude the genre, adult movies, to cope with some audience restrictions. Alright. If I do that and I can combine any sort of different fields with different query operators, I can have a very expressive query language that allows me to do a lot of different combinations to find my result set. MongoDB has many more types of operators from comparison to logical to elements and also some specific like geospatial or text operators. The query engine allows us to be very expressive in the types of queries we might want to execute in MongoDB. Please find in the lesson notes the links to access the full extent of all query operators currently available in MongoDB. Here's a quick recap. The query language is very expressive and we have several types of operators to be used in our queries. We can express the queries that apply several different operators in a single field or even multiple fields in a single query and we are only bound by our imagination. I can assure you you will not be bored trying different operators every day. And that's all we got for you on query operators.