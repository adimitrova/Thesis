1
00:00:00,000 --> 00:00:01,680
Throughout the code of Mflix,

2
00:00:01,680 --> 00:00:05,175
we can find some queries being submitted to database.

3
00:00:05,175 --> 00:00:08,775
We have queries on movies where we express an filters.

4
00:00:08,775 --> 00:00:12,775
We have other queries directly matching a particular field like in

5
00:00:12,775 --> 00:00:18,140
the square object ID or even some other searching by its email address.

6
00:00:18,140 --> 00:00:22,530
Now some of these find operations that we've seen are very straightforward.

7
00:00:22,530 --> 00:00:28,220
We're filtering based on one single value for one single field. Which is great.

8
00:00:28,220 --> 00:00:32,780
However, MongoDB offers much more extensive sets of

9
00:00:32,780 --> 00:00:35,430
query operators that allows us to find documents using

10
00:00:35,430 --> 00:00:39,535
multiple operators and that's the purpose of this lesson today.

11
00:00:39,535 --> 00:00:44,100
Querying movies using some of these query operators that

12
00:00:44,100 --> 00:00:45,870
allows us to do a bunch of

13
00:00:45,870 --> 00:00:49,240
different things around our documents. Let's see some of this in action.

14
00:00:49,240 --> 00:00:55,735
Within the course handouts you'll see this movies query operators, Jupiter notebook.

15
00:00:55,735 --> 00:00:57,120
Let's go ahead and load it.

16
00:00:57,120 --> 00:00:59,810
And just do the typical steps.

17
00:00:59,810 --> 00:01:02,185
Let's import our needed modules.

18
00:01:02,185 --> 00:01:04,660
Our PyMongo and our Pprint.

19
00:01:04,660 --> 00:01:07,580
Let's make sure we can connect to our Atlas cluster.

20
00:01:07,580 --> 00:01:12,030
Again, it's the same cluster been using with the same username and password.

21
00:01:12,030 --> 00:01:15,010
Don't forget about that and don't forget where to get it.

22
00:01:15,010 --> 00:01:16,925
Go to your cluster, press the connect,

23
00:01:16,925 --> 00:01:22,465
look into your connect your application and copy the uri.

24
00:01:22,465 --> 00:01:26,490
Once you get it, paste it and replace the password placeholder.

25
00:01:26,490 --> 00:01:29,506
Now let's go ahead and run this and we have connection.

26
00:01:29,506 --> 00:01:31,595
No errors. All good.

27
00:01:31,595 --> 00:01:34,800
Now, since I was born in 1983,

28
00:01:34,800 --> 00:01:37,015
yes, I am that old,

29
00:01:37,015 --> 00:01:45,330
I want to know all movies launched after 1983 so that means every single movie where

30
00:01:45,330 --> 00:01:53,940
the year of launch is greater than equals 1983 and that's exactly what $gte stands for,

31
00:01:53,940 --> 00:01:57,540
greater than equals 1983.

32
00:01:57,540 --> 00:02:04,915
Once I run this I can see that the first pprint is the counts 32,584.

33
00:02:04,915 --> 00:02:08,790
A lot of different movies launched since I was born and I

34
00:02:08,790 --> 00:02:12,990
can guarantee you I did not see all of these. Which is fine.

35
00:02:12,990 --> 00:02:17,220
In the first few years of my existence I was quite a young child.

36
00:02:17,220 --> 00:02:19,755
I wouldn't be watching a lot of movies like this.

37
00:02:19,755 --> 00:02:24,540
Now let's say that I would like to reduce the scope of this amount of

38
00:02:24,540 --> 00:02:29,817
data for the ones that correspond to the period of my childhood,

39
00:02:29,817 --> 00:02:33,925
let's say from 1989 to 1999.

40
00:02:33,925 --> 00:02:36,955
And here we can use the operators greater than equals

41
00:02:36,955 --> 00:02:40,830
again for the year but also combine it with $lt.

42
00:02:40,830 --> 00:02:43,950
LT stands for lower than.

43
00:02:43,950 --> 00:02:49,430
In this case since I want to go from 1989 to 1999,

44
00:02:49,430 --> 00:02:56,105
I can also go to lower than 2000 being exclusive the year 2000 onwards.

45
00:02:56,105 --> 00:03:00,240
If I run this I can have a smaller amount of

46
00:03:00,240 --> 00:03:04,695
information or a smaller amount of movies launched in this period.

47
00:03:04,695 --> 00:03:10,470
But let's say that I'm also only interested on a specific set of

48
00:03:10,470 --> 00:03:13,530
different movies or in this particular case a

49
00:03:13,530 --> 00:03:17,455
different set of years in which movies were launched.

50
00:03:17,455 --> 00:03:20,900
I'm only interested right now in knowing which movies were

51
00:03:20,900 --> 00:03:26,900
launched in 1995 and 2005 or 2015.

52
00:03:26,900 --> 00:03:34,915
For that I can use the $in operator over the field year to find exactly that information.

53
00:03:34,915 --> 00:03:38,100
This will filter out only the movies which were

54
00:03:38,100 --> 00:03:41,575
launched on all of these three years combined.

55
00:03:41,575 --> 00:03:48,690
Once I run the query I can see that 3,980 movies were launched in those three years.

56
00:03:48,690 --> 00:03:51,240
A very prolific set of years.

57
00:03:51,240 --> 00:03:53,400
But we can do further than that.

58
00:03:53,400 --> 00:03:56,850
I'm going to keep the same initial predictor of saying

59
00:03:56,850 --> 00:04:01,050
that I want all movies which were released in 1995,

60
00:04:01,050 --> 00:04:06,380
2005 and 2015 and also exclude the genre,

61
00:04:06,380 --> 00:04:11,140
adult movies, to cope with some audience restrictions.

62
00:04:11,140 --> 00:04:14,780
Alright. If I do that and I can combine

63
00:04:14,780 --> 00:04:18,770
any sort of different fields with different query operators,

64
00:04:18,770 --> 00:04:22,698
I can have a very expressive query language

65
00:04:22,698 --> 00:04:27,180
that allows me to do a lot of different combinations to find my result set.

66
00:04:27,180 --> 00:04:32,310
MongoDB has many more types of operators from comparison to logical

67
00:04:32,310 --> 00:04:38,020
to elements and also some specific like geospatial or text operators.

68
00:04:38,020 --> 00:04:40,470
The query engine allows us to be very

69
00:04:40,470 --> 00:04:43,885
expressive in the types of queries we might want to execute in MongoDB.

70
00:04:43,885 --> 00:04:48,510
Please find in the lesson notes the links to

71
00:04:48,510 --> 00:04:53,945
access the full extent of all query operators currently available in MongoDB.

72
00:04:53,945 --> 00:04:57,600
Here's a quick recap. The query language is very expressive and we

73
00:04:57,600 --> 00:05:01,420
have several types of operators to be used in our queries.

74
00:05:01,420 --> 00:05:06,430
We can express the queries that apply several different operators in a single field or

75
00:05:06,430 --> 00:05:12,655
even multiple fields in a single query and we are only bound by our imagination.

76
00:05:12,655 --> 00:05:17,320
I can assure you you will not be bored trying different operators every day.

77
00:05:17,320 --> 00:05:20,550
And that's all we got for you on query operators.