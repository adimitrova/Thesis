1
00:00:00,270 --> 00:00:04,470
In this video I wanted to talk
about how when we make a comment

2
00:00:04,470 --> 00:00:08,150
in mflix like when I say what
a great movie the Titanic was.

3
00:00:08,150 --> 00:00:12,990
When I submit this comment and
the page reloads, I can go down and

4
00:00:12,990 --> 00:00:17,370
you'll notice that I'm also able to delete
the comment that I created for myself.

5
00:00:17,370 --> 00:00:20,860
In this lesson we're going to use
this feature of MFlix to explain

6
00:00:20,860 --> 00:00:23,700
how you can delete data in MongoDB.

7
00:00:23,700 --> 00:00:27,613
Specifically we're going to look at
how to delete data in MongoDB using

8
00:00:27,613 --> 00:00:30,260
the delete_one and delete_many commands.

9
00:00:30,260 --> 00:00:36,710
So here we are in the comments list,
the HTML template file here in Sublime.

10
00:00:36,710 --> 00:00:41,290
And, you'll notice right here,
I'll select these lines of text,

11
00:00:41,290 --> 00:00:47,020
that this is what allows us to
delete comments that are our own.

12
00:00:47,020 --> 00:00:50,360
So we check for
each comment that we're rendering here,

13
00:00:50,360 --> 00:00:55,420
we check if the current user's email
is equal to the comments email.

14
00:00:55,420 --> 00:00:58,890
And if so
then we produce this additional HTML,

15
00:00:58,890 --> 00:01:05,130
where we create a form that deletes this
movie content, this is the action URL.

16
00:01:05,130 --> 00:01:07,780
And there is of course
a little Delete button.

17
00:01:07,780 --> 00:01:10,980
So let's go ahead and go into MFlix
to look at delete movie comment.

18
00:01:12,180 --> 00:01:15,810
And as you can see this code
is pretty straight forward.

19
00:01:15,810 --> 00:01:19,840
Pretty much most of the heavy lifting is
done by delete comment from movie, so

20
00:01:19,840 --> 00:01:23,970
let's go ahead and now look in
that comment in the db.py file.

21
00:01:23,970 --> 00:01:25,500
And as you can see,
there's a lot going on here.

22
00:01:25,500 --> 00:01:29,020
And that's mostly to deal with
the fact that we're caching

23
00:01:29,020 --> 00:01:32,290
the last ten comments
on our movies document.

24
00:01:32,290 --> 00:01:35,639
So I really want us to just focus
on just this first line of code,

25
00:01:35,639 --> 00:01:37,040
on this use of delete one.

26
00:01:37,040 --> 00:01:37,930
And we're going to go ahead and

27
00:01:37,930 --> 00:01:40,540
look at our Python notebook to
look at how this method works.

28
00:01:40,540 --> 00:01:42,650
And the code that we were just looking at,

29
00:01:42,650 --> 00:01:45,670
the comment was deleted
by the comments ID.

30
00:01:45,670 --> 00:01:53,770
But we can actually use any kind of filter
that find supports to delete comments.

31
00:01:53,770 --> 00:01:56,280
So in this case here I made a filter
here that says what a great movie,

32
00:01:56,280 --> 00:01:58,755
which is the comment that
I just made on Titanic.

33
00:01:58,755 --> 00:02:01,770
I'm going to store this
inside the filter variable.

34
00:02:01,770 --> 00:02:06,310
And now I can go ahead and run this query,
and find this exact comment.

35
00:02:06,310 --> 00:02:09,000
And there you go, you can see
that here is the comment I made,

36
00:02:09,000 --> 00:02:13,120
What a great movie,
on this is the movie ID for Titanic.

37
00:02:13,120 --> 00:02:15,845
But we already know how to find documents.

38
00:02:15,845 --> 00:02:18,075
But I want to show that
using the exact same filter,

39
00:02:18,075 --> 00:02:20,375
we can actually also delete comments.

40
00:02:20,375 --> 00:02:21,635
And so, here's our delete result.

41
00:02:21,635 --> 00:02:24,717
And so now when when we run this
command we would expect it to no longer

42
00:02:24,717 --> 00:02:29,413
return this document because it was just
deleted, and that's exactly what we see.

43
00:02:29,413 --> 00:02:32,495
Moreover, if we go back to MFlix and

44
00:02:32,495 --> 00:02:37,445
refresh this page, we would expect this
comment to go away, but it doesn't.

45
00:02:37,445 --> 00:02:39,200
Why doesn't this comment go away?

46
00:02:39,200 --> 00:02:40,440
And that's because,

47
00:02:40,440 --> 00:02:44,770
this specific comment is actually
stored on this movie's document.

48
00:02:44,770 --> 00:02:48,372
We cache the comments on
the movie's document so

49
00:02:48,372 --> 00:02:51,560
that we don't have to make an additional
call to the comments collection,

50
00:02:51,560 --> 00:02:53,630
when they're just viewing this page.

51
00:02:53,630 --> 00:02:58,410
However, we can scroll to the bottom here,
and actually look at all 405 comments and

52
00:02:58,410 --> 00:03:02,690
actually just make a single call
to the comments collection.

53
00:03:02,690 --> 00:03:05,080
And in here, my comment doesn't exist.

54
00:03:05,080 --> 00:03:07,800
And that's because we
actually deleted my comment

55
00:03:07,800 --> 00:03:12,290
if you look back at the Python notebook
off of the comments collection.

56
00:03:12,290 --> 00:03:14,470
And that's how the delete one works.

57
00:03:14,470 --> 00:03:17,680
But now what if we want to delete
more than one document at a time.

58
00:03:17,680 --> 00:03:21,370
Well that's exactly what
the delete many method is for.

59
00:03:21,370 --> 00:03:25,130
Here, I create a variable that
has the Titanic's object ID and

60
00:03:25,130 --> 00:03:26,470
then I go ahead and
put that into a filter.

61
00:03:26,470 --> 00:03:33,550
And so this should delete all comments
in the comments collection for Titanic.

62
00:03:33,550 --> 00:03:38,390
So there should no longer be any Titanic's
comments after I execute this cell.

63
00:03:38,390 --> 00:03:40,488
So now, when I refresh this page here,

64
00:03:40,488 --> 00:03:44,250
we're looking at all comments,
we would expect them to all go away.

65
00:03:44,250 --> 00:03:46,550
And they're all gone,
I can no longer scroll on this page.

66
00:03:46,550 --> 00:03:47,970
There's no more comments.

67
00:03:47,970 --> 00:03:51,350
But you'll notice that it still
says we have 405 comments, and

68
00:03:51,350 --> 00:03:56,380
that's because this number is actually
stored on the movie's document.

69
00:03:56,380 --> 00:04:02,530
So, let's go ahead and go back to
this view of our ten cache comments.

70
00:04:02,530 --> 00:04:06,350
And let's go ahead and
remove these 10 cached comments, and

71
00:04:06,350 --> 00:04:12,650
let's also go ahead and update that number
so that we don't see all 405 anymore.

72
00:04:12,650 --> 00:04:14,350
So here, I can go ahead and do that.

73
00:04:14,350 --> 00:04:16,880
Here I go ahead and
create a movies variable,

74
00:04:16,880 --> 00:04:19,140
which acts as the movie's database.

75
00:04:19,140 --> 00:04:24,111
And here I'm using the $set operator
to turn comments into an empty array,

76
00:04:24,111 --> 00:04:29,510
and reset our number of MFlix comments
to 0 with the update one command.

77
00:04:29,510 --> 00:04:32,410
And now when I run this,
it looks like it worked.

78
00:04:32,410 --> 00:04:35,190
But let's verify by going to MFlix.

79
00:04:35,190 --> 00:04:39,810
All of our comments are still here, but
when we refresh the page you can now see

80
00:04:39,810 --> 00:04:42,561
that there are no more comments,
which is exactly what we would expect.

81
00:04:43,630 --> 00:04:45,670
So let's recap what we
learned in this lesson.

82
00:04:45,670 --> 00:04:49,020
We learned that there are two methods for
deleting documents in MongoDB.

83
00:04:49,020 --> 00:04:52,159
They both act very similar to find one and
find, but

84
00:04:52,159 --> 00:04:55,240
they're called delete_one and delete_many.

85
00:04:55,240 --> 00:04:57,540
They accept a filter expression
just like find would,

86
00:04:57,540 --> 00:05:00,270
but instead of returning documents,
they actually end up deleting them.