1
00:00:00,000 --> 00:00:04,860
In the same way that we can do data cleaning in the aggregation framework,

2
00:00:04,860 --> 00:00:10,880
we can perform those same operations using the MongoDB query language.

3
00:00:10,880 --> 00:00:14,100
Basically, the choice at this point in the development of

4
00:00:14,100 --> 00:00:18,870
MongoBD is whether you want to work in a declarative framework,

5
00:00:18,870 --> 00:00:21,350
like the aggregation framework,

6
00:00:21,350 --> 00:00:24,960
where you simply specify what it is you'd like documents to look like,

7
00:00:24,960 --> 00:00:28,125
or whether you prefer to script

8
00:00:28,125 --> 00:00:31,290
your cleaning operations as you're probably accustomed

9
00:00:31,290 --> 00:00:34,785
to doing in Python or another programming language.

10
00:00:34,785 --> 00:00:36,489
Either works.

11
00:00:36,489 --> 00:00:40,575
My intention here is to give you exposure to doing either of those,

12
00:00:40,575 --> 00:00:43,500
so that whichever best suits your style,

13
00:00:43,500 --> 00:00:46,515
your needs or maybe even just your interests,

14
00:00:46,515 --> 00:00:49,550
you have what you need in order to get started.

15
00:00:49,550 --> 00:00:52,260
For those of you who are keen to be up to speed on

16
00:00:52,260 --> 00:00:55,500
a variety of different options and would like to learn the aggregation framework,

17
00:00:55,500 --> 00:00:58,350
I strongly encourage you to dive in

18
00:00:58,350 --> 00:01:02,180
there and wring all the value you can out of the aggregation framework.

19
00:01:02,180 --> 00:01:03,750
The agg framework is one of

20
00:01:03,750 --> 00:01:08,400
the most aggressively developed components of MongoDB because of

21
00:01:08,400 --> 00:01:14,534
its widespread use and utility for MongoDB's developer and data science communities.

22
00:01:14,534 --> 00:01:17,645
So we've taken a look at that.

23
00:01:17,645 --> 00:01:25,100
Let's look at using the MongoDB query language to do the same type of thing.

24
00:01:25,100 --> 00:01:27,190
So, here I have a script.

25
00:01:27,190 --> 00:01:28,990
I'm importing PyMongo and

26
00:01:28,990 --> 00:01:33,850
the MongoClient class and a few other utilities that I'm going to need,

27
00:01:33,850 --> 00:01:38,980
such as datetime and the regular expression library.

28
00:01:38,980 --> 00:01:42,540
The bulk of this script happens within this four loop.

29
00:01:42,540 --> 00:01:45,580
And the idea here is that one at a time,

30
00:01:45,580 --> 00:01:48,400
I'm defining updates for

31
00:01:48,400 --> 00:01:52,900
an individual document and then writing those updates to the database.

32
00:01:52,900 --> 00:01:57,875
We're going to do this through the use of the update_one method.

33
00:01:57,875 --> 00:01:59,500
This is a collection level method,

34
00:01:59,500 --> 00:02:02,635
and we'll be calling it on the movies collection.

35
00:02:02,635 --> 00:02:05,290
Now, for this particular script,

36
00:02:05,290 --> 00:02:09,295
so that I don't write any data in my movies_initial collection,

37
00:02:09,295 --> 00:02:12,875
I've actually loaded the same data into a different collection,

38
00:02:12,875 --> 00:02:14,710
because what we're going to be doing here is making

39
00:02:14,710 --> 00:02:16,780
a number of writes to the same collection rather

40
00:02:16,780 --> 00:02:21,515
than copying our updates to another collection.

41
00:02:21,515 --> 00:02:23,525
We're going to be making use of update_one.

42
00:02:23,525 --> 00:02:27,465
For update_one, we'll be passing two parameters.

43
00:02:27,465 --> 00:02:32,800
This is the most common way of using one of the update methods in MongoDB.

44
00:02:32,800 --> 00:02:35,440
There is a similar method called update_many that

45
00:02:35,440 --> 00:02:38,330
allows you to update multiple documents at once.

46
00:02:38,330 --> 00:02:41,425
But in our case, we need to update one at a time.

47
00:02:41,425 --> 00:02:44,980
A little bit later on, we'll look at a way of updating a bunch of

48
00:02:44,980 --> 00:02:50,930
individual documents in batch so that we have a substantially more efficient operation.

49
00:02:50,930 --> 00:02:52,805
But for introductory purposes,

50
00:02:52,805 --> 00:02:56,900
I think it makes sense to begin with updating one document at a time.

51
00:02:56,900 --> 00:03:00,335
So, the first argument to update_one is

52
00:03:00,335 --> 00:03:04,535
a filter that selects the document we wish to update.

53
00:03:04,535 --> 00:03:11,005
The _ID field contains a unique identifier for an individual movie in this collection.

54
00:03:11,005 --> 00:03:12,680
Here, this filter says,

55
00:03:12,680 --> 00:03:17,075
I'm interested in updating the document with the _ID value

56
00:03:17,075 --> 00:03:22,145
equal to the _ID of the document I'm currently processing in this for loop.

57
00:03:22,145 --> 00:03:25,805
And then, this variable here, update_doc,

58
00:03:25,805 --> 00:03:33,500
is a reference to a dictionary or document that defines the updates that I want to make.

59
00:03:33,500 --> 00:03:36,680
So what I'd like to do first is run this script,

60
00:03:36,680 --> 00:03:39,755
and because of this statement here,

61
00:03:39,755 --> 00:03:42,635
we'll be able to see exactly what

62
00:03:42,635 --> 00:03:48,215
updates we will make to documents in this collection once they're issued.

63
00:03:48,215 --> 00:03:51,095
What I mean by that is that,

64
00:03:51,095 --> 00:03:54,050
this will print out the value of

65
00:03:54,050 --> 00:03:59,915
the update_doc variable that will be passing to update_one each time through this loop.

66
00:03:59,915 --> 00:04:02,330
Now to run this, what I'm going to do is

67
00:04:02,330 --> 00:04:05,775
comment out the call because I don't actually want to make the update,

68
00:04:05,775 --> 00:04:07,620
I just want to see what would happen.

69
00:04:07,620 --> 00:04:09,485
And once we've taken a look at the output,

70
00:04:09,485 --> 00:04:12,720
then we'll go back and talk about how the script works, okay?

71
00:04:12,720 --> 00:04:15,620
So running this, let's take a look at

72
00:04:15,620 --> 00:04:20,835
the very first document output by this statement, okay?

73
00:04:20,835 --> 00:04:24,590
Remember, what I said is that we're building up an update document,

74
00:04:24,590 --> 00:04:26,630
a document that defines the updates we want to make to

75
00:04:26,630 --> 00:04:29,240
an individual document each time through the loop,

76
00:04:29,240 --> 00:04:34,765
and then calling update_one to write those updates to the collection

77
00:04:34,765 --> 00:04:43,140
changing the document identified by this _ID value each time through the loop.

78
00:04:43,140 --> 00:04:47,930
All of these update documents will be composed of two keys,

79
00:04:47,930 --> 00:04:50,710
a $set key and a $unset key.

80
00:04:50,710 --> 00:04:54,227
In the MongoDB query language, for update operations,

81
00:04:54,227 --> 00:05:00,900
$set has the semantics of specifying a field that you either

82
00:05:00,900 --> 00:05:03,375
want to add to the document in question

83
00:05:03,375 --> 00:05:08,190
or a field that you want to update with a new value.

84
00:05:08,190 --> 00:05:09,720
In the case of the first document,

85
00:05:09,720 --> 00:05:11,800
you can see the kinds of updates that we're making.

86
00:05:11,800 --> 00:05:13,695
These should look very familiar to you

87
00:05:13,695 --> 00:05:16,530
because they are the same types of updates that we were

88
00:05:16,530 --> 00:05:23,030
making using the aggregation framework in our project stage.

89
00:05:23,030 --> 00:05:24,760
I'm writing arrays for cast,

90
00:05:24,760 --> 00:05:29,380
countries and directors, as well as genres and two other fields.

91
00:05:29,380 --> 00:05:31,510
I'm changing the field name from fullplot

92
00:05:31,510 --> 00:05:33,700
with a lowercase P to fullPlot with an upper case

93
00:05:33,700 --> 00:05:40,880
P. I'm creating an imdb key with an embedded document and so on.

94
00:05:40,880 --> 00:05:43,905
Something new that I'm doing here is,

95
00:05:43,905 --> 00:05:46,892
I'm eliminating a number of different fields,

96
00:05:46,892 --> 00:05:48,665
I'm deleting a bunch of different fields.

97
00:05:48,665 --> 00:05:51,305
So there's two reasons why I delete fields

98
00:05:51,305 --> 00:05:55,100
in each of these updates that I'll be committing to the database.

99
00:05:55,100 --> 00:05:56,345
The first reason is,

100
00:05:56,345 --> 00:05:59,075
I'm getting rid of fields that use the singular form of the key,

101
00:05:59,075 --> 00:06:05,885
so I am writing a countries field here and deleting that old country key,

102
00:06:05,885 --> 00:06:09,590
and doing the same for the other four fields that required that type of

103
00:06:09,590 --> 00:06:13,505
change after I split their string values into arrays.

104
00:06:13,505 --> 00:06:19,700
These three values are being embedded in this document.

105
00:06:19,700 --> 00:06:23,420
And finally, the way this script works is I've defined it to

106
00:06:23,420 --> 00:06:28,800
delete all keys for which the value is simply the empty string.

107
00:06:28,800 --> 00:06:34,355
So rather than have a bunch of empty string values in the documents in my collection,

108
00:06:34,355 --> 00:06:36,615
I'm simply deleting those keys altogether.

109
00:06:36,615 --> 00:06:39,220
Remember that MongoDB has a flexible document model.

110
00:06:39,220 --> 00:06:45,407
It's okay to have documents that have a different shape in the same collection,

111
00:06:45,407 --> 00:06:47,450
it makes things a little bit more efficient for us,

112
00:06:47,450 --> 00:06:50,239
and through the use of the dollar exists operator,

113
00:06:50,239 --> 00:06:53,465
it's easy for us to identify documents that

114
00:06:53,465 --> 00:06:58,400
either contain or do not contain a particular key.

115
00:06:58,400 --> 00:07:00,666
So, all of my update documents,

116
00:07:00,666 --> 00:07:02,900
that is the values that I'll be passing here as

117
00:07:02,900 --> 00:07:07,200
the second argument to update_one, have this form,

118
00:07:07,200 --> 00:07:13,640
a $set field with a specific key and value that I am

119
00:07:13,640 --> 00:07:21,080
assigning and a $unset field with a list of fields to delete from the document.

120
00:07:21,080 --> 00:07:24,000
Now let's talk about how this script works.