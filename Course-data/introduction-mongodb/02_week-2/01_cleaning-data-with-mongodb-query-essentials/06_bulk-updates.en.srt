1
00:00:00,000 --> 00:00:04,630
Okay. So, let's talk about how to do this type of update the right way.

2
00:00:04,630 --> 00:00:06,585
What we're going to look at here is something called,

3
00:00:06,585 --> 00:00:08,770
Bulk Rights in MongoDB.

4
00:00:08,770 --> 00:00:11,340
This is essentially a way of performing a number of

5
00:00:11,340 --> 00:00:15,120
update operations with a single request to the database.

6
00:00:15,120 --> 00:00:18,135
So, rather than update each document one at a time,

7
00:00:18,135 --> 00:00:22,020
we're going to batched together updates for in this case,

8
00:00:22,020 --> 00:00:25,020
a thousand documents at a time and then make a single request to

9
00:00:25,020 --> 00:00:29,080
the database for all thousand updates at once.

10
00:00:29,080 --> 00:00:32,640
So, the update code that we see here is exactly the same as

11
00:00:32,640 --> 00:00:37,120
what we looked at in our lesson on the use of Update One.

12
00:00:37,120 --> 00:00:39,735
The only difference is that as I said,

13
00:00:39,735 --> 00:00:42,525
instead of calling Update One,

14
00:00:42,525 --> 00:00:45,420
we are instead going to use

15
00:00:45,420 --> 00:00:51,415
this Update One class which I've imported from the Pymongo library here.

16
00:00:51,415 --> 00:00:54,300
We're going to use Update One which is

17
00:00:54,300 --> 00:01:02,177
an operation class to create and update one operation object here,

18
00:01:02,177 --> 00:01:07,610
and add it to a list of updates that we're keeping track of.

19
00:01:07,610 --> 00:01:09,955
Then, each time through the loop,

20
00:01:09,955 --> 00:01:14,590
we're simply checking how many updates we have accumulated to this point,

21
00:01:14,590 --> 00:01:17,415
how many update objects we've accumulated,

22
00:01:17,415 --> 00:01:22,130
and once we've hit our batch size limit which as we saw above is 1000,

23
00:01:22,130 --> 00:01:29,865
then I make a call to the bulk write method passing it this list of updates.

24
00:01:29,865 --> 00:01:34,051
Take a look in the handouts for this lesson to study this code in detail,

25
00:01:34,051 --> 00:01:35,610
if you have any questions.

26
00:01:35,610 --> 00:01:42,665
But the upshot is that we are creating 1000 Update One operation objects,

27
00:01:42,665 --> 00:01:48,485
passing that list of Update One objects to the bulk write method.

28
00:01:48,485 --> 00:01:53,270
Bulk right will construct the necessary request to the MongoDB to

29
00:01:53,270 --> 00:01:59,420
the server and the server then will receive that entire list of updates.

30
00:01:59,420 --> 00:02:02,675
It will then apply the updates one at a time.

31
00:02:02,675 --> 00:02:04,305
Again, the update code,

32
00:02:04,305 --> 00:02:06,720
the way we're selecting what document to

33
00:02:06,720 --> 00:02:10,470
update and the specific updates to apply for each document are

34
00:02:10,470 --> 00:02:17,125
exactly the same as we looked at in detail in our lesson on the use of Update One.

35
00:02:17,125 --> 00:02:20,830
Here, we're doing exactly those same updates

36
00:02:20,830 --> 00:02:23,470
but doing it in a much more efficient manner.

37
00:02:23,470 --> 00:02:27,510
Outside this loop, we have one statement here and that's merely to

38
00:02:27,510 --> 00:02:31,230
catch the final list of updates that need to be

39
00:02:31,230 --> 00:02:35,610
applied because it's entirely possible and in fact probable that we will

40
00:02:35,610 --> 00:02:41,325
finish this loop with some number less than 1000 updates that need to be applied.

41
00:02:41,325 --> 00:02:44,145
In order to catch all of those, whatever remains,

42
00:02:44,145 --> 00:02:47,335
we call Bulk Right here,

43
00:02:47,335 --> 00:02:52,185
if in fact our list does contain any updates to be applied.

44
00:02:52,185 --> 00:02:56,759
Okay. So, let's actually test this code and in order to do that,

45
00:02:56,759 --> 00:02:59,545
what I'm going to do is first,

46
00:02:59,545 --> 00:03:04,000
create a brand new collection in my database that is

47
00:03:04,000 --> 00:03:08,745
the original movie's dataset that we began working with in this course.

48
00:03:08,745 --> 00:03:12,750
So, when I make this call to Mongo Import this will load

49
00:03:12,750 --> 00:03:16,440
that initial movies dataset into a new collection called,

50
00:03:16,440 --> 00:03:18,565
Movies in my database.

51
00:03:18,565 --> 00:03:21,030
Now, I'm doing this just so I don't

52
00:03:21,030 --> 00:03:25,585
mistakenly update the movies underscore initial collection.

53
00:03:25,585 --> 00:03:27,420
So, I'm going to try and execute this,

54
00:03:27,420 --> 00:03:29,205
and once it finishes,

55
00:03:29,205 --> 00:03:34,585
then I can go into compass and I can take a look at that data set.

56
00:03:34,585 --> 00:03:36,980
And here, we can see that it is in fact has

57
00:03:36,980 --> 00:03:40,455
the same shape and this data should look very familiar to you.

58
00:03:40,455 --> 00:03:48,850
Now, let's go ahead and execute this bulk update code and once that finishes,

59
00:03:48,850 --> 00:03:52,495
then if I look again at my movies collection,

60
00:03:52,495 --> 00:03:54,715
once the script is finished running,

61
00:03:54,715 --> 00:03:58,945
I can see that the data set now contains arrays for

62
00:03:58,945 --> 00:04:03,910
all of the fields that I've split from strings into arrays.

63
00:04:03,910 --> 00:04:09,835
I have an IMDB embedded document and as we scan through,

64
00:04:09,835 --> 00:04:13,390
we can see that there are no empty fields or

65
00:04:13,390 --> 00:04:16,870
fields that have as their value the empty string and finally,

66
00:04:16,870 --> 00:04:21,380
for runtime for each document I have an integer.

67
00:04:21,380 --> 00:04:24,940
So, that gives us a pretty good overview of how to go about

68
00:04:24,940 --> 00:04:28,710
doing data cleaning in a collection in MongoDB.

69
00:04:28,710 --> 00:04:32,875
We've looked at several different approaches and in the process given you

70
00:04:32,875 --> 00:04:35,560
a pretty detailed overview of some of

71
00:04:35,560 --> 00:04:38,800
the key aspects of the MongoDB aggregation framework,

72
00:04:38,800 --> 00:04:42,370
as well as the MongoDB query language and use of

73
00:04:42,370 --> 00:04:46,460
the Pymongo driver in the Python programming.