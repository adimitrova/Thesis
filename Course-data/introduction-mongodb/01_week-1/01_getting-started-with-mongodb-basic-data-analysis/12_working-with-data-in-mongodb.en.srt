1
00:00:00,420 --> 00:00:04,390
There are a number of ways we
can work with data in MongoDB.

2
00:00:04,390 --> 00:00:08,210
As we've just seen,
one way is through Compass.

3
00:00:08,210 --> 00:00:12,660
In addition to simply viewing
a collection, we can also filter and

4
00:00:12,660 --> 00:00:14,680
perform a number of other operations.

5
00:00:15,680 --> 00:00:17,770
Here, our filter for the movie,

6
00:00:17,770 --> 00:00:23,980
The Big Short Note that just two documents
from this collection match this filter.

7
00:00:23,980 --> 00:00:27,020
In fact, this is actually evidence
of some dirty data because

8
00:00:27,020 --> 00:00:29,010
one of these is a duplicate.

9
00:00:29,010 --> 00:00:30,420
So we can delete the dupe.

10
00:00:30,420 --> 00:00:35,090
We can also update an individual
document by editing its fields.

11
00:00:35,090 --> 00:00:37,584
Here, I'll update this
doc with the runtime.

12
00:00:40,362 --> 00:00:45,220
From a google search,
I happen to know that it's 130 minutes.

13
00:00:45,220 --> 00:00:49,720
So compass provides a convenient means
of exploring data and it's visual.

14
00:00:49,720 --> 00:00:53,710
So that helps immensely in investigating
many types of questions you might have

15
00:00:53,710 --> 00:00:55,170
about a data set.

16
00:00:55,170 --> 00:00:57,610
Especially as you first
begin to work with it.

17
00:00:57,610 --> 00:01:01,640
But the bulk of the work will be in
manipulating and analyzing data.

18
00:01:01,640 --> 00:01:06,839
For that, we want to use a combination
of the Mongodb aggregation framework and

19
00:01:06,839 --> 00:01:08,012
query language.

20
00:01:08,012 --> 00:01:11,990
In this chapter, I'll provide you with
an introduction to both, as we work to

21
00:01:11,990 --> 00:01:16,152
reshape and clean up the movies data set,
and integrate it with other data sources

22
00:01:16,152 --> 00:01:19,978
that will set us up to build an
application and analytics infrastructure.

23
00:01:19,978 --> 00:01:24,855
We'll do all of this from Python,
using the MongoDB driver, PyMongo.

24
00:01:24,855 --> 00:01:29,245
The same principles would apply
across Java, Node, C Sharp, R or

25
00:01:29,245 --> 00:01:32,045
any of the other programming
languages MongoDB supports.

26
00:01:33,540 --> 00:01:36,600
First however, it's valuable to discuss
how all the pieces work together.

27
00:01:37,770 --> 00:01:40,730
And I wouldn't be doing my job as an
instructor if I didn't throw at least one

28
00:01:40,730 --> 00:01:42,830
architectural diagram your way.

29
00:01:42,830 --> 00:01:47,305
As you know, your MongoDB free
tier cluster is running in Atlas.

30
00:01:47,305 --> 00:01:51,585
Atlas is a convenient platform for running
MongoDB which is why we're using it for

31
00:01:51,585 --> 00:01:52,765
this class.

32
00:01:52,765 --> 00:01:56,855
You could just as easily run MongoDB from
your local computer but Atlas requires

33
00:01:56,855 --> 00:02:00,715
very little set up on your part and
all the administration is managed for you.

34
00:02:01,745 --> 00:02:04,545
Depending on where you are in the world,
your cluster is probably running on

35
00:02:04,545 --> 00:02:08,675
servers physically located in
an Amazon AWS data center.

36
00:02:08,675 --> 00:02:10,727
This means its in the cloud.

37
00:02:10,727 --> 00:02:14,162
I've drawn your MongoDB cluster as three
servers because that's what it is.

38
00:02:14,162 --> 00:02:18,263
It's a replica set, meaning that three
servers are working together to remain in

39
00:02:18,263 --> 00:02:21,770
sync, each maintaining
a redundant copy of your data.

40
00:02:21,770 --> 00:02:25,660
One member of your replica set is always
primary, meaning that it's the one that

41
00:02:25,660 --> 00:02:31,010
you were communicating with when writing
data, and usually when reading data.

42
00:02:31,010 --> 00:02:34,730
If the primary stops functioning or
loses it's internet connection,

43
00:02:34,730 --> 00:02:37,280
another member of the replica set
will step in to serve as primary.

44
00:02:38,590 --> 00:02:40,960
Since it holds a complete
copy of your data,

45
00:02:40,960 --> 00:02:44,310
you probably won't even
notice if this happens.

46
00:02:44,310 --> 00:02:48,300
By default, both Compass and PyMongo
are designed to direct the request to

47
00:02:48,300 --> 00:02:54,100
whichever node in a replica set is
primary, even if the primary changes.

48
00:02:54,100 --> 00:02:56,200
For a course like this,
it's less important but

49
00:02:56,200 --> 00:02:59,080
in production environments this type
of high availability is essential.

50
00:03:00,690 --> 00:03:04,890
The free tier option in Atlas supports
this because a three member replica set is

51
00:03:04,890 --> 00:03:07,850
the default minimum deployment for
all clusters in this platform.

52
00:03:08,950 --> 00:03:13,230
Now, you downloaded Compass to your local
computer, so it's running there and

53
00:03:13,230 --> 00:03:15,560
connecting to your Atlas cluster
through an internet connection.

54
00:03:16,670 --> 00:03:18,360
We will also be developing scripts and

55
00:03:18,360 --> 00:03:23,540
applications written in Python that
will use your free tier cluster.

56
00:03:23,540 --> 00:03:29,060
In order to connect to MongoDB and
make use of the aggregation framework and

57
00:03:29,060 --> 00:03:32,940
the MongoDB query language,
we need to use PyMongo.

58
00:03:34,170 --> 00:03:37,150
PyMongo is available in PyPi.

59
00:03:37,150 --> 00:03:40,890
And, you can install it using Pip or
easy install.

60
00:03:40,890 --> 00:03:44,660
PyMongo is just a Python, library like
many of the other you are constantly

61
00:03:44,660 --> 00:03:47,940
using, such as namPy, Sci fi, or pandas.

62
00:03:49,260 --> 00:03:54,460
We'll also be making extensive use of
python Jupiter notebooks in this class,

63
00:03:54,460 --> 00:03:57,510
to enable you to work through
exercises right in your web browser.

64
00:03:58,710 --> 00:04:01,770
This will also make use of PyMongo.

65
00:04:01,770 --> 00:04:04,800
But that will all be handled behind
the scenes in the Coursera platform.

66
00:04:05,880 --> 00:04:09,340
And that about wraps it up for
the big moving parts of the scripts and

67
00:04:09,340 --> 00:04:11,580
applications we'll be using in this class.