1
00:00:00,000 --> 00:00:04,335
For many coding examples and exercises in this class,

2
00:00:04,335 --> 00:00:07,245
we're going to make use of Jupyter Notebooks.

3
00:00:07,245 --> 00:00:09,720
These provide a convenient means of developing and

4
00:00:09,720 --> 00:00:13,400
running Python scripts without the need to leave the browser.

5
00:00:13,400 --> 00:00:17,215
To connect to your free tier cluster from a Python application,

6
00:00:17,215 --> 00:00:20,735
we'll use the Python MongoDB driver, PyMongo.

7
00:00:20,735 --> 00:00:23,445
Drivers are simply client libraries.

8
00:00:23,445 --> 00:00:25,690
In this case, a Python module that provides

9
00:00:25,690 --> 00:00:28,900
an API for connecting to and querying MongoDB.

10
00:00:28,900 --> 00:00:32,770
We'll go into quite a bit of detail about using PyMongo to connect to MongoDB

11
00:00:32,770 --> 00:00:37,340
and using MongoDB's rich query language and built-in analytics tools.

12
00:00:37,340 --> 00:00:40,117
We'll cover everything you need to complete this course,

13
00:00:40,117 --> 00:00:41,655
but if you'd like to dig deeper,

14
00:00:41,655 --> 00:00:45,760
I encourage you to take a look at the PyMongo documentation.

15
00:00:45,760 --> 00:00:49,020
See the link in the lecture notes for this lesson.

16
00:00:49,020 --> 00:00:52,320
To connect to our free tier cluster, first,

17
00:00:52,320 --> 00:00:57,720
we'll need to import the MongoClient class from PyMongo.

18
00:00:57,720 --> 00:01:01,335
This class enables us to establish a client connection to MongoDB.

19
00:01:01,335 --> 00:01:05,790
Next, I need to actually connect to my free tier cluster.

20
00:01:05,790 --> 00:01:09,940
We do that by instantiating a MongoClient object.

21
00:01:09,940 --> 00:01:11,550
This is almost right, except,

22
00:01:11,550 --> 00:01:15,040
I need to specify what MongoDB server I want to connect to.

23
00:01:15,040 --> 00:01:17,550
To do this, I need to go back into Atlas and

24
00:01:17,550 --> 00:01:20,850
copy the connection string for my free tier cluster.

25
00:01:20,850 --> 00:01:24,260
You'll need to do the same for your own cluster.

26
00:01:24,260 --> 00:01:29,545
Once again, I copy the URI connection string for connecting my application.

27
00:01:29,545 --> 00:01:32,665
As you know, this connection string contains

28
00:01:32,665 --> 00:01:36,715
the seed list identifying all the servers in my free tier cluster.

29
00:01:36,715 --> 00:01:40,210
PyMongo will keep track of which of the servers in my cluster is

30
00:01:40,210 --> 00:01:44,515
the primary and direct reads and writes to that server by default.

31
00:01:44,515 --> 00:01:46,780
If it loses contact with the primary,

32
00:01:46,780 --> 00:01:49,750
it will communicate with the other servers in the cluster in

33
00:01:49,750 --> 00:01:53,815
an attempt to determine if one of them has stepped up to be primary.

34
00:01:53,815 --> 00:01:57,820
In this way, automatic failover happens to enable us to

35
00:01:57,820 --> 00:02:00,010
continue accessing our data even if we lose

36
00:02:00,010 --> 00:02:03,460
access to one or more of the servers in our cluster.

37
00:02:03,460 --> 00:02:07,700
Note that there are two placeholder values in this connection string.

38
00:02:07,700 --> 00:02:11,530
These are the password and database components of the string.

39
00:02:11,530 --> 00:02:17,020
Note that the username appears immediately after MongoDB://.

40
00:02:17,020 --> 00:02:20,115
Note also that the username is followed by a colon.

41
00:02:20,115 --> 00:02:21,990
The username is analytics.

42
00:02:21,990 --> 00:02:25,970
This is the administrative username I supplied when creating this cluster.

43
00:02:25,970 --> 00:02:33,025
Remember that the password is simply analytics-password.

44
00:02:33,025 --> 00:02:39,018
While the specific seed list for my cluster is different from the one for yours,

45
00:02:39,018 --> 00:02:43,090
in order to connect a Python application to your free tier cluster,

46
00:02:43,090 --> 00:02:46,290
you'll need to follow a similar process to what I'm doing here.

47
00:02:46,290 --> 00:02:50,080
The other placeholder in this connection string is database.

48
00:02:50,080 --> 00:02:54,400
I'm just going to replace database with mflix since that's the name of

49
00:02:54,400 --> 00:03:00,590
the database into which we loaded the movies_initial collection.

50
00:03:00,590 --> 00:03:02,095
Okay, with that done,

51
00:03:02,095 --> 00:03:08,155
let's run this to test whether or not we've been successful.

52
00:03:08,155 --> 00:03:10,270
You can see that no errors were raised,

53
00:03:10,270 --> 00:03:13,275
and that based on the output of the call to print,

54
00:03:13,275 --> 00:03:17,020
we have a valid MongoDB client instance.

55
00:03:17,020 --> 00:03:21,000
Let's dive in now and start working with some data.