1
00:00:00,000 --> 00:00:04,825
In this lesson, we're going to discuss the power of MongoDB's geospatial query engine.

2
00:00:04,825 --> 00:00:07,140
Specifically, we're going to look at how we can find

3
00:00:07,140 --> 00:00:09,795
geospatial documents within a circle on the earth.

4
00:00:09,795 --> 00:00:13,680
We're also going to look at how we can find geospatial documents near a point.

5
00:00:13,680 --> 00:00:15,950
And finally, we're going to look at how to use

6
00:00:15,950 --> 00:00:20,235
2dsphere indexes and how they relate to geospatial queries.

7
00:00:20,235 --> 00:00:24,335
There are times that we have data that contains geospatial information.

8
00:00:24,335 --> 00:00:26,715
In the case of mflix, we have a special data set called

9
00:00:26,715 --> 00:00:30,045
theaters which is a data set of different theater locations.

10
00:00:30,045 --> 00:00:34,425
We can go ahead and look at one example of theater document which looks just like this.

11
00:00:34,425 --> 00:00:37,860
As you can see, we have two fields, one being theater_Id,

12
00:00:37,860 --> 00:00:40,830
the second being location which is an embedded document where

13
00:00:40,830 --> 00:00:43,790
we have address which is a human readable version of the address,

14
00:00:43,790 --> 00:00:46,930
and then geo which is a geospatial point.

15
00:00:46,930 --> 00:00:51,840
It's handy to structure location this way because the address is easily human

16
00:00:51,840 --> 00:00:57,660
readable whereas the geospatial query can be queried by MongoDB in some very useful ways.

17
00:00:57,660 --> 00:01:01,245
If we further draw a line to the geo embedded document,

18
00:01:01,245 --> 00:01:04,560
you can see that it is formatted in this specific way,

19
00:01:04,560 --> 00:01:08,725
where we say type points coordinates and then array of coordinates.

20
00:01:08,725 --> 00:01:13,530
This is actually a part of a geospatial standard called GeoJSON.

21
00:01:13,530 --> 00:01:17,610
When we use GeoJSON to define a location like this,

22
00:01:17,610 --> 00:01:21,780
we can then query for this document using some really powerful query operators.

23
00:01:21,780 --> 00:01:26,115
Here's a list of all of the different geospatial query operators.

24
00:01:26,115 --> 00:01:27,960
In this lesson, we're going to talk about two of the most

25
00:01:27,960 --> 00:01:31,160
common, geoWithin and nearSphere.

26
00:01:31,160 --> 00:01:35,010
Let's go ahead and jump into compass so we can easily see these geospatial points.

27
00:01:35,010 --> 00:01:37,140
If we go ahead and click the schema tab,

28
00:01:37,140 --> 00:01:38,730
we can click analyze,

29
00:01:38,730 --> 00:01:40,770
and after a bit of analyzation,

30
00:01:40,770 --> 00:01:43,755
we can then scroll down to location and open it up.

31
00:01:43,755 --> 00:01:48,184
And you'll see, since we've formatted our points as a GeoJSON point,

32
00:01:48,184 --> 00:01:52,145
we had this really nice little map of all the points on a map.

33
00:01:52,145 --> 00:01:53,660
Now, here's the best part.

34
00:01:53,660 --> 00:01:55,295
We can actually zoom in here,

35
00:01:55,295 --> 00:01:58,950
and by holding shift and clicking and dragging,

36
00:01:58,950 --> 00:02:02,095
we can actually select a subset or points.

37
00:02:02,095 --> 00:02:06,640
This is an excellent way to visualize and play with geo data stored in MongoDB.

38
00:02:06,640 --> 00:02:10,115
And the best part is we automatically create a query up here in the filter bar.

39
00:02:10,115 --> 00:02:15,050
And as you can see, this query uses the special geoWithin query operator.

40
00:02:15,050 --> 00:02:16,635
And as you can probably infer,

41
00:02:16,635 --> 00:02:20,785
this query returns all of the points within the circle.

42
00:02:20,785 --> 00:02:24,225
But let's go in and break down this query a little bit further.

43
00:02:24,225 --> 00:02:26,055
Of course, we're going to say which field we're talking about,

44
00:02:26,055 --> 00:02:28,710
which in this case is location.geo because we're

45
00:02:28,710 --> 00:02:31,850
using dot notation to query on an embedded field.

46
00:02:31,850 --> 00:02:34,830
From here, we can go ahead and use the geoWithin operator.

47
00:02:34,830 --> 00:02:37,440
And now since we're talking about locations on our map,

48
00:02:37,440 --> 00:02:39,450
we're really talking about points on a sphere,

49
00:02:39,450 --> 00:02:42,090
which is why we use the centerSphere operator.

50
00:02:42,090 --> 00:02:45,580
And now, this operator takes two parameters passed in via an array,

51
00:02:45,580 --> 00:02:51,385
the first being the center of our circle where longitude comes before latitude.

52
00:02:51,385 --> 00:02:52,725
And now, I want to point this out.

53
00:02:52,725 --> 00:02:54,905
This is longitude and this is latitude.

54
00:02:54,905 --> 00:02:58,015
This is backwards of how coordinates are typically specified.

55
00:02:58,015 --> 00:03:00,315
And this is a part of the GeoJSON standard,

56
00:03:00,315 --> 00:03:01,740
and is the case for

57
00:03:01,740 --> 00:03:05,460
some very interesting legacy reasons that I'm not going to get into in this lesson.

58
00:03:05,460 --> 00:03:07,895
And then after we specify the center of our circle,

59
00:03:07,895 --> 00:03:11,075
the second parameter is the radius of that circle,

60
00:03:11,075 --> 00:03:13,920
and that is measured in radians.

61
00:03:13,920 --> 00:03:16,072
So, most people aren't super familiar with radius,

62
00:03:16,072 --> 00:03:20,070
they're more likely uses something like miles or kilometers.

63
00:03:20,070 --> 00:03:22,710
So, here we're going to use the radius of

64
00:03:22,710 --> 00:03:26,830
the earth in miles and kilometers in order to convert between the two.

65
00:03:26,830 --> 00:03:31,560
So, here we go ahead and take our example radius and paste it in.

66
00:03:31,560 --> 00:03:33,750
And then we're going to take that radius and multiply

67
00:03:33,750 --> 00:03:36,405
it by the radius of the earth in miles.

68
00:03:36,405 --> 00:03:37,650
And now, we can go ahead and print that.

69
00:03:37,650 --> 00:03:40,400
And as you can see, it's 430 miles.

70
00:03:40,400 --> 00:03:42,930
And when we go look back our query,

71
00:03:42,930 --> 00:03:45,910
that's a pretty reasonable estimation.

72
00:03:45,910 --> 00:03:49,860
Now, geoWithin supports other operators besides centerSphere.

73
00:03:49,860 --> 00:03:52,705
I'm not going to demo these since they function the same as centerSphere.

74
00:03:52,705 --> 00:03:56,460
But there's also box, polygon, center, centerSphere,

75
00:03:56,460 --> 00:04:00,910
as well as the girdle fashion geometry operator.

76
00:04:00,910 --> 00:04:03,225
If you want to learn more about these operators and how they function,

77
00:04:03,225 --> 00:04:05,575
I suggest you look at this documentation page,

78
00:04:05,575 --> 00:04:07,210
which will be a link to in the notes.

79
00:04:07,210 --> 00:04:10,090
The other operator that I want to talk about is nearSphere.

80
00:04:10,090 --> 00:04:13,410
And now, this is very similar to geoWithin and centerSphere,

81
00:04:13,410 --> 00:04:16,585
but queries executed with this operator will be

82
00:04:16,585 --> 00:04:21,570
returned in order by the distance from the center of our sphere.

83
00:04:21,570 --> 00:04:23,920
Thus, the near keyword.

84
00:04:23,920 --> 00:04:26,785
And so, this is what the syntax looks like for nearSphere.

85
00:04:26,785 --> 00:04:28,230
It's pretty similar to geoWithin.

86
00:04:28,230 --> 00:04:29,690
But now, we're going to use the dollars

87
00:04:29,690 --> 00:04:33,335
sign geometry operator to define the center of our circle.

88
00:04:33,335 --> 00:04:38,530
And we also pass in a minDistance and maxDistance determining the area of our circle.

89
00:04:38,530 --> 00:04:41,830
We don't actually mean a minDistance since we just want a circle.

90
00:04:41,830 --> 00:04:46,590
But you could put in a non-zero value here if you wanted to build a doughnut like shape.

91
00:04:46,590 --> 00:04:48,660
Now, it's important to point out here that minDistance and

92
00:04:48,660 --> 00:04:51,300
maxDistance are both specified in meters,

93
00:04:51,300 --> 00:04:54,185
not in radians like with centerSphere.

94
00:04:54,185 --> 00:04:55,905
So let's go and store this query,

95
00:04:55,905 --> 00:04:57,800
and then go ahead and execute it.

96
00:04:57,800 --> 00:05:00,010
Oh no, what happened here?

97
00:05:00,010 --> 00:05:01,575
Well, if we scroll down,

98
00:05:01,575 --> 00:05:02,805
we can see that it says,

99
00:05:02,805 --> 00:05:06,515
unable to find index for dollar sign geoNear query.

100
00:05:06,515 --> 00:05:11,910
And that's because dollar sign nearSphere requires a special index on a GeoJSON field.

101
00:05:11,910 --> 00:05:16,090
But fortunately for us, it's very easy for us to create this index using compass.

102
00:05:16,090 --> 00:05:17,715
We'll go ahead and go over to indexes,

103
00:05:17,715 --> 00:05:22,905
click create index, I'm going to name it geo index.

104
00:05:22,905 --> 00:05:26,185
We're going to select the field which in our case is location.geo.

105
00:05:26,185 --> 00:05:29,670
We're going to say it's a special 2dsphere index and click create.

106
00:05:29,670 --> 00:05:32,720
And just like that, we now have the special 2dsphere index.

107
00:05:32,720 --> 00:05:34,760
So now when we go back to our query,

108
00:05:34,760 --> 00:05:37,185
we can go ahead and try and run it again.

109
00:05:37,185 --> 00:05:39,870
And this time, we see documents.

110
00:05:39,870 --> 00:05:44,310
And now, these documents are returned by how far they are away.

111
00:05:44,310 --> 00:05:46,530
And so you can see, we have 1000 meters,

112
00:05:46,530 --> 00:05:51,055
so one kilometer, from this location which is actually MongoDB's headquarters.

113
00:05:51,055 --> 00:05:55,080
And see that there are two theaters within a one kilometer radius.

114
00:05:55,080 --> 00:05:58,700
This theater is closer and this theater is a little bit farther away.

115
00:05:58,700 --> 00:06:00,600
Let's recap what we learned in this lesson.

116
00:06:00,600 --> 00:06:03,630
We saw how we can find documents that have GeoJSON

117
00:06:03,630 --> 00:06:08,170
coordinates within a circle on the earth using the centerSphere operator.

118
00:06:08,170 --> 00:06:13,345
We also learn how to find documents that are near a points using nearSphere.

119
00:06:13,345 --> 00:06:15,930
And finally, we have spent some time discussing which queries

120
00:06:15,930 --> 00:06:19,410
require a 2dsphere index and how to build one in compass.