welcome back to second programming 
simulation lecture 
this week i will talk differential 
drive, odometry infrared sensors 
in fact, this weeks programming 
assignment is 
focused implementing robots 
sensors actuators 
therefore, you will need to transform 
unicycle dynamics in 
controllers to differential drive 
dynamics mobile robot 
you also need to use wheel encoder 
to keep track robots position 
orientation 
this is called odometry 
third, youll need to use infared 
sensors to 
measure distance to obstacles that 
might around teh robot 
simulator emulates quickbot, 

quickbot is defined in quickbotm 
file 
this is a class located in 
robot package 
packages in matlab denoted a plus 
in front folder name 
this robot a twowheel differential 
drive, meaning that 
wheel is independently, controlled 
a single motor 
and, also a wheel encoder 
one wheels 
wheel encoders responsible 

measuring distance that wheel 
travels 
a resolution ticks per 
revolution 
robot also five infrared 
sensors infrared sensors 
detect 
obstacles, that within a range four 
to thirty centimeters in field 
view 
following is a little diagram to explain 
to you simulation actually works 
first all, there is simulator 
a timer object 
this timer object calls every 
time step execute function inside 
supervisor 
supervisor is really decision 
maker responsible 
for, first all, gathering sensor 
information robot 
selects a controller 
passes censor information along 
an estimate 
robots position orientation to 
execute function in controller 
this execute function in controller, 
computes 
appropriate linear angular velocity 
robot 
is then, converted to left right 
real 
speeds robot passed back to 
robot 
supervisors also responsible updating 
estimate 
robots position in orientation 
this whole process is repeated every 
time step 
supervisor defined in 
qb supervisorsmfile 
controllers found in 
controller package 
first part this assignment is, to 
convert linear angle velocity 
in controllers to left 
right angular wheel velocities 
mobile robot 
youll this in unit diff 
function is defined in 
differentialdrivem file 
this function takes in linear 
angular velocity 
robot returns left right 
wheel speeds 
skeleton code show you 
to retrieve radius reel r 
distance between two reels, l 
you need to use to calculate left 
right wheel speeds 
second part this assignment is 
odometry 
you need to is to measure 
distance traveled 
wheel estimate position 
orientation 
robot using measured 
distances 
you will implement this in update 
odometry function, is inside 
qbsupervisorm file 
lets take a look skeleton code 
this function 
here you ske, skeleton code 
this function 
first you will retrieve wheel encoder 
takes robot, 
you will recall previous wheel 
encoder takes is 
used is achieved retrieving 
previous text stored in 
pre, the, in previous 
iteration code 
then, you will use, you will retrieve 
current state estimate, 
meaning, is current estimated 
position orientation robot 
then, you will retrieve the, useful 
constants 
radius wheel, distance 
between wheel, 
many readers there tic 
of, tic encoder 
part comes, is to 
implement odometry 
computing difference in x 
position, difference 
in y position, difference in 
orientation 
between last time odometry 
updated 
you will add deltas to 
current estimate 
pos, current estimate 
orientation position, save, 
save that new estimate 
you will also need to save 
current number ticks in right 
left wheels next iteration 
inaudible 
part assignments is to make sense 
ir distance sensors 
in particular, sensors will return 
votages in 
range to 
correspond to distances between four 
centimeters 
relationship between distance 
voltage, is 
shown in graph left 
what, to make matters a little bit 
complicated, is that 
robot actually returns a integer value in 
range , 
values simply correspond to 
voltage divided two multiplied 
, 
since graph the, in previous 
slide is linked is linear 
we need to use unknown polyfit to 
find a fifthorder polynomial that will 
fit data 
we will use coefficients 
that function polyval 
function to convert integers to 
an actual distance in mirrors 
you will this in get ir distances 
function 
this function is defined in quickbotm 
you need to implement two specific 
parts 
first you need to properly convert 
integers to voltage, 
you need to hard code coefficients 
that output polyfit function 
to help you test assignment, weve 
included a go to angle controller 
this is a p regulator, will simply 
steer robot to a specified angle 
if you wish to change angle to 
this robot steers, you 
need to go constructur 
qbsupervisorm change this variable, 
right here 
objectthetad 
i set to pi divided four, so 
wed expect that robot 
would drive a degree angle 
respect to x axis 
so lets see this in action 
im 
going to hit play we see 
is robot 
drived a de, de, degree angle 
im 
going to move graph way 
going to follow this robot 
you see driving 
degrees respect to x axis 
going to continue driving 
this angle 
way until going to crash 
thread wall 
there you go, we found a crash 
youll see in the, in command window, 
that ive actually spitting 
estimated posts odometry every 
time step, you see that values 
that im getting angle close 
to pi divided four 
so this controller successfully steers 
robot toward that angle 
tips this week to, first 
all, make sure you read 
section week two in manual 

details you find in slide, in 
slides 
also, to use commented fprintf 
statements 
that ive included in comments in 
code 
into, maybe add more, 
this is really 
useful debugging example, 

youre dealing implement in 
odometry, 
you want to print youre 
currently 
estimating position robot to 

you know example you easily see 
that robot drove degrees, i 
also needed to print that to 
command 
line to make sure that values 
jump 
thats this week 
