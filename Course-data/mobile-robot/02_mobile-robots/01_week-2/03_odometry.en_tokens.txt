so
now
that
we
have
a
model
,
we
need
some
way
of
knowing
where
the
robot
is
because
the
state
of
the
robot
is
xy
and
fine
,
meaning
the
position
xy
and
it
's
heading
,
fine
.
odometry
is
the
means
by
which
we
can
obtain
this
pose
information
and
the
question
is
,
how
do
we
actually
get
the
state
or
the
pose
of
the
robot
?
well
,
there
are
a
number
of
different
ways
of
doing
it
,
but
at
the
end
of
the
day
,
we
absolutely
need
sensors
.
well
,
there
are
two
possibilities
here
.
one
is
we
can
use
some
kind
of
external
sensors
.
so
,
an
external
sensor
would
be
a
sensor
that
's
measuring
something
in
the
environment
.
so
,
for
instance
,
you
pretend
that
you
can
see
a
,
a
landmark
.
let
's
say
i
can
see
the
eiffel
tower
.
and
now
i
start
moving
around
,
if
i
keep
track
of
the
eiffel
tower
i
should
be
able
to
at
least
know
where
i
am
relative
to
the
eiffel
tower
.
right
.
that
seem
to
make
some
sense
.
so
the
external
sensors
.
ultrasound
,
infrared
,
cameras
,
laser
scanners
,
these
are
sensors
that
tell
us
something
externally
about
where
we
are
.
there
is
another
type
of
external
sensor
that
one
can
use
,
of
course
,
which
would
be
gps
and
it
's
external
because
we
're
not
measuring
it
internally
,
we
're
getting
information
from
outside
,
and
the
gps
immediately
would
give
us
things
like
position
and
so
forth
.
however
,
when
you
're
running
robots
indoors
,
you
certainly
do
n't
have
gps
signals
,
and
a
lot
of
times
gps
alone
is
not
enough
to
know
x
,
y
,
and
phi
to
any
high
level
of
,
of
fidelity
.
so
what
you
do
is
you
typically
couple
the
external
sensors
with
internal
.
sensors
.
so
the
internal
sensors
are
sensors
that
are
sitting
in
the
robot
.
and
they
are
helping
you
know
where
you
are
.
so
,
for
instance
,
you
could
use
a
compass
to
,
figure
out
which
way
the
,
the
robot
is
heading
.
so
this
would
be
orientation
.
of
course
,
in
every
self
respecting
robot
,
there
are
accelerometers
,
and
gyroscopes
for
finding
out
.
and
how
far
you
've
traveled
and
so
forth
.
so
position
and
orientation
can
both
be
derived
from
accelerometers
and
gyroscopes
to
certain
degree
.
another
useful
way
is
wheel
encoders
.
so
typically
you
have
tick
counts
,
you
can
tick
and
count
how
many
.
basically
,
how
many
revolutions
the
wheels
are
doing
in
a
certain
amount
of
time
,
and
from
that
you
can
actually
figure
out
things
about
where
the
robot
is
.
and
,
i
would
like
to
discuss
a
little
bit
with
you
about
wheel
encoders
.
and
the
reason
for
that
is
,
that
if
we
are
indeed
now
working
with
the
referential
drive
robots
for
awhile
,
lets
see
,
if
we
can
find
out
a
little
bit
of
how
we
can
get
position
information
.
and
more
importantly
,
how
much
can
,
can
be
trusted
.
so
,
a
wheel
encoder
gives
the
distance
moved
by
each
wheel
.
so
,
we
have
left
and
right
wheels
here
.
and
here
's
the
following
assumption
we
're
going
to
make
.
we
're
going
to
assume
that
each
wheel
is
following
an
arc
,
which
means
that
it
's
turning
at
a
constant
rate
and
driving
at
a
constant
velocity
,
basically
.
so
,
v
and
ohm
r
are
constant
.
what
this
means
is
,
on
short
time
scales
that
's
,
that
's
correct
.
and
if
we
do
that
,
well
,
let
's
say
that
d
is
the
distance
the
left
wheel
has
turned
,
and
d
[
unknown
]
is
the
,
distance
the
right
wheel
has
turned
.
so
in
this
case
,
the
right
wheel
is
turning
quicker
than
the
left
wheel
because
it
's
turned
,
turned
more
.
well
,
i
'm
interested
in
x
,
y
,
and
phi
.
which
is
not
where
the
wheels
are
,
but
where
the
center
of
the
robot
is
.
this
is
where
i
'm
interested
in
.
so
dc
is
the
distance
the
center
has
turned
and
that
's
the
thing
that
i
'm
interested
in
.
now
luckily
,
the
center
is
simply
dl
+
dr
/
2.
i
am
not
going
to
be
particularly
picky
in
showing
where
the
geometry
of
this
comes
from
.
instead
,
these
are
things
that
are
readily
available
if
you
want
to
look
up
things
,
like
how
wheel
encoders
work
.
but
i
want
to
connect
a
little
bit
with
the
mobile
robot
model
to
the
wheel
encoders
,
just
to
see
how
we
reason
about
things
,
and
in
fact
,
if
we
are
measuring
how
far
.
the
road
the
wheels
have
moved
over
a
time
interval
.
so
let
's
say
that
we
start
at
x
and
after
the
time
interval
,
well
we
know
dc
because
dc
is
this
thing
then
we
can
actually
compute
the
new
x
primes
,
the
new
x
position
of
the
robot
.
we
can
similarly
compute
the
new
y
position
of
the
robot
.
which
is
the
same
as
the
x
update
,
but
has
sine
instead
of
a
cosine
term
.
and
,
we
can
even
compute
,
the
,
the
new
orientation
.
so
this
is
a
way
of
knowing
how
to
go
from
,
how
far
the
wheels
have
turned
.
into
what
are
the
new
positions
of
the
robot
.
and
,
in
fact
,
we
're
going
to
be
running
quite
a
few
experiments
,
where
the
only
information
the
robot
has
.
is
where
it
is
,
based
on
the
wheel
encoders
.
so
but
how
do
we
know
dr
and
dl
,
thought
?
this
is
what
we
need
to
know
in
order
to
find
out
where
the
robot
is
.
well
,
assume
that
each
wheel
has
n
ticks
per
revolution
.
so
2
pi
degrees
is
n
ticks
.
so
most
wheel
encoders
actually
give
the
total
tick
counts
as
to
.
the
beginning
,
so
what
you
measure
is
how
many
ticks
since
,
since
you
start
the
system
up
.
so
,
the
updates
i
am
writing
here
for
both
wheels
.
this
is
for
the
left
wheel
and
the
right
wheel
,
so
you
could
write
the
you
know
.
delta
tick
r
or
r
or
but
for
both
of
these
wheels
you
take
the
old
total
tick
count
.
and
subtract
it
away
from
the
new
total
trick
,
tick
count
.
so
this
tells
me
,
what
's
the
tick
count
during
the
time
interval
you
just
looked
at
.
and
then
based
on
that
,
you
can
very
easily
compute
what
the
distance
that
wheel
has
,
turned
.
so
this
d
here
,
this
d
could
either
be
d
's
of
l
or
d
's
of
r
,
so
it
's
simply
2
pi
r
delta
tick
over
n.
so
this
actually
gives
as
a
way
of
mapping
ticks
on
to
distances
traveled
,
and
as
we
saw
in
the
previous
,
previous
slide
distance
traveled
we
can
then
map
into
new
position
and
orientation
of
the
,
fair
enough
.
there
is
one
major
disclaimer
i
must
make
,
though
.
and
that
is
,
ta-daa
,
drift
.
a
system
like
this
,
drift
.
it
's
very
imprecise
.
and
,
if
your
using
only
real
encoders
as
your
source
of
odometry
,
your
probably
going
to
run
into
a
little
bit
of
trouble
.
so
,
here
,
i
want
to
show
a
video
.
this
was
from
one
of
the
.
cou
rses
i
taught
recently
where
you
have
now
two
robots
competing
against
each
other
.
it
looks
like
they
're
following
lines
but
all
they
're
doing
is
following
wave
points
that
laid
down
,
and
they
're
using
a
pda
regulator
to
get
through
wave
points
.
and
what
you
can
see
is
that
they
're
getting
a
little
but
out
of
whack
,
and
the
interesting
thing
here
is
one
robot
gets
up
on
top
of
the
other
robot
and
as
a
consequence
the
wheel
is
spinning
without
it
's
actually
touching
the
ground
.
and
as
you
can
see
the
robot
then
has
a
completely
confused
idea
of
where
it
is
in
the
world
.
so
this
would
be
an
example
of
were
drifts
its
rather
severe
the
robot
is
going
in
way
wrong
direction
because
of
the
fact
that
the
real
encoders
no
longer
correspond
to
what
's
happening
on
the
ground
.
so
we
're
going
to
use
real
encoders
a
lot
.
they
're
used
a
lot
in
robotics
,
but
we
always
need
to
be
aware
of
the
fact
that
themselves
,
by
themselves
,
wheel
encoders
do
not
tell
the
full
story
or
a
particularly
robust
