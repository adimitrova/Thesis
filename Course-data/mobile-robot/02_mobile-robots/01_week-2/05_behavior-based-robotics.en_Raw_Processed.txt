ive already said, world is 
fundementally dynamic changing 
unknown to robot, so make 
sense to overplan think hardly 
you act optimally given 
assumptions world looks 
like that may make sense if 
designing controllers an industrial 
robot a manufacturing plant 
robot is going to repeat motion 
youre going 
to spot welding, youre going to 
produce motion , times in a 
single day youll overplan 
youll make sure that youre optimal 
if a robot is exploring an area 
doesnt know exactly whats going on, 
you dont want to spend 
computational money finding best 
possible way to move because, 
actually going to best 
world is you thought so 
key idea to overcome this thats quite 
standard in robotics, is to simply develop 
a library useful controllers so 
controllers that different things 
like going to landmarks, avoiding 
obstacles we saw one that tried to make 
robots drive center gravity 
neighbors basically, we a 
library useful controllers, 
behaviors if you will, we switch 
among behaviors in response to 
environment throws us if a 
sudden an obstacle appears, we avoid 
if we see a power outlet 
low battery we go 
recharge so switching to different 
controllers in response to is going 
so i would like to is to start 
designing behaviors to see 
we learned in module one, a little 
bit control design used to 
build behaviors so lets assume we 
differentialdrive mobile robot 
to make matters a little easier 
front, going to assume that 
velocity speed is, is constant so v 
going to change quickly 
robot is moving so we change 
i steering so youre 
basically sitting in a car cruise 
control, velocities 
changing, you steer thats 
job question is, you 
actually steer robot around so, 
this is equation then, thats 
governing input omega, 
state that interested in, in this 
case pi, is heading 
robot so, pi dot is equal to omega okay, 
so, lets say that we yellow 
triangle robot, a unicycle 
differentialdrive robot headed in 
direction five, so this is direction 
in and, reason, we 
figured that we want to go in this 
direction, five desired sum d maybe 
there is something interesting here, 
that interested in so, we want to 
drive in this direction well, 
we actually this well, pi dot is equal 
to omega so, job clearly is that 
figuring omega is equal to, 
is control input alright, so, 
we that well, you know we a 
reference, pi desired well, in module 
one we called references r right we 
an error, meaning, that compares 
reference pi desired to system is 
in this case, pi so comparing 
headings so we an error, we 
a reference you know we a 
dynamics pi dot is equal to omega so we 
everything we towards end 
module one so we even know to design 
controllers that we 
that well, we saw pid, right thats 
controller weve actually seen so, 
dont we try a pid regulator that 
seems like a perfectly useful way 
building a controller so, you know what, 
omega is kp times e, kp 
proportional gain so this response to 
error is right you make kp 
large responds quicker you may 
induce oscillations, you 
integral error so you take e 
tau, tau times k sub i, is 
integral gain this thing, this 
integral, nice property that 
integrating tiny little 
tracking errors that we may have, 
a while this integral becomes large 
enough that pushes system to 
tracking errors, thats a good 
feature the, interval even though 
we saw we need to aware fact 
that a big ki actually also induce 
oscillations we could a d 
terms a kd times e dot that kd 
is the, gain derivative part this 
makes system responsive 
become a little bit oversensitive to 
noise so will this work wont 
i will tell you in this case 
dealing angles angles 
rather peculiar beasts lets say that phi 
desired a radiance actual 
heading now, phi is radiance 
error is minus radiance means 
that this is a really, really large error 
so omega is going to ginormous but, 
that doesnt seem right pi 
radius is zero radius, right 
so, error actually zero, so 
we niave dealing 
angles and, in fact this is 
something we aware is angles 
rather peculiar beasts we need to 
be, dealing there 
famous robotic crashes that 
caused this robot starts 
spinning like crazy even though 
shouldnt 
thinks pi instead zero 
radius so we 
well solution is to ensure that 
error is always between minus pi pi 
so minus pi, well thats 
thing zero so we need to ensure that 
whatever is staying 
within minus pi pi there is a 
really easy way that we use 
a function, arc tangents two language 
there is a library operates in 
way a way producing 
angles between minus pi pi c plus, 
plus it, java it, matlab it, 
whatever you, python so you c an 
always this you that 
well you take angle thats 
,, pi right you take sine 
comma cosine so this is 
saying that really arc tan so 
im going to write this tan inverse 
sine e cosine e arc tan tan 
inverse doesnt, clear that 
always returns arc tan , you 
a coma in it, you always get 
something thats within minus pi pi 
so heres you need to do, whenever 
youre dealing angles youre 
acting them, a bad idea to 
wrap one arc tan two lines around 
to ensure that you indeed 
values that arent crazy so, a 
little caveate that going to use e 
prime instead e, pid regulator will 
work like a charm okay, so here is an 
example problem weve already seen this 
picture this is problem driving 
robot, is little blue ball, 
to goal, is sun, 
apparently, lets see if we use 
this pid control design omega to design 
controllers that take us to sun, to 
goal since dealing 
obstacles dealing goal 
locations, also talking 
behaviors minmum we really need 
two behaviors goal to goal, avoid 
obstacles so going to 
next couple lectures, is develop 
behaviors, deploy a 
robot see if there good 
