1
00:00:00,012 --> 00:00:06,565
So, when you do control design you always
have a number of parameters that need to

2
00:00:06,577 --> 00:00:12,570
be tweaked and tuned. And there's really
no way of selecting these parameters

3
00:00:12,582 --> 00:00:19,334
without actually testing what's going on.
So, we have seen how to design now goal to

4
00:00:19,346 --> 00:00:25,535
goal behaviors but we haven't really
picked parameters in the PID regulator.

5
00:00:25,638 --> 00:00:30,052
So, what we're going to do now is take
what we have done and actually simulate

6
00:00:30,064 --> 00:00:34,817
it. And for that, we're going to use our
in-house GRITS robot simulator, which is a

7
00:00:34,829 --> 00:00:39,077
MATLAB-based simulator. It's based on a
Khepera [inaudible] differential drive

8
00:00:39,089 --> 00:00:44,671
mobile robots with infrared range sensors
around it, so it can detect things in the

9
00:00:44,683 --> 00:00:50,327
environment and odometry is obtained using
wheel encoders. and I should point out

10
00:00:50,339 --> 00:00:55,930
that I will be using this simulator quite
a lot in this course. and you can actually

11
00:00:55,942 --> 00:01:01,394
download it for free at this address and
you can either download it as a standalone

12
00:01:01,406 --> 00:01:05,985
executable, which means you'll be able to
run it and interact with the user

13
00:01:05,997 --> 00:01:11,193
interface, or you can download the entire
MATLAB package. Now, I will not require

14
00:01:11,205 --> 00:01:16,266
that you use if for the course, but if you
want to play around with different control

15
00:01:16,278 --> 00:01:20,987
designs on a robot, this is a very good
simulator to start with. So, let's

16
00:01:20,999 --> 00:01:25,683
actually see what it would do. So, I'm
going to move over to MATLAB and start up

17
00:01:25,695 --> 00:01:30,329
the simulator. And what we're going to see
here is, this is the robot, it's pointing

18
00:01:30,341 --> 00:01:34,347
in some direction. I have placed a goal at
negative 1, 1 so it's going to go

19
00:01:35,232 --> 00:01:40,235
backwards in this direction to get to the
goal. So, let's see what it's actually

20
00:01:40,247 --> 00:01:44,966
doing. So, I'm going to start playing
this. The robot is turning, turning and,

21
00:01:45,074 --> 00:01:50,319
as you can see here, the blue line is the,
is the actual heading and the dotted line,

22
00:01:50,427 --> 00:01:55,409
the red line, is the desired heading. And
here, we have quite a bit of overshoot.

23
00:01:55,517 --> 00:02:00,450
So, this is not a particularly good
control the sign actually that's going on

24
00:02:00,713 --> 00:02:05,582
because we're overshooting even though we
now seem to be stabilizing towards the

25
00:02:05,594 --> 00:02:09,952
direction in which we want to go. So,
instead of going in this direction, let'

26
00:02:09,952 --> 00:02:14,824
s, let's see if we can do something better
to the, the control parameters. So, I'm

27
00:02:14,836 --> 00:02:19,662
going to open up the file where we define
the PID controller. So, I have a p gain, a

28
00:02:19,674 --> 00:02:25,128
proportional gain of 10, an integral gain
of 10 and no d gain. Well, the integral

29
00:02:25,140 --> 00:02:30,493
gain of 10 seems rather excessive to me.
So, I'm rather brutally going to say, why

30
00:02:30,505 --> 00:02:36,263
don't we make it 0? We're not caring about
getting exactly there. So, let's turn it

31
00:02:36,275 --> 00:02:41,831
down to zero and actually see what
happens. So, if we do that and close this

32
00:02:41,843 --> 00:02:48,626
window here, and this window, let's see
what happens, let's start it off again.

33
00:02:48,761 --> 00:02:54,293
Well, now, let's, let's start the
simulator and now, it should go again to

34
00:02:54,305 --> 00:02:57,836
negative 1, 1. And hopefully, we'll we
will have cured the robot of its annoying

35
00:02:57,848 --> 00:03:02,303
overshoot. And look at this step response.
See how the desired heading goes up to, or

36
00:03:02,199 --> 00:03:06,499
the actual heading goes up to the desired
heading quite nicely and then stabilizes

37
00:03:06,511 --> 00:03:11,955
to where we wanted. So now, in simulation,
we have verified that this particular

38
00:03:11,967 --> 00:03:18,006
choice of control parameters is, is at
least not entirely useless. which is a

39
00:03:18,018 --> 00:03:23,143
good way to start when you actually go on
a real robot. So now, let's stop this

40
00:03:23,155 --> 00:03:28,723
simulation business and move on to the
actual robot. So, now that we've seen how

41
00:03:28,735 --> 00:03:34,352
to think about control design for building
a go to goal behavior, and we even

42
00:03:34,364 --> 00:03:40,338
simulated it with varying degrees of
success, let's actually now put it on an

43
00:03:40,350 --> 00:03:45,165
actual robot. So, I'm here with again, JP,
who is the master of ceremony and a

44
00:03:45,177 --> 00:03:50,358
Khepera 3 differential drive mobile robot.
And we're going to be running exactly the

45
00:03:50,370 --> 00:03:55,230
same code as we did in the simulator. All
we're doing is flipping a switch so we're

46
00:03:55,242 --> 00:04:00,225
actually running it on the robot instead
of on the simulator. And this differential

47
00:04:00,237 --> 00:04:05,587
drive robot will know where it is based
solely on the edometric information it's

48
00:04:05,599 --> 00:04:10,928
getting from the wheel encoders, and its
task is, is to make it from here over to

49
00:04:10,940 --> 00:04:16,244
this turquoise gold point here. And a
simple PID regulator is enforced and we're

50
00:04:16,256 --> 00:04:21,612
going to use the same parameters as in the
simulation With a p of 10, an i gain of 0

51
00:04:21,624 --> 00:04:26,908
and a d gain of 0, so its a pure
P-regulator. And without further ado, JP,

52
00:04:26,920 --> 00:04:33,214
let's see how the computer does. ,, , And
as you can see the turn was nice, there

53
00:04:33,226 --> 00:04:40,021
are very few or little oscillation here
and the Khepera is making it very nicely

54
00:04:40,033 --> 00:04:46,980
all the way to the turquoise goal point.
So, we will call that a success.