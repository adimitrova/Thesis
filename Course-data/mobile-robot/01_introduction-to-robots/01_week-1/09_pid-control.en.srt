1
00:00:00,012 --> 00:00:05,524
So, last time we saw that the PI
regulator, or its slightly more elaborate

2
00:00:05,536 --> 00:00:11,770
brother, the PID regulator, was enough to
make the cruise controller do what it

3
00:00:11,782 --> 00:00:18,134
should do. Which is, achieve stability,
tracking and parameter robustness. Today I

4
00:00:18,146 --> 00:00:21,682
want to talk a little bit more about PID
control.

5
00:00:21,691 --> 00:00:26,642
And, the reason for that is, this
regulator is such an important regulator

6
00:00:26,654 --> 00:00:31,629
or controller that's out there in
virtually every industry you can think of,

7
00:00:31,740 --> 00:00:36,123
there is a PID regulator going on
underneath the hood in almost all

8
00:00:36,135 --> 00:00:41,704
controllers. And, there are really three
knobs you can tweak here. One is KP, which

9
00:00:41,716 --> 00:00:47,811
is the proportional gain. The other's kI
which is the integral gain and then kD

10
00:00:47,823 --> 00:00:54,032
which is the derivative gain. And I want
to talk a little bit about what are the

11
00:00:54,044 --> 00:00:59,446
effects of these gains? Well first of all
P As we saw. It's a contributor to

12
00:00:59,458 --> 00:01:04,516
stability. In the sense that, it makes the
system, not guaranteed. But it's helping

13
00:01:04,528 --> 00:01:09,231
out to make the system stable. And it's,
it's making it responsive in the sense

14
00:01:09,243 --> 00:01:13,864
that. You respond if someone, if you
click, or press 70 miles per hour on your

15
00:01:13,876 --> 00:01:19,382
cruise controller. It drives the system
towards that value. I'm calling it medium

16
00:01:19,394 --> 00:01:25,267
rate responsiveness. Because it's not
super fast. And the speed. In fact, the

17
00:01:25,279 --> 00:01:31,118
rate of responsiveness is a function of
how big kp is. But as you saw, it wasn't

18
00:01:31,130 --> 00:01:37,120
typically enough to achieve tracking. But
the I component is really. Good for

19
00:01:37,132 --> 00:01:42,535
tracking and in fact if your system is
stable than having an eye component is

20
00:01:42,547 --> 00:01:48,245
enough to assure tracking in almost all
cases. It's also extremely effective at

21
00:01:48,257 --> 00:01:54,024
rejecting disturbances so that integral
part is a very effective Part to have in

22
00:01:54,036 --> 00:01:59,392
your controller. Now it's much slower in
the sense that you have to accumulate over

23
00:01:59,404 --> 00:02:04,522
time errors to respond to them because
it's an integral. So it, it re, responds

24
00:02:04,534 --> 00:02:09,486
slower and there is a very there is a
little bit of a warning I need to make

25
00:02:09,498 --> 00:02:14,810
there, by making k i large. You may very
well induce oscillation so this is not, oh

26
00:02:14,822 --> 00:02:19,115
I'm going to pick all of the Them.
A million and go home. Yo u have to be a

27
00:02:19,127 --> 00:02:24,119
little careful in how you actually select,
select these gates. Now the d part, well,

28
00:02:24,222 --> 00:02:28,809
since it's not responding to actual
values, their values but the change is in

29
00:02:28,821 --> 00:02:33,490
their values, it's typically faster
responsiveness, so something is about to

30
00:02:33,502 --> 00:02:38,403
happen. Well, the rate is changing so the,
the derivative part kicks in typically

31
00:02:38,415 --> 00:02:43,171
faster. now there is a little caveat to
this. And that's the derivative is

32
00:02:43,183 --> 00:02:47,792
sensitive to noise. Because if you have a
signal that's noisy then if you compute

33
00:02:47,804 --> 00:02:52,653
the derivative of that signal you're going
to get rather aggressive derivatives that

34
00:02:52,665 --> 00:02:57,337
don't necessarily correspond to what the
non noisy signal would be. So you have to

35
00:02:57,349 --> 00:03:02,179
be a little careful with the d part. So
making KD too large is typically an

36
00:03:02,191 --> 00:03:08,055
invitation to disaster because you're,
you're over reacting to, to noise. So, the

37
00:03:08,067 --> 00:03:13,353
last thing I want to point out though is
when you put this together you get PID

38
00:03:13,365 --> 00:03:19,283
which is already by far the most used low
level controller. Low level means whenever

39
00:03:19,295 --> 00:03:24,941
you have a DC motor somewhere and you want
to make it do something Somewhere there is

40
00:03:24,953 --> 00:03:29,342
a PID leak. Whenever you have a chemical
processing plant for getting the right

41
00:03:29,354 --> 00:03:33,571
concentrations in your chemicals,
somewhere there is a PID regulator. It's

42
00:03:33,583 --> 00:03:38,216
almost everywhere there, or in almost all
control applications, PID shows up under

43
00:03:38,228 --> 00:03:42,609
the hood in some form or another. But, I
do want to point out, that this is not a

44
00:03:42,621 --> 00:03:47,143
one-size-fits all. We can't guarantee
stability with a PID regulator. Sometimes

45
00:03:47,155 --> 00:03:51,716
it's not enough. In fact, when we go to
complicated Robotic systems, the PID

46
00:03:51,728 --> 00:03:56,710
regulator will typically not be enough by
itself. So we need to do a lot of more

47
00:03:56,722 --> 00:04:01,963
thinking and modeling to, to use it and at
this point we actually don't really know

48
00:04:01,975 --> 00:04:06,936
how to pick these gains. However, I want
to point out that this is a very, very

49
00:04:06,948 --> 00:04:12,574
useful type of controller. And since it is
a feedback lob because it depends upon the

50
00:04:12,586 --> 00:04:17,867
error it actually fights uncertainty model
parameters in a remarkable way and the

51
00:04:17,879 --> 00:04:22,800
feedback has this remarkable ability to
overcome the fact that we don't know

52
00:04:22,812 --> 00:04:27,944
gamma, we don't know c, we don't know m.
But still, we seem to do well when we

53
00:04:27,956 --> 00:04:33,436
design controllers for a wide range of, of
these parameters. So having said that,

54
00:04:33,549 --> 00:04:39,636
let's hook it up to our car and in fact we
had a PID regulator for velocity control

55
00:04:39,648 --> 00:04:45,330
on the urban challenge vehicle, Sting 1 as
it's called. We had this model that we've

56
00:04:45,342 --> 00:04:50,287
already seen, and I pick It's completely
random and arbitrary numbers here for the

57
00:04:50,299 --> 00:04:54,748
parameters. I even put r equals to 1, so
we're going to go 1 mile per hour. let's

58
00:04:54,760 --> 00:04:59,233
say 1 meter per second. it really doesn't
matter These are arbitrary values. Just so

59
00:04:59,245 --> 00:05:04,010
you'll see what's going on. So, if we
start with our friend The p regulator so

60
00:05:04,022 --> 00:05:10,219
we have kp = 1 here and all the other
gains are 0 then well, we don't actually

61
00:05:10,231 --> 00:05:16,647
make it up to 1 we only make it 2 - 0.1.
This we had already seen. So the p part by

62
00:05:16,659 --> 00:05:23,182
itself was not enough to, to both be
stable and achieve tracking. Well, that's

63
00:05:23,194 --> 00:05:28,436
Ok in the i part. It's cruise-controller
again kp is 1, kI is 1 and now we are

64
00:05:28,448 --> 00:05:33,588
having a very nice so called step response
which means we are responding, we are

65
00:05:33,600 --> 00:05:38,768
waking up and then we are hitting it with
a step, in this case the step of height 1

66
00:05:38,780 --> 00:05:44,379
or 70 if its 70 miles per hour. so then
this thing makes it's way up and it stays

67
00:05:44,391 --> 00:05:50,319
up there perfect. So this is actually a
good and successful design right here. Now

68
00:05:50,319 --> 00:05:55,672
,if this is so good why don't we make ki
higher to make it even better? Well if I

69
00:05:55,702 --> 00:06:00,726
To crank up KI to 10. Then, all of a
sudden, my system starts oscillating. So

70
00:06:00,738 --> 00:06:05,731
this is an example of where the integral
part may actually cause oscillations.

71
00:06:05,840 --> 00:06:11,994
Which is, we should at least be aware of
this fact. And be a little careful when we

72
00:06:12,006 --> 00:06:17,270
tweak our parameters. And if we see
oscillations That is a. Clear indication

73
00:06:17,282 --> 00:06:22,010
that the integral part is typically a
little bit too large. What about the d

74
00:06:22,022 --> 00:06:27,270
part? Well, let's add the d part. In this
case, it actually doesn't matter too much.

75
00:06:27,377 --> 00:06:32,275
What you see here is that I had a small d
part. I'm a little bit paranoid when it

76
00:06:32,287 --> 00:06:37,308
comes to large kd terms because they are a
little bit Noise sensitive.

77
00:06:37,322 --> 00:06:42,275
But what you're seeing here is that you're
getting a faster initial response because

78
00:06:42,287 --> 00:06:47,145
of the introduction of a D part, but then,
we actually get almost a slower response

79
00:06:47,157 --> 00:06:51,715
towards the end so the D part is there to
drive it well up in the beginning, but

80
00:06:51,727 --> 00:06:57,900
then So were stand in this particular
application, having a d gain that's not

81
00:06:57,912 --> 00:07:04,453
ser, it's not even clear if that was, was
useful. But this is some of the thinking

82
00:07:04,465 --> 00:07:10,340
that goes into tweeking PID regulators.
So what we are going to do next time, is

83
00:07:10,352 --> 00:07:15,765
we're going to go now, from this rather
abstract, integrals and derivatives, to

84
00:07:15,777 --> 00:07:21,240
something that we can actually implement.
And we're going to see how these PID gains

85
00:07:21,252 --> 00:07:25,690
show up when we control a the altitude of
a hovering quad regulator..