1
00:00:00,012 --> 00:00:05,762
Now we have a rather useful seemingly
general purpose controller, that we call

2
00:00:05,774 --> 00:00:11,624
the PID regulator. And, we saw that we
could use it to design a cruise controller

3
00:00:11,636 --> 00:00:17,536
for a car to make the car reach the, the
desired velocity. what I haven't said

4
00:00:17,548 --> 00:00:22,240
though is how do we actually take
something that looks, Looks, to be

5
00:00:22,252 --> 00:00:27,070
completely honest, rather awkward. You
know? Integrals and derivatives and stuff.

6
00:00:27,171 --> 00:00:31,463
And actually turn it into executable code.
Meaning, how do we go from this

7
00:00:31,475 --> 00:00:36,012
mathematical expression to something
that's running on a platform? Well, the

8
00:00:36,024 --> 00:00:40,494
first thing to note is that, we always
have a sample time. We're sampling at a

9
00:00:40,506 --> 00:00:45,199
certain rate. There's a certain clock
frequency on the, on the computer. Well,

10
00:00:45,307 --> 00:00:50,264
what we need to do is we need to take
these continuous time objects that we have

11
00:00:50,276 --> 00:00:55,304
here in the, in the PAD regulator and have
them be defined in this discreet time.

12
00:00:55,412 --> 00:01:00,511
First of all here is an arrow, it doesn't
matter if this is running in continuous

13
00:01:00,523 --> 00:01:05,334
time and discrete time, the proportional
part we just read in the current's

14
00:01:05,346 --> 00:01:11,071
velocity. And compare it to the reference
velocity, and then we get the error at

15
00:01:11,083 --> 00:01:16,304
time, k times delta t. So that's trivial.
Now, but what do we do with derivatives

16
00:01:16,316 --> 00:01:21,877
and integrals? Well, let's start with the
derivatives, because they are not so hard.

17
00:01:22,276 --> 00:01:27,415
we know that, roughly, a derivative is the
new value. Minus the old value divided

18
00:01:27,427 --> 00:01:32,450
delta t. In fact, as delta t goes to 0,
this becomes the definition of a

19
00:01:32,462 --> 00:01:38,180
derivative limit. So, we actually know
that if I can store my old error, compute

20
00:01:38,192 --> 00:01:43,695
a new error, take the difference and
divide it by delta t, I have a pretty good

21
00:01:43,707 --> 00:01:49,521
approximation of edot, which is this thing
de(t)/dt, so I actually can approximate

22
00:01:49,533 --> 00:01:54,209
the, the derivative part in a rather
direct way. Compared the latest value to

23
00:01:54,221 --> 00:01:59,190
the previous value divided by delta two,
and we're good. Now the integral. That's

24
00:01:59,202 --> 00:02:03,819
where we're going to have to do a little
bit of work. So, what is the integral?

25
00:02:03,923 --> 00:02:08,886
Well the integral is The sum under the
curve right. That's the integral. Well is

26
00:02:08,898 --> 00:02:13,520
there some way of approximating this?
Well, clearly it is. We can sum up all

27
00:02:13,532 --> 00:02:18,725
these little blocks. This is a rim
approximation of the integral. So what

28
00:02:18,737 --> 00:02:23,729
this means is well we're not going to get
the integral exactly, but if you can sum

29
00:02:23,741 --> 00:02:29,681
up these blocks somehow and the width here
is going to be. what did we call it? Delta

30
00:02:29,693 --> 00:02:34,969
t. So the width of each base of the
rectangle is delta t. So if you can do

31
00:02:34,981 --> 00:02:41,324
that. Then we're getting a, a reasonably
good approximation. And, in fact, then the

32
00:02:41,336 --> 00:02:47,150
integral is simply a sum of the values at
the sample time. So the value up there.

33
00:02:47,271 --> 00:02:52,290
The value at that time. And then we
multiply it by delta T to get the

34
00:02:52,302 --> 00:02:57,338
rectangle, and then we sum up all the
rectangles. That's a reasonable

35
00:02:57,350 --> 00:03:02,760
approximation and in fact what I'm going
to do is I'm going to take this sum and

36
00:03:02,772 --> 00:03:08,606
call the sum E. So this is the same thing.
So then the integral is roughly equal to

37
00:03:08,618 --> 00:03:15,338
delta T times E. Well, that turns out to
be useful because, let's get rid of that

38
00:03:15,350 --> 00:03:22,076
stuff again. my next value, delta, or E
delta t times e new. Well, it's delta t

39
00:03:22,088 --> 00:03:27,945
times the sum, but now I'm summing to n
plus 1, well, let's pull out the last

40
00:03:27,957 --> 00:03:34,425
term. So, the error At time, n plus 1
times delta t. That's the last value that

41
00:03:34,437 --> 00:03:41,325
we called little e new up here. Let's pull
that out, multiply it by delta t, and

42
00:03:41,337 --> 00:03:48,000
what's left is the sum from 1 or 0 to n,
which is E old, times delta t. So, delta

43
00:03:48,012 --> 00:03:54,223
t. E new is equal to delta t, E old + this
guy here. Or if I want to put it in a

44
00:03:54,235 --> 00:04:01,791
slightly more compact way, E new where E
is the sum of the errors is E old + the

45
00:04:01,803 --> 00:04:07,937
latest error. Which is a little bit dah.
The new sum is the old sum plus the latest

46
00:04:07,949 --> 00:04:13,170
entry. So, that gives me Enew and now,
since I kne know that the integral is

47
00:04:13,182 --> 00:04:18,272
delta t x E, I know that, well, the
integral term that I get here is simply

48
00:04:18,284 --> 00:04:22,799
delta t times Enew which gives me an
approximation of. The interval.

49
00:04:22,801 --> 00:04:27,803
So, now, having said it, let's put this
into, into pseudo-code here. So, every

50
00:04:27,815 --> 00:04:32,583
time the controller is called, well, I'm
going to read in the latest error, which

51
00:04:32,595 --> 00:04:37,221
is the reference minus the measurement.
And then, I'm going to say e _dot.

52
00:04:37,221 --> 00:04:41,251
E_dot is really.
E minus, now we call it, let's call it e

53
00:04:41,263 --> 00:04:46,675
old, here. It's really divided by delta t,
right? But the D part of the controller is

54
00:04:46,687 --> 00:04:51,957
Kd times this thing. Well, what if I just
called this thing my new, let's call it kD

55
00:04:51,969 --> 00:04:57,043
prime. I just divided by delta t because I
don't actually need to typically know

56
00:04:57,055 --> 00:05:01,924
delta t. Let's call this kD prime. Well,
then I just got rid of delta t, and I

57
00:05:01,936 --> 00:05:09,542
don't have to worry about. Delta t. I do
the same thing for the integral. So e new

58
00:05:09,554 --> 00:05:15,008
is e old plus the latest error. Again, I
really have that this thing, this

59
00:05:15,020 --> 00:05:21,350
integral, is roughly equal to delta t.
Times E. So if I have kI times that, I

60
00:05:21,362 --> 00:05:28,503
have this times kI, well let's take these
guys and call this, this is my new kI.

61
00:05:28,646 --> 00:05:35,625
Then again I get rid of the T, so then if
I do that, my actual controller is KP

62
00:05:35,637 --> 00:05:41,318
times E times KP times E dot. Which I just
computed and KI times E. This is my

63
00:05:41,330 --> 00:05:47,004
control structure, this is how we actually
implement it. And then I just need to at

64
00:05:47,016 --> 00:05:52,457
the end, remember to store the light, the
latest E as the old E so the next time I

65
00:05:52,469 --> 00:05:57,939
call the controller, I have the previous
value. This is the implementation of a.

66
00:05:57,939 --> 00:06:00,648
PID regulator.
So let's do it. OK.

67
00:06:00,650 --> 00:06:06,246
I'm going to point out again. The
coefficients include the sample times. I

68
00:06:06,357 --> 00:06:12,668
pointed that out already. But let's do it.
Before we do it though I actually want to

69
00:06:12,680 --> 00:06:17,877
say that that's the end. Almost of Module
1. And in Module 2, we're going to go

70
00:06:17,889 --> 00:06:22,863
robotics. In the sense that we're going to
see, now, how to relate some of these

71
00:06:22,875 --> 00:06:28,303
initial concepts to robotics. But, in the
interest of full disclosure, we actually

72
00:06:28,315 --> 00:06:32,460
don't know why anything we did in Module.
1 actually worked.

73
00:06:32,464 --> 00:06:37,880
So Module 3 is we're going to revisit what
we did here. But, revisit it in a much

74
00:06:37,892 --> 00:06:43,643
more systematic way. Okay, that's enough
chitchat. Now, let's do it. We're going to

75
00:06:43,655 --> 00:06:49,125
do altitude control. Which means we're
going to control the height, how high up

76
00:06:49,137 --> 00:06:55,277
in the air a Quadrotor is. And the model
we're going to use is, well, x is going to

77
00:06:55,289 --> 00:07:01,057
be, so here's the height, here's the
ground, so x is going to be how high up

78
00:07:01,069 --> 00:07:07,270
this thing is. And x.., which is the
acceleration of the quadrotor, well g, the

79
00:07:07,282 --> 00:07:12,345
gravity, is pulling it down, so there has
to be a -g somewhere. gravity is pulling

80
00:07:12,357 --> 00:07:16,945
it down, and then what we're doing is
we're really controlling the velocity of

81
00:07:16,957 --> 00:07:21,725
the rotor collectives. So these are all
the rotors of the quadrotor, all the four

82
00:07:21,737 --> 00:07:26,820
rotors, the angular velocity of this thing
we're controlling. And that's translating

83
00:07:26,832 --> 00:07:31,933
into thrust and upthrust through This
coefficient, c, that we don't know. And we

84
00:07:31,945 --> 00:07:36,747
actually really don't know what the
gravitational constant is either, but this

85
00:07:36,759 --> 00:07:41,711
is the model we're going to use. And this
is the controller we're going to use. And

86
00:07:41,974 --> 00:07:46,265
instead of me showing plots and
simulations, why don't we get away from

87
00:07:46,277 --> 00:07:50,970
the Power Point presentation right here,
and move over to an actual quadrotor

88
00:07:50,982 --> 00:07:55,507
running a PID. Regulator.
So, now that we have a way of designing

89
00:07:55,519 --> 00:08:02,015
reasonably good controllers. In this case,
PID regulators. we have some understanding

90
00:08:02,027 --> 00:08:07,626
of the basic performance objectives we're
trying to hit. In this case, stability,

91
00:08:07,740 --> 00:08:13,414
tracking, and robustness. We even have a
model, or at least a rudimentary model of

92
00:08:13,426 --> 00:08:19,088
a. Quadrotor aerial vehicle. What we did
in the model is we tried to somehow

93
00:08:19,100 --> 00:08:24,429
connect the rotor collective speed to an
up-thrust and the model included some

94
00:08:24,441 --> 00:08:29,947
parameters that we don't know. It even
included the gravitational constant. The

95
00:08:29,959 --> 00:08:34,932
idea, of course, with robustness now is,
we should not have to know these

96
00:08:34,944 --> 00:08:39,146
parameters. Exactly.
Because that would actually be a rather

97
00:08:39,158 --> 00:08:43,973
poor and fragile control assign. So I have
JP Delacroix with me here who is a

98
00:08:43,985 --> 00:08:48,867
graduate student at Georgia Tech. And
without any further ado, JP, let's see

99
00:08:48,879 --> 00:08:54,952
what thee PID regulator actually looks
like in action. , So what we're doing now

100
00:08:54,964 --> 00:09:00,920
is altitude control only. So we're trying
to make this thing stay at the fixed

101
00:09:00,932 --> 00:09:07,273
altitude. It's going to drift a little bit
sideways because we're not controlling

102
00:09:07,285 --> 00:09:12,975
sideways drift at all. one thing we can
see right off the bat is that the system

103
00:09:12,987 --> 00:09:17,584
is indeed stabilized. Because if it
wasn't, the quadrotor would actually fall

104
00:09:17,596 --> 00:09:22,171
down to the ground. The other thing we see
is, when I'm pushing it a little bit like

105
00:09:22,183 --> 00:09:26,630
this, it's able to overcome it. I can even
push it down a little bit. And the

106
00:09:26,642 --> 00:09:32,685
controller fights these disturbance, so
robustness is, certainly achieved. In

107
00:09:32,697 --> 00:09:38,260
terms of tracking, it's not so clear
what's actually going on because we don't

108
00:09:38,272 --> 00:09:44,155
exactly see what the reference height is,
however we are measuring altitude with a

109
00:09:44,167 --> 00:09:49,835
downward facing ultrasonic sensor and,
let's get this thing out of the way of JP.

110
00:09:50,052 --> 00:09:57,741
And the integral part or the integral term
in the PID regulator is ensuring that

111
00:09:57,753 --> 00:10:04,787
modulatiries these extra errors in the
height measurements, we are actually

112
00:10:04,799 --> 00:10:11,797
achieving the. The altitude we were,
looking for. So with this rather simple

113
00:10:11,809 --> 00:10:18,657
initial experiment, we're going to declare
success when it comes to PID regulation.

114
00:10:18,787 --> 00:10:25,363
And we now are going to move on to bigger
and better problems. Thank you. ,, .