1
00:00:00,012 --> 00:00:05,554
So now that we have a way of describing
dynamical systems with differential

2
00:00:05,566 --> 00:00:11,299
equations in continuous time. Or
difference equations in, discrete time.

3
00:00:11,419 --> 00:00:18,124
Let's, see if we can actually use this, to
do something interesting with, with

4
00:00:18,136 --> 00:00:24,325
robots. And, let's start with. Building a
cruise controller for a, for a car. And

5
00:00:24,337 --> 00:00:29,275
the, the cruise controller. I mean it's
job is to make the car drive at the

6
00:00:29,287 --> 00:00:34,400
desired reference speed. And if you
recall, we're going to use r to describe

7
00:00:34,412 --> 00:00:40,689
the reference. So someone You, in the car,
have set the reference speed to, to 65

8
00:00:40,701 --> 00:00:47,236
miles per hour, or whatever you desire.
Now, we want to somehow understand how we

9
00:00:47,248 --> 00:00:53,535
should model the car so that we can make
it go the reference speed. Well, like I

10
00:00:53,547 --> 00:00:59,795
said last time, the laws of physics
ultimately will dictate how Objects in the

11
00:00:59,807 --> 00:01:05,005
world, like robots or cars, behave. And
Newton's second law says that the force is

12
00:01:05,017 --> 00:01:09,795
= to the mass * the acceleration. Now,
this is what we're going to have to start

13
00:01:09,807 --> 00:01:14,660
with. There's nothing we can do about
this. It is what it is. Now, what is the

14
00:01:14,672 --> 00:01:20,069
state of the system? because we need to
somehow relate Newton's Second Law to the

15
00:01:20,081 --> 00:01:25,022
state. Well, in this case, since what
we're going to do is try to make the

16
00:01:25,034 --> 00:01:30,686
velocity do the right thing, we can say
that, let's say that the velocity of this,

17
00:01:30,802 --> 00:01:37,338
the car is the state. So x is going to be
The speed at which the carrist is driving.

18
00:01:37,482 --> 00:01:44,743
Now acceleration a appear, this, a is
simply dv dt and its the time derivative

19
00:01:44,755 --> 00:01:52,387
of the velocity or the change in velocity
as a function of time. So what we get from

20
00:01:52,399 --> 00:01:59,692
that of course is that we can relate the
velocity to the acceleration. Now we're

21
00:01:59,704 --> 00:02:04,514
also going to have to have an input, and
when you're driving a car, the input, if

22
00:02:04,526 --> 00:02:09,675
you're dealing with, with speeds rather
than which direction the car is going is,

23
00:02:09,781 --> 00:02:14,729
you press the gas pedal or the brake. And
we are going to be rather cruder and say,

24
00:02:14,835 --> 00:02:19,501
you know what? Somehow we're mapping
stepping on the gas or the brake onto a

25
00:02:19,513 --> 00:02:25,056
force that's applied To the car. And this
is done through some linear relationship,

26
00:02:25,169 --> 00:02:30,498
where we h as some coefficient c, which is
an electric mechanical transmission

27
00:02:30,510 --> 00:02:35,887
coefficient, and I'm going to go out on a
limb and say, we don't know what this is.

28
00:02:36,000 --> 00:02:41,707
And, I control this sign cannot rely on us
knowing c, because we're not going to know

29
00:02:41,719 --> 00:02:47,179
exactly what it is. But, let's at least
for now, go with this, and hope That

30
00:02:47,191 --> 00:02:53,244
that's good enough to give us the design
we want. So now we know that the force is

31
00:02:53,256 --> 00:02:57,643
c times u, but it's the mass time the
acceleration. Right.

32
00:02:57,648 --> 00:03:03,344
So x dot, which is the same as dv, dt,
which we had up there. Well, that's A

33
00:03:03,356 --> 00:03:09,304
which means that mass times the
acceleration which is mx dot is equal to

34
00:03:09,316 --> 00:03:15,872
the force, but the force is c times u. So,
that tells me directly that x dot is c

35
00:03:15,884 --> 00:03:22,671
over m times u. So, this, this sweet heart
equation here is an equation that

36
00:03:22,683 --> 00:03:28,672
describes how my input maps on to. The
state of the system. It's a differential

37
00:03:28,684 --> 00:03:33,971
equation. But it's an equation that tells
us something about how my choice of input

38
00:03:33,983 --> 00:03:38,397
affects the system. Okay.
This is, in fact, a rather good model. And

39
00:03:38,409 --> 00:03:43,202
I want to show a little video. I was
involved in one of the, the DARPA. grand

40
00:03:43,202 --> 00:03:46,812
challenges.
This was an urban challenge. Where we were

41
00:03:46,824 --> 00:03:52,040
supposed to build self-driving cars and we
use almost exactly this model for, for our

42
00:03:52,052 --> 00:03:56,713
car. So I want to talk a little bit about
how one would do this. So here is the

43
00:03:56,725 --> 00:04:01,515
front, a spinning thing, that's a laser
scanner. On the side here, is another

44
00:04:01,527 --> 00:04:05,791
laser scanner sitting on top of a radar.
These were what we used to get

45
00:04:05,803 --> 00:04:10,938
measurements. Now what we see on the
inside is our instrumented car, which

46
00:04:10,950 --> 00:04:16,859
translated ultimately input voltages onto
mechanically things that push down the gas

47
00:04:16,871 --> 00:04:22,647
pedal. So this is how we actually affected
it with the same coefficient. And now,

48
00:04:22,761 --> 00:04:28,281
look at this video. The car gets around
obstacles, and then it gets out of bounds,

49
00:04:28,395 --> 00:04:33,401
and it starts oscillating. So, I'm showing
this. A, because I think the car is

50
00:04:33,413 --> 00:04:37,638
awesome. But, B, because there are, even
though we didn't crash into things, we

51
00:04:37,650 --> 00:04:42,224
were oscillating a little bit. so there is
something not perfect about this control

52
00:04:42,236 --> 00:04:46,486
design. See how we get out of the lane,
we're oscillating too much. If you look at

53
00:04:46,498 --> 00:04:51,069
the steering wheel, see that this is a
little skittish. and that's another

54
00:04:51,081 --> 00:04:56,486
indication that maybe the control design
here wasn't perfect, but the velocity

55
00:04:56,498 --> 00:05:01,851
controller was based on a model that's
very similar to, to what we just wrote

56
00:05:01,863 --> 00:05:07,836
down. here's another example of obstacle
avoidance where. We're actually trying to

57
00:05:07,848 --> 00:05:12,799
avoid another car, but the point being is
that, this very, very, very simple model

58
00:05:12,811 --> 00:05:17,646
that we wrote down is actually applicable
to real systems. And this is part of the

59
00:05:17,658 --> 00:05:22,889
miracle of abstractions, that you're that
you're able to get simple things that you

60
00:05:22,901 --> 00:05:27,502
then can apply for real. Now, I want to
point out that we did real well In this

61
00:05:27,514 --> 00:05:32,341
competition up to a point, these were
actually the semifinals before the finals.

62
00:05:32,445 --> 00:05:37,196
So let me show you what happened at the
end. This breaks my heart to show you but

63
00:05:37,208 --> 00:05:41,806
I'm going to show it to you anyway. Here
comes our car. Sting racing.

64
00:05:41,812 --> 00:05:47,155
It's slowing down, it's slowing down and
then ow. It drives straight into a k rail,

65
00:05:47,267 --> 00:05:52,830
which is this concrete railing. What
happened was that we got some measurement

66
00:05:52,842 --> 00:05:58,080
errors, a lot of measurement errors
actually from the GPS. But I wanted to

67
00:05:58,092 --> 00:06:03,505
show you this because it was the outcome
of it. regardless of which, this was

68
00:06:03,517 --> 00:06:09,685
still. A very complicated system. A very
complicated robot, a car, and the model we

69
00:06:09,697 --> 00:06:15,255
came up with was very simple, and the
point is that simple models a lot of times

70
00:06:15,267 --> 00:06:21,115
get you very far. So, let's see how we
should actually do, do the control design

71
00:06:21,127 --> 00:06:27,245
here. let's assume that we can measure
directly the velocity, and record, recall

72
00:06:27,257 --> 00:06:32,446
that the state. X is the velocity the
measurement or the output is what we

73
00:06:32,458 --> 00:06:38,247
called y, so y is actually directly equal
to x in this case, so we have a some way

74
00:06:38,259 --> 00:06:43,823
of measuring velocities which you know
typically have a, you have a speedometer

75
00:06:43,835 --> 00:06:49,371
in your car so we know roughly what the
velocity is and now their control signals

76
00:06:49,383 --> 00:06:55,510
should be a function of R-y, where r is
the desired velocity and y is the actual

77
00:06:55,522 --> 00:07:01,950
velocity. And, I'm going to call this e,
which stands for error. And our job, as

78
00:07:01,962 --> 00:07:08,356
control designers, is to make the error
disappear, drive the error down to zero.

79
00:07:08,484 --> 00:07:15,279
So let's, before we do the actual design
discuss a little bit about what are The

80
00:07:15,291 --> 00:07:21,173
properties that a useful controller could
have. Well 1 property is that the

81
00:07:21,185 --> 00:07:27,356
controller should not overreact. If the
error is tiny, we're almost perfect in

82
00:07:27,368 --> 00:07:33,124
terms of the velocity of the car, we
should not have a large control signal.

83
00:07:33,249 --> 00:07:39,018
The control signal should not be
aggressive when we're close to being done,

84
00:07:39,143 --> 00:07:44,588
it's like. Lets say that you're trying to
thread a, a thread through a needle. Well,

85
00:07:44,689 --> 00:07:49,059
when you're really, really close you
shouldn't just jam the thread in there.

86
00:07:49,160 --> 00:07:53,861
You should take it nice and slow when
you're close. So, no overreactions. That's

87
00:07:53,873 --> 00:07:58,257
important, because when you start
overreacting, you start responding very

88
00:07:58,402 --> 00:08:02,852
Quickly and aggressively to measurement of
noise, for instance. So, a small error

89
00:08:02,864 --> 00:08:07,231
should give a small control input. U
should not be jerky. And jerky, here. All

90
00:08:07,243 --> 00:08:11,646
I mean with that is that, it shouldn't
vary too rapidly all the time. Because if

91
00:08:11,658 --> 00:08:15,964
it does, then we're going to be sitting in
this car. With our cruise controller,

92
00:08:16,059 --> 00:08:20,267
we're going be having a cup of coffee with
us. And, now the cruise controller is

93
00:08:20,279 --> 00:08:24,669
smacking us around all over, because it's
jerking, we're going to spill our coffee.

94
00:08:24,764 --> 00:08:28,433
And, in fact for auto pilot's on
airplanes, there are limits on their

95
00:08:28,445 --> 00:08:33,753
accep, acceptable accelerations That are
directly related to cups of coffees

96
00:08:33,765 --> 00:08:39,657
standing on the, the tray tables in the
aircraft. so you should be, not

97
00:08:39,669 --> 00:08:45,787
overreacting. It should not be jerky. And
the, it should not depend on us knowing c

98
00:08:45,799 --> 00:08:50,703
and m. So, m is the mass of the car. C is
this semi-magical transmission

99
00:08:50,715 --> 00:08:55,750
coefficient. The mass of the car is
changing depending on what luggage we

100
00:08:55,762 --> 00:09:01,488
have. It's changing depending on how many
passengers we have. We should not have to

101
00:09:01,682 --> 00:09:07,645
Redesign our controller just because a new
person entered the car. We shouldn't have

102
00:09:07,657 --> 00:09:12,695
to weigh everyone and enter how much we
weigh to, for it to work. And in fact

103
00:09:12,707 --> 00:09:18,045
elevators have bounds on how many people
can be in the elevators. This is import,

104
00:09:18,157 --> 00:09:23,545
related to the fact that they design
controllers that are robust to Variations

105
00:09:23,557 --> 00:09:28,470
in mass across a certain spectrum. Same
thing for cars. The cruise controller

106
00:09:28,482 --> 00:09:33,330
should work no matter how many people are
in the car and we don't want to know c.

107
00:09:33,437 --> 00:09:38,725
What this means is that controller can not
be allowed to depend exactly on the values

108
00:09:38,737 --> 00:09:43,928
of c and m. So these are the 3 properties,
high level properties that we have to

109
00:09:43,940 --> 00:09:49,025
insist on our control signal to have. So
having said that, in the next lecture

110
00:09:49,037 --> 00:09:54,218
we're going to see how we can actually
take these high level objectives and turn

111
00:09:54,230 --> 00:09:59,288
em into actual controllers and see what
constitutes a good control design and.

112
00:09:59,312 --> 00:10:03,125
Conversely, it would constitute a bad
control design.