1
00:00:00,012 --> 00:00:05,049
So recall, last time, we saw that. We
designed a controller that was nice and

2
00:00:05,061 --> 00:00:10,463
smooth. It didn't overreact to small
errors. made a system stable. Yet didn't

3
00:00:10,475 --> 00:00:14,949
achieve tracking. And this was the
proportional regulator, or the p

4
00:00:14,961 --> 00:00:20,386
regulator. and let's return to our
performance objectives a little bit. We've

5
00:00:20,398 --> 00:00:24,701
talked about them briefly. But a
controller at the minimum should.

6
00:00:24,872 --> 00:00:29,740
Stabilize the system. If it doesn't do
that, we know nothing and I've written

7
00:00:29,752 --> 00:00:34,970
this rather awkward looking acronym here,
BIBO, which is something out of the Lord

8
00:00:34,982 --> 00:00:39,970
of the Rings almost. What it stands for
is, bounded in, bounded out which means

9
00:00:39,982 --> 00:00:44,780
that if the control signal is bounded, the
state of the system should also be

10
00:00:44,792 --> 00:00:49,315
bounded. What this means is that, by
doing. Reasonable things the system

11
00:00:49,327 --> 00:00:54,112
doesn't blow up. And our system doesn't do
that. Tracking means we should get to the

12
00:00:54,124 --> 00:00:58,708
reference value we want. And robustness
means we shouldn't have to know too much

13
00:00:58,720 --> 00:01:03,304
about parameters that we really have no
way of knowing. And preferably we should

14
00:01:03,316 --> 00:01:08,180
be able to fight noise as. Well, so recall
at this was the model and when I

15
00:01:08,192 --> 00:01:13,430
introduced this wind resistant term here,
we had a little bit of a problem.The

16
00:01:13,442 --> 00:01:19,305
proportional regulator couldn't overcome
it and lets have another controller done

17
00:01:19,317 --> 00:01:24,655
one that explicitly cancels out the effect
of the wind resistance. So here is my.

18
00:01:24,962 --> 00:01:31,108
Attempt 3, I'm going to use this part,
which is the proportional part that we

19
00:01:31,120 --> 00:01:37,332
already talked about, and then I'm going
to add this thing which is plus gamma

20
00:01:37,332 --> 00:01:41,786
m/c*x.
Well why did I do this? Well, I did this

21
00:01:41,798 --> 00:01:48,449
for the following reason that if you reach
steady state x is not equal to 0, then now

22
00:01:48,632 --> 00:01:53,913
What you get is well this was the p part.
This is the controller, the p controller.

23
00:01:54,023 --> 00:01:59,523
And then the effect of this thing well
you're going to multiply this by c/m. What

24
00:01:59,535 --> 00:02:04,766
you're going get then is plus gamma x. And
then you have wind resistance which is

25
00:02:04,778 --> 00:02:10,011
negative gamma x. So the gamma x, the bad
parts cancel out. And in fact all we're

26
00:02:10,023 --> 00:02:15,661
left with then is that x. Has to be equal
to r. So, voila, we've sol ved the

27
00:02:15,661 --> 00:02:19,586
problem.
We have perfect tracking. Or, have we?

28
00:02:19,720 --> 00:02:26,541
dom, dom, dom. No, we have not. And, why
is this? Well, we have stability and we

29
00:02:26,553 --> 00:02:32,930
have tracking, but we don't have
robustness. Here are three things that we

30
00:02:32,942 --> 00:02:39,702
don't know. Gamma, m, and c. And our
controller depends explicitly on, On these

31
00:02:39,714 --> 00:02:45,346
coefficients. So all of a sudden we have
to know all these physical parameters that

32
00:02:45,358 --> 00:02:50,685
we don't know, so this is not a robust
control design. So Attempt 3 is a failure.

33
00:02:50,902 --> 00:02:56,848
Okay, let's go back to the P-Regulator and
see what's going on there. What, what's

34
00:02:56,860 --> 00:03:01,846
actually happening is that the
proportional error is doing a fine job

35
00:03:01,858 --> 00:03:07,692
pushing the system up to close to where it
should be, but, then it kind of runs out

36
00:03:07,704 --> 00:03:13,425
of steam, and it can't push hard enough to
overcome The effect of the wind

37
00:03:13,437 --> 00:03:19,325
resistance. So the proportional thing
isn't hard enough, but take a look here.

38
00:03:19,447 --> 00:03:25,555
This is the error, then the error starts
accumulating over time, so if we somehow,

39
00:03:25,677 --> 00:03:31,695
if we're able to collect All of these
errors over time, even though they are

40
00:03:31,707 --> 00:03:36,275
very small. Over time, that should be
enough, so that we can use this now

41
00:03:36,287 --> 00:03:41,485
accumulated error to push all the way up.
So I wish there was some way of collecting

42
00:03:41,497 --> 00:03:46,679
things over time in a plot like this. And,
of course, there. There is, this is

43
00:03:46,691 --> 00:03:52,344
something called an integral. So, if we
take the integral over the error we're

44
00:03:52,356 --> 00:03:57,853
collecting the error over time and over
time as this errors going to accumulate

45
00:03:57,865 --> 00:04:03,686
it's going to give us enough pushing power
to actually overcome the wind resistance.

46
00:04:03,804 --> 00:04:09,096
So attempt 4 is a pi. Regulator.
So what I have here is the error at time

47
00:04:09,108 --> 00:04:14,867
t. This is my kp, which is my proportional
gain. So this is the p part that we

48
00:04:14,879 --> 00:04:20,771
already saw. And now, I'm adding an
integral that is integrating up the error

49
00:04:20,783 --> 00:04:27,422
from. The beginning to the current time.
And it's collecting this. And then we have

50
00:04:27,434 --> 00:04:33,919
another term here, or another coefficient.
The ki, where I stands for the integral

51
00:04:33,931 --> 00:04:40,023
part. So this a pi regulator. And it is
2/3 of. The most common regulator found

52
00:04:40,035 --> 00:04:45,774
anywhere in the world, and in fact it's
almos t 2/3 of commercial grade cruise

53
00:04:45,786 --> 00:04:51,566
controllers. So if I have a p and an i,
what could possibly be missing to get to

54
00:04:51,578 --> 00:04:57,570
all of them? 3/3 instead of just 2/3.
Well, we take a derivative. Right, we have

55
00:04:57,582 --> 00:05:03,195
proportion, we have integral, and we have
a derivative. So, why not produce what's

56
00:05:03,207 --> 00:05:08,495
called a PID-Regulator? So now we have a
proportional term with a proportional

57
00:05:08,507 --> 00:05:13,270
gain. We have an integral part with an
integral gain. And then we have a

58
00:05:13,282 --> 00:05:18,589
derivative part with a derivative gain, so
this is. It's an extremely useful

59
00:05:18,601 --> 00:05:24,249
controller that shows up a lot. And, in
fact, I'm going to hand, have to hand out

60
00:05:24,261 --> 00:05:29,680
a big sweetheart to the PID regulator.
Because it's such an important type of

61
00:05:29,692 --> 00:05:35,220
control structure that shows up all the
time. And in fact we're going to get quite

62
00:05:35,232 --> 00:05:40,430
good at designing the PID regulators. Now
having said that, I can draw hearts all I

63
00:05:40,442 --> 00:05:45,575
want, let's see it in action and see what
it actually does. And if I use just the PI

64
00:05:45,587 --> 00:05:50,715
regulator, not even a D component to the
cruise controller, then all of a sudden I

65
00:05:50,727 --> 00:05:55,830
get something that's getting up quickly,
nice and slowly, I mean smoothly, to 70.

66
00:05:55,962 --> 00:06:01,535
Miles per hour, which is my reference. So
this solves the problem. I don't know

67
00:06:01,547 --> 00:06:07,544
parameters, so it's robust. I'm achieving
tracking, because I'm getting to 30 miles

68
00:06:07,556 --> 00:06:13,204
per hour. And, I'm stable in the sense
that I didn't crash. So, this seems like a

69
00:06:13,216 --> 00:06:14,543
very useful design.