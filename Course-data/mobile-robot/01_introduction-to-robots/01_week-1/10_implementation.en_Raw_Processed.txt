we a rather useful seemingly 
general purpose controller, that we call 
pid regulator and, we saw that we 
could use to design a cruise controller 
a car to make car reach the, 
desired velocity i havent said 
though is we actually take 
something that looks, looks, to 
completely honest, rather awkward you 
know integrals derivatives stuff 
actually turn executable code 
meaning, we go this 
mathematical expression to something 
thats running a platform well, 
first thing to note is that, we always 
a sample time sampling a 
certain rate theres a certain clock 
frequency the, computer well, 
we need to is we need to take 
continuous time objects that we 
here in the, in pad regulator 
defined in this discreet time 
first here is an arrow, doesnt 
matter if this is running in continuous 
time discrete time, proportional 
part we read in currents 
velocity compare to reference 
velocity, we get error 
time, k times delta so thats trivial 
now, we derivatives 
integrals well, lets start 
derivatives, so hard 
we know that, roughly, a derivative is 
new value minus old value divided 
delta in fact, delta goes to , 
this becomes definition a 
derivative limit so, we actually know 
that if i store old error, compute 
a new error, take difference 
divide delta t, i a pretty good 
approximation edot, is this thing 
detdt, so i actually approximate 
the, derivative part in a rather 
direct way compared latest value to 
previous value divided delta two, 
good integral thats 
going to to a little 
bit work so, is integral 
well integral is sum 
curve right thats integral well is 
there way approximating this 
well, clearly is we sum 
little blocks this is a rim 
approximation integral so 
this means is well going to get 
integral exactly, if you sum 
blocks somehow width here 
is going to we call delta 
so width base 
rectangle is delta so if you 
that getting a, a reasonably 
good approximation and, in fact, 
integral is simply a sum values 
sample time so value there 
value that time we 
multiply delta to get 
rectangle, we sum 
rectangles thats a reasonable 
approximation in fact im going 
to is im going to take this sum 
call sum e so this is thing 
so integral is roughly equal to 
delta times e well, that turns to 
useful because, lets get rid that 
stuff next value, delta, e 
delta times e new well, delta 
times sum, im summing to n 
plus , well, lets pull last 
term so, error time, n plus 
times delta thats last value that 
we called little e new here lets pull 
that out, multiply delta t, 
whats left is sum to n, 
is e old, times delta so, delta 
e new is equal to delta t, e old this 
guy here if i want to put in a 
slightly compact way, e new e 
is sum errors is e old 
latest error is a little bit dah 
new sum is old sum plus latest 
entry so, that gives enew now, 
since i kne know that integral is 
delta x e, i know that, well, 
integral term that i get here is simply 
delta times enew gives an 
approximation interval 
so, now, said it, lets put this 
into, pseudocode here so, every 
time controller is called, well, im 
going to read in latest error, 
is reference minus measurement 
then, im going to say e dot 
edot is really 
e minus, we call it, lets call e 
old, here really divided delta t, 
right d part controller is 
kd times this thing well, if i 
called this thing new, lets call kd 
prime i divided delta i 
dont actually need to typically know 
delta lets call this kd prime well, 
i got rid delta t, i 
dont to worry delta i 
thing integral so e new 
is e old plus latest error again, i 
really that this thing, this 
integral, is roughly equal to delta 
times e so if i ki times that, i 
this times ki, well lets take 
guys call this, this is new ki 
i get rid t, so if 
i that, actual controller is kp 
times e times kp times e dot i 
computed ki times e this is 
control structure, this is we actually 
implement i need to 
end, remember to store light, 
latest e old e so next time i 
call controller, i previous 
value this is implementation a 
pid regulator 
so lets ok 
im going to point 
coefficients include sample times i 
pointed that already lets 
we though i actually want to 
say that thats end almost module 
in module , going to go 
robotics in sense that going to 
see, now, to relate 
initial concepts to robotics but, in 
interest full disclosure, we actually 
dont know anything we in module 
actually worked 
so module is going to revisit 
we here but, revisit in a much 
systematic way okay, thats enough 
chitchat now, lets going to 
altitude control means 
going to control height, high 
in air a quadrotor is model 
going to use is, well, x is going to 
be, so heres height, heres 
ground, so x is going to high 
this thing is x, is 
acceleration quadrotor, well g, 
gravity, is pulling down, so there 
to a g somewhere gravity is pulling 
down, is 
really controlling velocity 
rotor collectives so 
rotors quadrotor, four 
rotors, angular velocity this thing 
controlling thats translating 
thrust upthrust this 
coefficient, c, that we dont know we 
actually really dont know 
gravitational constant is either, this 
is model going to use this 
is controller going to use 
instead showing plots 
simulations, dont we get away 
power point presentation right here, 
move to an actual quadrotor 
running a pid regulator 
so, that we a way designing 
reasonably good controllers in this case, 
pid regulators we understanding 
basic performance objectives 
trying to hit in this case, stability, 
tracking, robustness we even a 
model, least a rudimentary model 
a quadrotor aerial vehicle we 
in model is we tried to somehow 
connect rotor collective speed to an 
upthrust model included 
parameters that we dont know even 
included gravitational constant 
idea, course, robustness is, 
we to know 
parameters exactly 
that would actually a rather 
poor fragile control assign so i 
jp delacroix here is a 
graduate student georgia tech 
without ado, jp, lets see 
thee pid regulator actually looks 
like in action , so 
is altitude control so trying 
to make this thing stay fixed 
altitude going to drift a little bit 
sideways controlling 
sideways drift one thing we 
see right bat is that system 
is indeed stabilized if 
wasnt, quadrotor would actually fall 
to ground thing we see 
is, im pushing a little bit like 
this, able to overcome i even 
push a little bit 
controller fights disturbance, so 
robustness is, certainly achieved in 
terms tracking, so clear 
whats actually going we dont 
exactly see reference height is, 
however we measuring altitude a 
downward facing ultrasonic sensor and, 
lets get this thing way jp 
integral part integral term 
in pid regulator is ensuring that 
modulatiries extra errors in 
height measurements, we actually 
achieving altitude we were, 
looking so this rather simple 
initial experiment, going to declare 
success comes to pid regulation 
we going to move to bigger 
better problems thank you ,, 
