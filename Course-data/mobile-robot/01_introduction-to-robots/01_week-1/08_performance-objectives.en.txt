So recall, last time, we saw that. We
designed a controller that was nice and smooth. It didn't overreact to small
errors. made a system stable. Yet didn't achieve tracking. And this was the
proportional regulator, or the p regulator. and let's return to our
performance objectives a little bit. We've talked about them briefly. But a
controller at the minimum should. Stabilize the system. If it doesn't do
that, we know nothing and I've written this rather awkward looking acronym here,
BIBO, which is something out of the Lord of the Rings almost. What it stands for
is, bounded in, bounded out which means that if the control signal is bounded, the
state of the system should also be bounded. What this means is that, by
doing. Reasonable things the system doesn't blow up. And our system doesn't do
that. Tracking means we should get to the reference value we want. And robustness
means we shouldn't have to know too much about parameters that we really have no
way of knowing. And preferably we should be able to fight noise as. Well, so recall
at this was the model and when I introduced this wind resistant term here,
we had a little bit of a problem.The proportional regulator couldn't overcome
it and lets have another controller done one that explicitly cancels out the effect
of the wind resistance. So here is my. Attempt 3, I'm going to use this part,
which is the proportional part that we already talked about, and then I'm going
to add this thing which is plus gamma m/c*x.
Well why did I do this? Well, I did this for the following reason that if you reach
steady state x is not equal to 0, then now What you get is well this was the p part.
This is the controller, the p controller. And then the effect of this thing well
you're going to multiply this by c/m. What you're going get then is plus gamma x. And
then you have wind resistance which is negative gamma x. So the gamma x, the bad
parts cancel out. And in fact all we're left with then is that x. Has to be equal
to r. So, voila, we've sol ved the problem.
We have perfect tracking. Or, have we? dom, dom, dom. No, we have not. And, why
is this? Well, we have stability and we have tracking, but we don't have
robustness. Here are three things that we don't know. Gamma, m, and c. And our
controller depends explicitly on, On these coefficients. So all of a sudden we have
to know all these physical parameters that we don't know, so this is not a robust
control design. So Attempt 3 is a failure. Okay, let's go back to the P-Regulator and
see what's going on there. What, what's actually happening is that the
proportional error is doing a fine job pushing the system up to close to where it
should be, but, then it kind of runs out of steam, and it can't push hard enough to
overcome The effect of the wind resistance. So the proportional thing
isn't hard enough, but take a look here. This is the error, then the error starts
accumulating over time, so if we somehow, if we're able to collect All of these
errors over time, even though they are very small. Over time, that should be
enough, so that we can use this now accumulated error to push all the way up.
So I wish there was some way of collecting things over time in a plot like this. And,
of course, there. There is, this is something called an integral. So, if we
take the integral over the error we're collecting the error over time and over
time as this errors going to accumulate it's going to give us enough pushing power
to actually overcome the wind resistance. So attempt 4 is a pi. Regulator.
So what I have here is the error at time t. This is my kp, which is my proportional
gain. So this is the p part that we already saw. And now, I'm adding an
integral that is integrating up the error from. The beginning to the current time.
And it's collecting this. And then we have another term here, or another coefficient.
The ki, where I stands for the integral part. So this a pi regulator. And it is
2/3 of. The most common regulator found anywhere in the world, and in fact it's
almos t 2/3 of commercial grade cruise controllers. So if I have a p and an i,
what could possibly be missing to get to all of them? 3/3 instead of just 2/3.
Well, we take a derivative. Right, we have proportion, we have integral, and we have
a derivative. So, why not produce what's called a PID-Regulator? So now we have a
proportional term with a proportional gain. We have an integral part with an
integral gain. And then we have a derivative part with a derivative gain, so
this is. It's an extremely useful controller that shows up a lot. And, in
fact, I'm going to hand, have to hand out a big sweetheart to the PID regulator.
Because it's such an important type of control structure that shows up all the
time. And in fact we're going to get quite good at designing the PID regulators. Now
having said that, I can draw hearts all I want, let's see it in action and see what
it actually does. And if I use just the PI regulator, not even a D component to the
cruise controller, then all of a sudden I get something that's getting up quickly,
nice and slowly, I mean smoothly, to 70. Miles per hour, which is my reference. So
this solves the problem. I don't know parameters, so it's robust. I'm achieving
tracking, because I'm getting to 30 miles per hour. And, I'm stable in the sense
that I didn't crash. So, this seems like a very useful design.