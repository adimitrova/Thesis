welcome back 
this is week five 
in week three we wrote a controller to 
take robot point a to point b 
this called gotogoal controller 
in week four we designed a controller 
that avoids obstacles 
so, we want to this week is 
combine two 
so that robot drive 
point in world to 
point in world without 
colliding obstacles 
way that going to that is 
to arbitrate 
between gotogoal avoidobstacle 
controller 
that really means, think 
we 
combine two so that we make 
right decision 
we be, we avoiding 
obstacles 
we going to goal 
so two techniques that going to 
using is blending hard switching 
in blending going to is 
going to 
create a new controller combines 
gotogoal controller 
avoidobstacle controller 
also going to test is 
switching between gotogoal 
avoidobstacle controller 
so well either run gotogoal 
controller 
well run avoidobstacle 
controller, well 
switch back forth depending whether 
robot is close to an obstacle 
going to a third 
experiment, is 
to use blended controller an 
intermediary between two 
so going to go to goal 
away 
obstacles, if getting close 
to obstacles, well switch to blended 
controller 
if within a dangerous distance 
obstacle, 
well switch to intermed, 
avoidobstacles controller 
so, we we, we, 
we blend 
going to is create one 
single controller that 
well is first compute 
gotogoal vector is u 
gtg, going to compute 
obstacle avoidance vector, u ao 
we will know to compute 
previous weeks 
we want to is we want to 
combine two in way 
and, one way to combine two is to 
this in a linear fashion 
so, im going to is take a 
fraction obstacleavoidance vector 
take another fraction 
gotogoal vector add 
together 
i get is this vector 
u ao gotogoal 
so so this is a combination two 
vectors 
this vector will point us in 
direction that is somewhat in 
direction goal, somewhat in 
direction away obstacle 
i really want to point here 
too, is that im 
using u ao,n, that denotes that 
fact that im using normalized version 

vector, thats nothing but, taking 
vector 
dividing magnitude 
vector 
that way you get, a vector thats 
a, a unit length rather 
arbitrary length 
that allows us to if we take 
normalized 
version obstacle avoidance vector 
add to normalized 
versions gotogoal vector 
we get an equal balancing two 
vectors 
rather to worry 
respective magnitude is 
hardswitching is going to work in a 
little bit different way 
going to is, going to 
use one controller a time 
so, example, is like i said, if 
close 
to obstacle, going to want to 
obstacle avoidance 
but, if clear obstacle, 
going to want to gotogoal 
so, if away obstacle, use 
gotogoal vector 
if close to an obstacle, use 
obstacle avoidance vector 
way going to this is 
going to make 
a decision close robot is to 
the, to, to an obstacle 
so example, if one infrared 
sensors robot 
senses a distance less say, 
centimeters, 
we might want to switch to avoid 
obstacles 
whereas if greater, a 
distance greater 
away from, centimeters away 

obstacle we go, we safe we 
go ahead do, go to goal 
last one is to, is to use 
gotogoal if 
distance away obstacle, if 
getting closer going to switch 
to combined blended version 
vector controller 
and, then, if close to 
obstacle, if unsafe robot 
to do, worrying to go to, 
worrying going to goal 
going to switch to avoid 
obstacles 
that way going to ensure that 

definitely going to slam 
obstacles 
now, logic deciding 
controller to 
use is going to end in supervisor 
supervisor really considers 
controller to state 
supervisor switch between 
states 
means switching between 
different controllers 
so, going to three different 
controllers 
and, kind going back to week three, an 
example this is if you look 
at, ex, execute function 
supervisor qb supervisor dot m, you 
may, might seen that i a 
statement that says switch to state stop 
this means that im switching 
go, gotogoal controller that 
we using that time switching 
to stop controller 
stop controller is nothing a 
controller that 
sets linear angular velocity 
robot to 
now, we, 
we also a condition we wanted to 
switch 
to start, to stop controller 
gotogoal controller 
that condition that robot 
goal 
so, the, checkevent function, 
did, 
is looked at, well, is this condition, 
atgoal, true, 
true whenever goal 
whenever 
robot within a distance dgoal 
goal location 
so that, that statement becomes true, 
means that we 
switched stop controller 
gotogoal controller 
that a very, simple state 
machine 
said was, that we start 
in gotogoal state, using 
that controller 
close enough to the, 
to 
goal location, we switch to 
state 
is stop state corresponds 
to stop controller 
very, simple 
going to to this week 
is going to 
a little bit complicated 
heres one example a state machine 
that you could implement using three 
controllers 
actually, four controllers 
going to start 
gotogoal 
going to assume that 
robot starts somewhere 
going to near an obstacle 
wants to go to goal 
then, if, we obstacle, so 
meaning that distance 
close to obstacle, going to 
switch blended controller 
is ao gotogoal controller 
if we leave obstacle, meaning 

distance farther away 
obstacle, 
going to, condition obstaclecleared 
will become true, 
going to go back to goal 
so, we could, you know 
you imagine that we switch between 
these, whenever either one 
conditions is true 
and, 
this gets a little bit 
complicated that 
if we in state aoandgtg, so if 
we in 
this state right here, robot is 
distance 
less than, dsafe 
so i want, we want, going to 
less dsafe away 
obstacle, this will become 
true 
in that case, happens is that we 
switch 
this state this state right 
here, is avoidobstacles 
this is kind like a last resort 
of, avoiding collision 
obstacles in world 
again, if, if we, if were, end in 
a, if we avoid obstacle we end 
in 
a, a distance that is safely away 
obstacle, 
we switch back to blended 
controller in middle 
so you kind think your, you, 
robot is always in 
state so, in state, takes a 
transition if one is true 
switches to this 
controller 
so ends here 
so if, if this one becomes true, 
switches back to this one 
so you follow the, 
conditions state to state to 
state to figure robot, 
robot is going to 
i said that going to four 
states four controllers 
i also one stopping 
so, if we are, if we 
in this case in gotogoal state, 
in the, in the, in, in this controller, 
end state 
then, cough if atgoal becomes true, 
we go ahead stop 
and, you will probably notice here, 
is that i dont 
a connection states 
to stop state 
so, in this state machine, way 
that robot will 
stop goal location is if in 
gotogoal state 
if executing gotogoal 
controller 
so maybe a better design would to also 
paths 
here, thats at, atgoal 
thing here 
so maybe this a better one 
youre free to design state 
machine 
whichever way you want, so long you 
make 
sure robot doesnt collide 
obstacle 
ends goal stops there 
now, far implementation is 
concerned, files that youll 
interested 
in first all, execute function 
supervisor, so qbsupervisorm 
thats going to implement 
logic state machine, 
actual, well, i say 
implementing 
state machine in execute function 
file interest is going 
to this new controller is 
aoandgtgm 
so thats you implement blended 
controller 
and, course, well also take advantage 
gotogoalm avoidobstaclesm 
in design blended 
controller, also, 
going to switch back forth between 
controllers that weve already 
written in previous weeks 
so, lets see blended controller in 
action in matlab 
see here, im going to go ahead launch 
it, 
course ive already implemented it, 
going to run this 
so, this is blended controller 
im going to click robot follow 

and, you see, robot is avoiding 
obstacles 
also going to go to skull 
location, is , here 
also a condition stopping 
so ive done here is im running the, 
the, blended controller 
if i goal, i stop 
so, this is a success 
now, tips this week are, usual, 
make sure you read 
section corresponding to this weeks 
week five in manual details 
i also encourage you to really experiment 

different ways blending gotogoal 
avoidobstacles 
so i showed you in an earlier slide one 
way combining two vectors together 
im sure you think of, even 
better ways combining 
also experiment 
different state machines 
so theres different, definitely different 
ways combining 
different controllers different 
states conditions 
to construct a state machine 
explore see works 
best you good luck 
blankaudio 
