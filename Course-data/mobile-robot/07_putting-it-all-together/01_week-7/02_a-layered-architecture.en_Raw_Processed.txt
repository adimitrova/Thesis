we saw that one remaining challenge 
is, we actually make real 
robot a model real robot, 
unicyle model, behave act like 
simpler model x dot is equal to u, 
that we used we designed 
navigation architecture 
we really a problem we 
used simplest possible model, 
x dot equal to u, basis 
control design 
then, we started switching between go 
to goal, follow wall, follow wall 
counterclockwise avoid obstacles so 
forth navigation architecture we 
ended is this, weve seen a 
couple times now, rather messylooking 
hybrid system 
now, we need to is somehow come 
a way making real robot 
relevant this model relevant to 
real robot 

we would like also to this in a 
way that we dont to worry much 
kind robot is that 
using we want this navigation 
architecture to relevant 
differential drive robots wheel 
robots snake robots flying 
quadrotors 
so, question is, we this 
standard way approaching this 
problem is to produce a layered 
architecture, you different 
levels abstraction so, in todays 
lecture, im going to talk 
standard layers that people think 
build architectures highlevel 
architectures robotic systems 
well, standard canonical way 
in people approach this is to 
three levels borrowing terms 
military tactical literature people 
typically talk a strategic level 
operational level a tactical 
level 
so, strategic level is high level 
we go recall, instance, 
that we go to golal behaviors, 
we a goal point, well, 
that goal point come decided 
that thats reasonable 
well, that happens strategic 
level, high level decisions 
made 
operational level, youre 
trying to figure out, okay, i know that 
there is a goal point somewhere 
there, i go meaning, this 
is a short term, lowlevel planning 
problem in many ways, we think 
x dot equal to u model to live 
operational level 
then, we lowest level, 
tactical level, asks, well, okay, i 
know that i want to go this way 
i actually that 
i snake robot, a snake go in 
this direction i a differential 
drive mobile robot, 
a unicycle, i actually go in this 
direction so, question mapping x 
dot equal to u onto real robot is a 
question moving in between two 
levels layers in architecture 
while, if you want to slightly less 
militaristic, 
which, maybe we we call 
highest level a highlevel planning 
level 
we want to plan intermediary 
goal points really 
then, lowlevel planning thats 
question direction to move 
inbetween goal points 
execution level that we 
previously called tactical level, 
a matter we actually 
execute this we make robot 
is that we want to i 
point that highest level, 
we havent touched in this course 
in fact, we assumed that someone 
clever designed a, an ai, 
artificial intelligence algorithm 
somehow producing correct goal 
points 
then, lowlevel, well, thats 
navigation architecture sits 
thats assuming that x dot is 
equal to u, really tells robot, 
if im here, this is x, u is really 
going to be, this is direction in 
i would like to move 
so, navigation architecture weve 
seen really sits squarely 
lowlevel planning layer 
then, course execution level 
well, one thing we is simply say, 
here is actual system 
lets say x dot is, oh, lets, lets say, 
a complicated nonlinear system 
this is a slithering robot, that every 
then, fly 
i dont know to build that, if i 
did, thats this system would 
now, i would like to follow, lets 
say, this reference 
this reference is generated if x 
dot is equal to u 
well, this is simply r, right, a 
reference signal 
we seen repeatedly to design 
controllers making systems, general 
systems, track reference signals 
so, execution problem be, really 
becomes a question you track 
reference signals well, we kind know 
to this, least linear 
systems, so that seems rather promising, 
far i can, 
i tell 
okay, lets discuss levels a little 
bit 
highlevel, like i said, 
really part the, course, there 
many, many different ways in 
people think to produce 
highlevel plans 
typically, you somehow discretize 
world a graph structure somehow, 
a kind grid structure you 
use dijkstras algorithm searching 
graphs, something called dynamic 
programming 
there specialized robotic 
planning algorithms, something called a, 
a version a called d, is a 
dynamic version a, something 
called rrts, rapidly exploring randomized 
trees 
methods generating 
intermediary waypoints 
this big picture here, youre seeing 
underneath is, this is kind 
maps that we produce highlevel 
kind plans maps we produce 
highlevel at, building this 
autonomous selfdriving car 
so, this map clearly doesnt tell us 
car drive tells us 
we want to go 
things that we want to go to connect 
so, 
i want to say this is if youre 
interested in probing 
comes to highlevel methods this six 
different methods good places to 
start if you want to to learn 
highlevel methods 
okay, lowlevel, well, tada, we already 
know to this 
simplest thing is to assume a 
simple model, in case, weve said x 
dot is equal to u, we simply go 
to work 
again, if i that, model, x dot is 
equal u model, 
is going to produce a trajectory that we 
would like actual robot to follow 
so, this trajectory becomes plan, 
lowlevel plan that will take us, lets 
say, that here is a, a goal point 
here an obstacle 
well, this lowlevel plan will tell us 
we go avoiding 
obstacle going to goal, 
doesnt tell us to achieve it, 
leaves us execution level 
you see, this is video that 
ive shown selfdriving car 
that is trying to to drive around in 
world 
well, car, a unicycle, 
almost a unicycle 
but, if trying to build a 
navigation system explicitly a 
unicycle, going to work, 
going to complex 
so, we to in order to make 
this car actually drive, well, plan 
a highlevel, a lowlevel, 
make car execute trajectory 
so, instance here, youre seeing 
car overtaking an obstacle whats 
going here is that we a lowlevel 
planner thats telling roughly to 

you see, car overshoots a 
little bit this is due to fact 
that execution level reference 
trajectory isnt perfect 
okay, so, weve arrived is a 
layered architecture highest 
level, generating sequences 
intermediary waypoints 
well, waypoints fed 
plan level lowlevel plan level 
navigation architecture 
generates reference trajectories 
well, reference trajectories 
fed actual nonlinear 
systems 
actual dynamics u now, well, 
going to function this state, 
r, r is reference 
trajectory comes actual 
trajectory, actual control signals 
that will running robot 
so, i want to in next lecture 
is take this highlevel view a layered 
architecture robots apply to 
unknown differential drive 
mobile robots, in general 
so thats 
