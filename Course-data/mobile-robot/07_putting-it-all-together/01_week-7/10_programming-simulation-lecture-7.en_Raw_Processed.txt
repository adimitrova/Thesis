hello welcome to seventh final 
programming simulation lecture 
this week, programming assignment 
comes to grand finale, we 
will an ro, quickbot navigate to 
complicated environment yet 
makes this different 
navigation, 
week five, is that we need to 
answer three new questions 
this week 
first one is, we need to keep 
track progress that robot is 
making 
last in week five, i talked this 
problem 
that robot get trapped inside 
an obstacle 
if does, doesnt, doesnt 
know that making progress 
going to try to keep going to 
the, to goal, itll 
avoid obstacle, try to get back to 
goal, itll go 
itll never make progress to the, 
towards goal 
so this week, well actually think about, 
is robot making progress 
if robot is making progress, 
maybe 
we should, you know, use controller 
week six 
follow wall either to right 
to left 
so to make a decision 
only, we 
start following wall in 
direction, right or, to left 

finally 
we also need to revisit final 
inaudible finite state machine week 
five that one will longer cut 
for, this weeks obstacle course 
going to to, to really think 
if 
in a certain state certain event 
becomes true 
to states we switch in 
order to rogo, 
robot progress towards ultimate goal, 
is to reach goal location 
course, dont collide 
obstacles, 
that would bad 
quickbot 
so, implementation this week 
will happen in 
supervisor, so going to 
worrying one file this week 
thats mainly past 
seven weeks six weeks weve written 
necessary controllers that, 
that we need to, to solve this problem 
unlike previous weeks im actually 
going to start demo this 
week 
to show you looks like 
works 
so lets see in action 
im going to go ahead launch 
simulator 
hit play 
going to click robot 
try to get it, oop, there we go 
you see 
here is first robot is 
navigating this obstacle that 
trapped inside following 
wall 
nicely, boundary obstacle 
nicely, 
going to stick to wall until 
decides, hey, im going to peel 
go towards goal location, 

goal location is somewhere around this 
area 
youll see robot made 
eh, in next couple slides, ill go 
exactly decisions made 
to get to this point 
beautiful colored lines actually mean 
one thing, here in map land 
command window, you 
see that i a few f, f statements 

robot switching between a state, so i 
actually see that i in ao 
go to goal, i switched to avoid 
obstacles, back ao to ao 
go to goal, to avoid obstacles, 
eventually, theres also a follow wall 
in here 
so so forth 
lets get back to slides 
so 
i talked progression 
we need progression if we 
to 
use controller week five i said 
we going to 
get stuck thats the, the, 
reason that is 
that robot is first trying to 
go to goal 
so 
right here i goal to goal vector 
that ugtg thats pointing 
towards this goal 
so you imagine this extends to 
here 
so is goal to goal vector 
already familiar that one 
i also 
obstacle avoidance vector 
perhaps im either going truly, go to 
goal, perhaps im something in 
between 
so, point is that im trying, that 
robot is 
really trying to drive in this 
direction, in this general direction 
so wants to go to this, to this goal 
a blocked 
by, by, this obstacle to 
somehow navigate around 
now, 
blankaudio 
respect to progression, i 
want to is i want 
to keep track close robot gets 
to goal 
so, first, in previous slide robot 
this 
location, in this slide 
progressed to this location 
actually gotten closer to 
goal 

reason gotten closer to 
goes 
goal, this distance to goal is 
larger this distance to goal 
way that we update 
progress is calling function, 
setprogresspoint right here 
so this function well call well 
make, well 
say, well, you know, robot made 
progress, 
going to save progress 
always going to 
store closest ever gotten to 
goal location 
reason that we this is 
we want to 
check a certain event, this event is 
called progress made 
progress made to checks whether 
current location current distance 
robot to goal location is shorter 
last setprogress point 
if so, returns true otherwise 
returns 
false going to use this to check 
whether you 
know robot made progress towards 
goal 
so, 
we saw in we saw in 
simulation, that robots started 
somewhere here, 
drove in this direction 
started avoiding goals gotten 
to this point 
so kind follow this general 
trajectory, 
gone here, probably 
going 
go to goal, here, 
avoid obstacle, 
here, gets to point 
says well, 
progress made 
so, robots made any, made 
progress 
so, time to make a decision 
and, decision that robot makes is 
that 
longer progressing, going to try to 
switch follow wall behavior 
an important question is, 
direction 
we follow obstacle left 
obstacle right side 
going to make this decision 
based three vectors 
going to make this decision 
based 
goal to goal vector points 
towards goal 
so this is pointing towards goal 
location 
obstacle avoidance vector, is 
pointing robot away 
obstacles 
going to inspect follow 
wall vector 
that we computed last week 
in the, right side left 
side robots 
so going to look four 
vectors make decision 
whether we need, we follow an 
obstacle to left 
to right 
thats, thats we determine 
follow wall direction robot 
way going to this is 
going to 
ask questions, is this vector, right 
here, follow wall, 
this is l denotes that its, 
respect to 
left, is this between vectors 
obstacle ordnance inaudible 
going to ask that question 
also, time 
going to ask 
is this vector 
u follow wall comma r 
between u ao ugtg 
course you argue 
in this picture, well theyre both, right 
this is one, this is between 
blankaudio 
this one right here is, this vector is 
between two vectors 
this side things, whereas this 
vector right here is 
between two 
thoughtside things 
really, requirement is going to 
for, is between two vectors 
if a is, going to look 
side angle between u go 
to goal 
u a o, so this angle between is 
less pi 
so less degrees, so we say 
is a vector between two vectors 
to between side 

less than, probably two 
less pi apart 
blankaudio 
reason im setting in this 
way is 
that allows us to a little bit 
linear algebra 
little bit linear algebra that 
going to is, is this following 
equation 
so i here is i go to 
goal vector 
i obstacle avoidance vector 
i scalar parameters 
sigma one 
sigma two 
this side i follow wall 
vector that i care 
in this case, i pick left side, 
this might well right side 
condition is that going to 
solve this linear equation two 
parameters 
so 
blankaudio 
is this vector equal to oh, im 
so sorry 
is this scalar equal to 
this second scaler 
we compute this you know, 
you to rearrange this a little 
bit 
going to is, say, the, 

condition that going to come 
is, follows 
if 
sigma is greater , 
sigma is greater 
so if theyre 
positive, that implies that if we 
two vectors, ugtg uao, 

this vector ufw,of l is 
between two 
so side 
its, this side between two, 
this, this angle right 
here is less pi, thats going to 
condition 
i 
posted pdfs online, in 
announcement that go this exactly 
works 
this linear algebra works, 
makes sense 
ill and, then, notes, 
i 
diagrams a lot 
detailed 
math, youll able to follow along 
exactly 
this little piece linear algebra 
you 
now, 
point robot is, robot you 
know follows the, 
follows the, wall, obstacle, so 
originally here 
here drove around 
drove around 
this the, this best 
progress 
we made point, so right here 
follows around, follows 
around way until gets to this 
point right here 
this point, says look this 
distance here, 
here to goal, is less 
distance here to here to goal 
if thats case, i longer 
need to slide, sliding refers to that 
condition that i talked in 
previous slide we one either 
sliding 
left one sliding right, in this 
case, sliding left 
so if this condition is longer 
true, 
isnt the, you 
see right 
here vectors longer between 
inaudible goal 
obstacle points vector, 
progress made 
if two conditions hold 
we go switch 
back to go to goal robot go 
ahead make way 
to goal location doesnt, 
no, longer to follow this obstacle 
right here 
now, like i said, 
state machine, finite state machine 
week five is longer sufficient 
this particular problem so youre 
going to to design a new one 
design is to you, here 
a few pointers you probably 
think in finite state machine 
first is, usual 
if robot is goal, you 
stop 
useful that first 
thing that you check in finite 
state machine, you dont want to 
execute anything else youre 
goal 
youre goal robot is done 

task going to stay in 
stopped state 
also, if robot get an unsafe 
distance 
to obstacle, we immediately want to 
switch to avoid obstacles, 
avoid obstacles really is last 
ditch effort to 
make sure that a robot doesnt crash with, 
obstacle 
so usually a good idea to that 
in there, to make sure that there 
collisions 

also, you want to condition that 
if you going to goal maybe 
youre obstacle inaudible 
inaudible goal 
together, goal seeking 
behaviors 
youre longer making progress 
you 
want to switch to either to follow wall 
you 
want to that based condition 
whether youre 
sliding, youre suppose to slide left 
slide right 
i talked in previous 
slides make sure you that in 
there 
fourth one is if you get around 
obstacle there will a point 
youre going 
to start making progress toward 
goal location 
you will probably lee, longer need 
to slide 
along wall in order to make progress, 
so if 
tho, conditions 
are, end 
true, you go ahead 
switch back 
to goalseeking behavior, so is 
either go to goal, 
i usually like to is if, if im 
close to an obstacle, i typically 

follow behavior i first switch 
avoid obstacles go 
to goal i switch pure go to 
goal behavior 
now, tips week seven 
again, read manual 
details 
also read handouts, the, 
additional handouts that 
im going to posting that explains 
linear algebra 
that 
really more, even 
important one is 
you design this finite state machine, 
fairly complicated 
i like to 
is i like to get a piece paper 
a pen i like to draw finite state 
machine 
really think 
states that robot 
in, events that 
take state to state, 
construct 
paper you even start coding 

you, you is you 
take piece paper, you 
pretend youre robot you go 
step 
and, see if you make 
way around obstacle to 
goal location 

that, you implement you 
test 
youll always, always this 
piece paper 
to go back forth make sure, hey is 
robot actually i designed 
funded state 
machine id de, id design 
finite state machine 
is that, is not, that 
really makes debugging this weeks 
programming assignment much easier 
usually i would end video lecture 
here, 
i one extra special slide you 
this week 
thats whats next 
well, is last one, 
simulator 
documentation will available outside 
this course following url 
so project continues to lives 
this course, 
time if you want to get new updates 
to simulator 
if you want to check in 
new robots added to 
simulator there, 
there, there new sensors, if theres 
maybe a camera sensors, or, 
whatever may be, you go to this url, 

youll sent to a webpage therell 
updates 
there also will links to a github 
repository 
point this github repository is 
everybody to access to share 
improvement 
using improvements either, hey, 
this is a way better way 
example, limiting error between 
minus pi pi 
i want to add that to simulator 
you go ahead that there 
you also add new robots, so if you 
wanted to have, example, a robot 
thats like 
a car you add that to simulator 
that become part 
official project 
thing sensors 
anything else that you think 
of, so i would really like to encourage 
you to consider if 
youre making improvements adding 
anything to simulator, 
contribute back to project 
itll make everything better 
future students future users 

simulator will really, really benefit 
improvements 
last thing is just, thank you 
much 
hard work participation 
in programming assignments 
ive seen really exciting discussions 
forums, makes 
really, really happy privileged to 
witness everybody grow 
seasoned robotics experts 
course this seven weeks 
that, thank you much 
goodbye 
blankaudio 
