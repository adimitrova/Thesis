outcome last handful 
lectures that we really use a 
layered architecture to make robots 
act like a simpler system 
like x dot u, in case 
key idea to plan using 
simple dynamics 
track using clever 
controller 
we saw last time we could 
use a pid regulator, instance for, 
controlling heading robot, 
simply set velocity robot 
equal to magnitude planned 
velocity, u 
well, today, i want to discuss another 
twist to this theme 
in fact, i want to even clever 
there is a particularly eloquent 
cute way you think unicycles 
in general im a big fan 
clever tricks sake clever 
tricks, differential drive 
mobile robots so common 
we know that unicycles model 
well, this trick becomes 
a piece mathematical curiosity, 
becomes an effective way thinking 
a large, a large rich class 
mobile robots 
so, instead tracking, 
going to transform unicycle dynamics 
so recall that we position xy, 
we heading phi, we 
dynamics seen here 
well, typically, weve seen so far 
is, we want robot to slam 
things, we want robot to end 
top goal points we want robot to 
folow walls 
we dont particularly care way 
pointing, so first thing going 
to is say, you know lets 
pretend that we dont worry 
orientation whatsoever 
well, we still a rather awkward 
looking nonlinear differential equation 
let, now, pick another point 
lets pick x, y, you 
remember, really point right in 
between wheels 
differentialdrive mobile robot 
if we picked another point, instead 
lets pick this point 
red point here 
lets say, that distance between, 
red point black point 
thats, thats distance l, l 
is small number 
would happen if we looked this 
new point, instead well, lets place 
new point x tilde y tilde next 
tilde is simply x l cosine phi 
simple geometry 
y tilde is y l sine phi 
where, again, l is distance removing 
point along heading of, 
robot 
well, lets see dynamics this 
new point 
tilde point actually looks like 
well, this is old dynamics this x 
y phata actually behaves 
this is new point now, we 
need to is put dots tildes to 
see 
time derivatives actually 
look like well, so complicated 
x till dot, well, x dot 
time derivative this thing, and, 
time derivative cosine phi, 
remember phi is a function t, if i 
take ddt this thing, 
i get, is, i get phi dot sin 
phi 
well, thats we here, x tilde 
dot, is x dot l phi dot sin phi, 
similarly y, tilde dot 
alright, this still doesnt seem that 
helpful, to completely honest, so lets 
simplify this a little bit 
well, first all, i know x dot is 
this thing here, so instead that, 
im plugging in v cosine phi 
i also know phi dot is 
its, omega 
so, i end a slightly, less 
scarylooking expression 
and, we thing y 
tilde dot 
well okay, this lead us well, 
lets assume a second that we 
control this new point directly 
that this new point is indeed, point 
that we called x dot to u, 
a way generating reference 
velocities 
lets assume that we actually 
immediately control this new point 
would that tell us well, x tilde 
dot you recall, given this 
mouthful an expression 
well, lets set this equal to u is 
desired velocity in x direction 
similarly, we set y tilde dot u 
now, we need to least, well i 
say we need to do, i dont know 
if we 
but, we would like to is actually 
solve this equation respect to v 
omega 
because, if we that, we would relate 
actual velocities unicycle to 
u u velocities, 
planned velocities 
so lets see if we that 
well first thing we is we pull 
cosine sine terms 
so we get that cosine v sine l 
omega well thats that thing, thats 
equal to u 
similarly y tilde dot, 
u dot, sorry, u equation 
i dont know, this equation still looks a 
little hairy but, you hopefully 
recall, this matrix right here is a 
rather nice matrix 
is, in fact, a rotation matrix 
is taking a vector 
rotating theta degrees 
actually, rotating phi degrees, 
is a well behaved well 
understood matrix, 
okay 
i dont particularly like l there, 
l is part i would 
like 
i would like v omega and, l 
so, i do, is i rewrite this 
thing as, a matrix, a diagonal matrix, 
one first diagonal, l 
second diagonal, simply times v, 
omega 
if i that, 
i get following expression 
rotation matrix phi, sorry, yeah, phi, 
this matrix, v omega 
well, invertable 
is inverse rotation 
matrix well, rotation matrix rotates 
something phi degrees 
well, inverse would to rotate 
back, right youre back you 
started 
thats 
so, r inverse phi always exists 
corresponds to rotating back five 
degrees 
so, we invert this matrix easily 
well, this is a diagonal matrix, 
inverse this thing is simply 
inverse diagonal, l 
so inverse this thing is also 
trivial 
that means that i actually solve 
directly v omega, problem 
questions asked, tracking, 
approximation, bam, i get right 
velocities 
so if i low level plan producing 
u u, i transform that 
v omega directly 
this seems almost good to 
true, is good to true, 
remember actually 
making x y behave perfectly, making 
this new point that we call x tilde y 
tilde, making that point behave 
perfectly 
we l, that tells us far 
away we are, making l small, 
getting closer to x y, so you 
practice 
you pick l tiny you go to work 
so this mean, means that 
we a planner we used 
complicated navigation algorithm to spid 
u u right we a 
tracker in case we use pid 
tracker heading simply set 
velocity equal to magnitude u 
that we got v omega 
well now, we dont to deal 
trackers 
weve actually replaced second part 
a transformation unicycle 
simply saying that v omega, 
matrices u, u 
again, matrices are, 
particularly complicated to compute 
this, is simply rotation matrix 
phi course we 
this is one, easy to compute, 
one 
is something that we decide, so 
we put here, this is l, l 
small so l large 
number, right larger this number 
becomes closer tilde point 
actual point approach 
i put a little warning though 
that if you make this number large, 
you get a behavior robot 
starts turning quite a bit, this 
going to hit omega directly 
okay but, this gives us a direct 
transformation, instead a tracker, to 
produce desired velocities 
reason i like this trick, 
this trick shouldnt thought 
simply, an interesting little curiosity 
is kind interesting is that 
so many robots differential drive 
robots, this transformation applies 
to them, 
mapped onto unicycle dynamics 
so, that takes care of, we 
actually go lowlevel plans 
to executable, desired velocities 
differential drive mobile robots 
