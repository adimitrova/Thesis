missing piece navigation 
puzzle follow walls 
we it, in sense that we 
know to move along boundaries 
obstacles 
we also know direction to go in 
that given this sliding condition 
one thing we dont know though is 
to stop, take a look here 
first all, this is follow wall, 
go to goal is taking 
sliding tells that, you know what, i 
move in this direction 
lets look this point 
go to goal wants to go there 
avoid obstacle wants to go there 
if i draw this a little better, 
pointing in completely opposite 
directions 
if im sliding, i longer 
anywhere to go 
if im, instead using, in this case, r 
negative pi times u avoid 
obstacle, 
thats going to keep going 
in a counterclockwise, 
sorry, in a clockwise manner 
so thats this is better behavior 
to use, even though sliding is useful to 
go, to know direction to start in 
now, if i that, im happily going 
like this, 
check this point 
go to goal wants to go there 
avoid obstacle wants to go there 
we longer in conflict 
comes to switching conditions so 
kind sliding condition is going to 
fail here 
im simply going to return to go to goal 
im going to keep 
this im going to 
get stuck in this corner 
so, sliding is answering to stop 
sliding to stop following walls 
instead, we need condition 
this 
here is needs to happen 
first all, we need to cough excuse 
me, made enough progress 
that means 
means that if im switching here im 
kind of, i dont want to stop here, here, 
here in fact, 
i stop im closer to goal 
i i started sliding 
otherwise, you indeed end 
in a situation youre moving 
successively way 
goal basically youre switching 
way away you want to 
so, you want to insure that youre closer 
to goal end maneuver 
you you began 
is that you a clear shot 
to goal in sense 
meaning that you actually move 
towards 
cough excuse 
clear shot doesnt necessarily mean that 
there obstacles 
becuase, lets say that goal is there 
heres a giant obstacle that i 
havent seen yet 
i dont know that, 
practical purpose, i somehow a clear 
shot to, to goal 
so, we need to is understand 
conditions mean 
okay, lets say, that i started following 
walls time tau 
so, lets say that im here, x time 
tau, thats i 
well, progress, sufficient progress 
simply say that current position, 
this is current position x current, 
needs to closer to goal 
i i started follow 
wall 
so, if i draw a circle here, this 
distance around the, goal, 
lets pretend that this a perfect 
circle, then, point here is going to 
closer to goal i 
started 
so, here positions im allowed 
to stop following walls 
thats enough 
we needed this notion clear shot also 
clear shot simply is this 
condition here, 
if im sitting here, follow 
wall, sorry, go to goal wants to take 
in that direction 
avoid obstacle wants to take in this 
direction 
we already know to check whether 
somehow in agreement 
that means simply is that this 
angle, absolute value this angle 
less pi, 
we simply encode this inner 
product condition, simply take 
compute u avoid obstacle transpose u go 
to goal check if thats positive, 
we a clear shot 
we dont really know 
obstacles least we 
notion a, a clear shot 
so, two pieces we need to 
determine time to longer move 
along boundary 
okay 
now, we everything 
heres robot 
happily going towards a goal, 
right, thats, thats 
then, you know what, encounters an 
obstacle 
so now, xo sorry, xxo is equal to delta 
so, im delta apart 
i this directionality condition, 
right 
so, im going to check if this inner 
product is positive 
if is, i go clockwise 
similarly i a counterclockwise 
check 
so, if this condition is satisfied, i 
go counterclockwise 
so now, i know time to 
move either in a clockwise 
counterclockwise direction 
well, conceivable real 
world isnt theoretical 
world that, im sliding, i end 
closer to obstacle that i wanted to 

lets say that distance 
obstacle is strictly less delta, 
i shouldnt slide anymore 
i let dedicated, custombuilt 
avoid obstacle behavior make sure we 
dont slam, we dont slam things 
so, you always wrap a pure avoid obstacle 
behavouir in there safety reasons, in 
order to guarantee that you dont hit 
things 
remember that actually looking 
guarantees a smooth ride 
this is way cake 
eating it, rarely works, 
in this case, you actually 
okay, one thing we need to remember 
though is, we needed to know close we 
to wall, obstacle 
time we started following 
so, we this thing that we said, let 
tau time next switch well, 
im going to something that i call d 
sub tau, is distance 
i switch 
im going to reset, remember we 
talked resets, im going to reset d 
sub tau to distance to goal 
time i started to follow walls 
so, here resets, right now, im 
going to stop sliding stop following 
walls, well i wrote one guard, 
condition matter 
coming 
this condition says, we 
made enough progress 
so, this needs to happen we need to 
a clear shot, is this 
condition, okay 
is beginning to look a little a little 
messy to honest, regardless 
which, we able to write 
we know things 
now, this isnt quite work yet 
right now, possible to avoid 
obstacles forever so we need way 
stopping this thing way to stop 
is, you know what, this looks like a 
huge mess, right 
this simply is sliding condition 
following walls in a clockwise 
direction so condition 
here 
now, since im running space, 
i to write right top 
arrow 
i also need resets that i 
here so condition 
similarly, if, well, first all, 
this condition is satisfied, i 
counterclockwise i need to reset this 
distance 
so, condition 
reset 
so now, i basically everything 
i want to add one thing 
thats this 
if distance to actual goal is 
less equal to epsilon, 
im done im going to stop 
so, here is a rather messy looking hybrid 
automaton, is quite glorious in 
mess allows us to get 
smooth performance, guarantee 
performance while running in 
smooth way even though looks 
hard, things inherently 
computable actually that 
complicated 
so, im going to is im going to 
take this thing that looks messy, shrink 
down, make look even 
messy, say, this is complete 
navigation system 
i think is quite elegant, to 
completely honest 
now, time to ask you know what, 
elegant, weve done math, we 
know that works, so this we think so, 
really here is 
unfortunate answer to question, 
this work 
nope, doesnt, 
is youre getting a little 
annoyed ive spent 
this time developing this framework 
im claiming doesnt work 
reason doesnt work is is there 
practical considerations to 
take account 
im going to in next 
lecture is actually, make work so that 
worthwhile we take this 
little messylooking hybrid automaton 
print turn a badge 
that we put clothes 
wherever so we really proud 
fact that work 
that is topic next lecture 
