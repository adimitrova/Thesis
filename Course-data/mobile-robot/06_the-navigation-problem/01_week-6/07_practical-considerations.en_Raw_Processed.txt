outcome last lecture was, in 
sense, quite glorious 
we ended this beautiful hybrid 
atomaton that solves general 
navigation problem 
cool things in 
now, problem is that, we 
solved general navigation problem i 
said, doesnt work 
a kind annoying to 
completely honest today i want to 
make work dealing 
practical considerations that we really 
to, to think 
first is that we this notion 
xo everywhere 
now, hard to see, this is 
distance 
point obstacle is 
well, obstacles arent points 
entirely, clear we 
translate these, real world 
obstacles that arent points, 
something that we deal here 
is i call fat guards 
here instance, saying that 
distance to obstacle 
exactly equal to delta 
well never going to exactly to 
delta, sensors noisy 
so we need to is, we need to say, 
you know distance is delta 
epsilon 
so we basically need to fact ta 
fi guards, make larger 
so that instead switching exactly 
distance delta, 
building slack system 
inaudible 
then, i a third bullet here, 
that im calling tweak, tweak, tweak 
point that one, is that, 
even if you dealt non point 
obstacles 
we fat a fi goal, guards 
there parameters 
there things like, cgtg 
is coefficient in front 
goal to goal behavior 
we things like, delta epsilons 
there parameters that 
we chosen 
that, mathematically, theyre fine 
but, in practice, there is way 
fact that you need to test, test, 
test, tweak parameters 
this is, in sense, robotics 
is so hard 
thats, you actually 
transition beautiful 
theoretical design, something that 
works actual robots 
well, lets start obstacles that 
arent points 
green ball is robot, red thingy is 
obstacle, 
a point 
first thing to note is that 
almost actual sensors theyre really 
return points 
point unknown, laser scaners, infrared, 
ultrasonic sensors, measure 
distances to things in certain 
directions 
so, here points that im actually 
detecting this obstacle 
so question is, i actually 
deal this situation 
i one obstacle, i 
one obstacle purpose 
robot lets see, , , , , , 
obstacle points 
so, i points a sudden 
i somehow need to deal 
so i that 
well, we options 
one options is, you know im really 
interested in driving this 
obstacle, so, point in algorithm 
that im going to care about, is simply 
closest obstacle 
in this case, this point, right so, 
im simply going to say that xo is there, 
thats actually bad, a bad 
idea this is supposed to 
straight line 
you avoid obstacle would simply take 
in this direction, straight away 
closest point 
thats bad 
you know what, we this 
information 
dont we take that information 
account a little bit so, another 
option would to, weigh add 
obstacle vectors together, depending 
distances 
right so, here closer, so im going 
to get in this direction 
im kind fo far away so im going to 
get little in that direction 
im going to weigh 
together maybe, get something 
like this 
thats better 
so, there different ways weighing 

lets say that i get weighed 
scaled obstacle vectors 
obstacle avoidance is simply 
going to scaled version, 
weighted scaled version that 
so this would be, u avoid obstacle 
you need to do, to find x 
obstacle we need, is to backtrack 
this thing, say that this point here, 
would x o 
x o is necessarily a point that 
measuring 
scaled weighted version 
points but, this is a much 
better way doingnow last thing 
i point this you know , 
you weigh things depending 
distancebut you also 
weigh depending direction 
travel, cough excuse i 
mean thatwell you know what, if im 
really way in this direction 
noise 
i care obstacles behind 
i care that 
i really shouldnt right so, i 
really want to is weigh also based 
direction travel in that 
case i would get a weighted obstacle 
avoidance vector like this 
so this is almost a i would say best 
way 
thats in fact going to 

now, last thing i want to point out, 
though, you know, theres another option 
i able to collect 
points im getting, building a map it, 
so here is obstacle service 
then, you know instead 
dealing questions, like you 
know, sliding, snow sliding 
maybe i can, plan way around this 
obstacle 
now, i want to point , this, in 
this class, we dont say things like 
bestest, 
grammatical nonsense 
we stay grammatically correct 
things, means that ultra is 
i really want to say is that 
building maps is an entirely different 
type topic, that we 
learning in this class is still much 
applicable 
so, i want to point that there 
ways building maps 
planning in maps youre 
goal to goal behavior, instance, 
wouldnt aim goal point aim 
following planned path based 
obstacle maps 
so want to point option 
really part going to 
pursue in, in class 
last thing second 
thing i said is we need to allow fat 
guards this is sensor is 
perfect, actuator is perfect 
robots arent prefect, right so if i 
this navigation hybrid 
automaton, im f 
reason until g is negative, im 
f 
g becomes positive im 
f 
this is sufficiently fat 
i may end actually switching a 
lot, i may c note instance i 
may but, point is that i 
really is replace guys 
this, 
right 
instead saying g less , i 
say g less negative epsilon 
instead saying g positive, i 
say g greater epsilon 
so instead this switching 
surface, im actually building this 
little corridor here im saying, 
im going to use f until ive gone 
entire corridor so heres 
f 
im going to use f until ive 
gone that corridor 
this factification reduces 
chattering also allows us to 
switch exactly delta away 
an ob, obstacle in somewhere 
delta plus minus epsilon 
so always build fat guards a practical 
precaution fact that de, 
deployed real world is clean 
theoretical world powerpoint 
slides 
then, like i said, final advice, 
comes to practical 
considerations, is even though you 
built a beautiful hybrid automotan, 
youve thought everything, you 
dealt practical considerations 
that you deal point obstacles non 
point obstacles susceptible points 
since unknown 
you using sufficiently unknown 
guards, you still to tweak, tweak, 
tweak 
you to test parameters 
you to 
like i said, this is makes robotics 
hard a little frustrating 
times, end it, also 
makes satisfying you get 
right 
so im going to in next 
lecture is talk you to you 

instead, we going to is to 
actually going to build this system that 
we tweak parameters until we 
satisfied glorious, great, 
unifying navigation system 
