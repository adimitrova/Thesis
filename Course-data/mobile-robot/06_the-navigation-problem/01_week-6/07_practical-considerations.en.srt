1
00:00:00,012 --> 00:00:04,307
The outcome of the last lecture was, in 
some sense, quite glorious. 

2
00:00:04,307 --> 00:00:08,807
We ended up with this beautiful hybrid 
atomaton that solves the general 

3
00:00:08,807 --> 00:00:12,562
navigation problem. 
And it had all these cool things in it. 

4
00:00:12,562 --> 00:00:17,582
Now, the problem is that, after we have 
solved the general navigation problem i 

5
00:00:17,582 --> 00:00:21,340
said, but it doesn't work. 
It was a kind of annoying to be 

6
00:00:21,340 --> 00:00:26,445
completely honest and today I want to 
make it work by dealing with some of the 

7
00:00:26,445 --> 00:00:30,705
practical considerations that we really 
have to, to think about. 

8
00:00:30,705 --> 00:00:34,511
the first is that we have this notion of 
XO everywhere. 

9
00:00:34,511 --> 00:00:37,752
Now, its hard to see, but this is the 
distance. 

10
00:00:37,752 --> 00:00:41,854
Or the point where the obstacle is. 
Well, obstacles aren't points. 

11
00:00:41,854 --> 00:00:46,157
And it's not entirely, clear how we 
should translate these, real world 

12
00:00:46,157 --> 00:00:50,594
obstacles that aren't points, into 
something that we can deal with here. 

13
00:00:50,594 --> 00:00:55,240
The other is what I call fat guards. 
Here for instance, we're saying that the 

14
00:00:55,240 --> 00:00:58,798
distance to the obstacle should be 
exactly equal to delta. 

15
00:00:58,798 --> 00:01:02,756
Well We're never going to be exactly = to 
delta, because sensors are noisy. 

16
00:01:02,756 --> 00:01:06,964
So what we need to do is, we need to say, 
you know what? The distance is delta + 

17
00:01:06,964 --> 00:01:09,717
-epsilon. 
So we basically just need to just fact ta 

18
00:01:09,717 --> 00:01:13,750
fi the guards, make them larger. 
So that instead of switching exactly when 

19
00:01:13,750 --> 00:01:17,862
we're at the distance delta, we're 
building some slack into the system. 

20
00:01:17,862 --> 00:01:21,060
[INAUDIBLE]. 
And then, I have a third bullet here, 

21
00:01:21,060 --> 00:01:25,813
that I'm calling tweak, tweak, tweak. 
And the point with that one, is that, 

22
00:01:25,813 --> 00:01:28,823
even if you have dealt with non point 
obstacles. 

23
00:01:28,823 --> 00:01:32,579
And we have fat a fi our goal, guards. 
There are parameters. 

24
00:01:32,579 --> 00:01:36,887
There are things like, CGTG. 
Which is the coefficient in front of the 

25
00:01:36,887 --> 00:01:41,151
goal to goal behavior. 
We have things like, delta and epsilons. 

26
00:01:41,151 --> 00:01:44,671
And there are all these Parameters that 
we have chosen. 

27
00:01:44,671 --> 00:01:49,886
That, mathematically, they're all fine. 
But, in practice, there is no way out of 

28
00:01:49,886 --> 00:01:54,197
the fact that you need to test, test, 
test, and tweak your parameters. 

29
00:01:54,197 --> 00:01:57,361
And this is, in some sense, why robotics 
is so hard. 

30
00:01:57,361 --> 00:02:01,187
And that's, how do you actually 
transition from your beautiful 

31
00:02:01,187 --> 00:02:05,858
theoretical design, into something that 
works on the actual robots. 

32
00:02:05,858 --> 00:02:09,980
Well, lets start with obstacles that 
aren't points. 

33
00:02:09,980 --> 00:02:14,064
Green ball is the robot, red thingy is 
the obstacle, 

34
00:02:14,064 --> 00:02:18,085
it's not a point. 
Now the first thing to note is that 

35
00:02:18,085 --> 00:02:22,823
almost all actual sensors they're really 
the return points. 

36
00:02:22,823 --> 00:02:29,981
Point [UNKNOWN], laser scaners, Infrared, 
ultrasonic sensors, all of them measure 

37
00:02:29,981 --> 00:02:33,782
distances to things in certain 
directions. 

38
00:02:33,782 --> 00:02:39,816
So, here are the points that I'm actually 
detecting on this obstacle. 

39
00:02:39,816 --> 00:02:45,119
So now the question is, how do I actually 
deal with this situation? 

40
00:02:45,119 --> 00:02:50,395
Where I have not one obstacle, where I 
have one obstacle but for the purpose of 

41
00:02:50,395 --> 00:02:54,341
robot these are let's see, 1, 2, 3, 4, 5, 
6 obstacle points. 

42
00:02:54,341 --> 00:02:59,051
So, I have 6 points all of a sudden. 
Then I somehow need to deal with. 

43
00:02:59,051 --> 00:03:02,317
So how do I do that. 
Well, We have some options. 

44
00:03:02,317 --> 00:03:07,457
One options is, you know what? I'm really 
not interested in driving into this 

45
00:03:07,457 --> 00:03:12,292
obstacle, so, the point in my algorithm 
that I'm going to care about, is simply 

46
00:03:12,292 --> 00:03:16,402
the closest obstacle. 
In this case, it's this point, right? So, 

47
00:03:16,402 --> 00:03:22,239
I'm simply going to say that xo is there, 
that's actually not bad, it's not a bad 

48
00:03:22,239 --> 00:03:26,512
idea at all and then this is supposed to 
be straight line. 

49
00:03:26,512 --> 00:03:32,624
you avoid obstacle would simply take me 
in this direction, just straight away 

50
00:03:32,624 --> 00:03:36,162
from the closest point. 
That's not bad at all. 

51
00:03:36,162 --> 00:03:39,162
But you know what, we have all this other 
information. 

52
00:03:39,162 --> 00:03:43,462
Why don't we take that information into 
account a little bit more? So, another 

53
00:03:43,462 --> 00:03:47,532
option would be to, weigh and add 
obstacle vectors together, depending on 

54
00:03:47,532 --> 00:03:50,292
the distances. 
Right so, here it's closer, so I'm going 

55
00:03:50,292 --> 00:03:54,027
to get more in this direction. 
And I'm kind fo far away so I'm going to 

56
00:03:54,027 --> 00:03:57,327
get little in that direction. 
And then I'm going to weigh these 

57
00:03:57,327 --> 00:04:00,302
together and maybe, get something out 
like this. 

58
00:04:00,302 --> 00:04:03,820
That's better. 
So, there are different ways of weighing 

59
00:04:03,820 --> 00:04:06,742
them. 
Let's say that I get these weighed or 

60
00:04:06,742 --> 00:04:11,138
scaled obstacle vectors. 
And then my obstacle avoidance is simply 

61
00:04:11,138 --> 00:04:15,490
going to be some scaled version, or 
weighted and scaled version of that. 

62
00:04:15,490 --> 00:04:21,006
So this would be, U avoid obstacle now. 
And what you now need to do, to find x 

63
00:04:21,006 --> 00:04:26,414
obstacle which we need, is to backtrack 
this thing, and say that this point here, 

64
00:04:26,414 --> 00:04:29,798
would be x o. 
Now x o is not necessarily a point that 

65
00:04:29,798 --> 00:04:33,847
we're measuring now. 
It's the scaled and weighted version of 

66
00:04:33,847 --> 00:04:39,101
the other points but, this is a much 
better way of Of doing.Now the last thing 

67
00:04:39,101 --> 00:04:44,571
I should point out this you know what , 
you should weigh these things depending 

68
00:04:44,571 --> 00:04:49,888
on the distance.But then you should also 
weigh depending on the direction of 

69
00:04:49,888 --> 00:04:55,330
travel, [COUGH] excuse me and what do I 
mean by that.Well you know what, if I'm 

70
00:04:55,330 --> 00:04:58,316
really on my way In this direction 
[NOISE]. 

71
00:04:58,316 --> 00:05:02,950
What do I care about obstacles behind me. 
Why should I care about that. 

72
00:05:02,950 --> 00:05:07,926
I really shouldn't right? So, what I 
really want to do is weigh it also based 

73
00:05:07,926 --> 00:05:12,754
on the direction of travel and in that 
case I would get a weighted obstacle 

74
00:05:12,754 --> 00:05:17,926
avoidance vector out like this. 
So this is almost a I would say the best 

75
00:05:17,926 --> 00:05:21,459
way of doing it. 
And that's in fact how we're going to do 

76
00:05:21,459 --> 00:05:24,094
it. 
Now, the last thing I want to point out, 

77
00:05:24,094 --> 00:05:28,677
though, you know, there's another option. 
I should be able to collect all the 

78
00:05:28,677 --> 00:05:33,128
points I'm getting, building a map of it, 
so here is the obstacle service. 

79
00:05:33,128 --> 00:05:37,893
And then, you know what? Instead of just 
dealing with the questions, like you 

80
00:05:37,893 --> 00:05:42,243
know, sliding, or snow sliding. 
Maybe I can, plan my way around this 

81
00:05:42,243 --> 00:05:45,138
obstacle. 
Now, what I want to point out , this, in 

82
00:05:45,138 --> 00:05:48,059
this class, we don't say things like most 
bestest, 

83
00:05:48,059 --> 00:05:52,139
because it's grammatical nonsense. 
we stay with grammatically correct 

84
00:05:52,139 --> 00:05:56,745
things, which means that Ultra4 is out. 
what I really want to say is that 

85
00:05:56,745 --> 00:06:01,140
building maps is an entirely different 
type of topic, and all that we are 

86
00:06:01,140 --> 00:06:04,405
learning in this class is still very much 
applicable. 

87
00:06:04,405 --> 00:06:08,783
So, I just want to point out that there 
are ways of building maps and then 

88
00:06:08,783 --> 00:06:13,379
planning in those maps and then you're 
goal to goal behavior, for instance, 

89
00:06:13,379 --> 00:06:18,532
wouldn't aim at the goal point but aim at 
following planned path based on these 

90
00:06:18,532 --> 00:06:21,688
obstacle maps. 
So want to point out option 4 but its 

91
00:06:21,688 --> 00:06:25,531
really not part of what we're going to 
pursue in, in the class. 

92
00:06:25,531 --> 00:06:30,061
Now the last thing or did the second 
thing I said is we need to allow for fat 

93
00:06:30,061 --> 00:06:35,358
guards and this is because no sensor is 
perfect, no actuator is perfect. 

94
00:06:35,358 --> 00:06:39,981
Robots aren't prefect, right? So if I 
have this as my navigation hybrid 

95
00:06:39,981 --> 00:06:44,773
automaton, when I'm doing f1 for some 
reason until g is negative, then I'm 

96
00:06:44,773 --> 00:06:47,759
doing f2. 
And then when g becomes positive I'm 

97
00:06:47,759 --> 00:06:50,852
doing f1 again. 
This is not sufficiently fat. 

98
00:06:50,852 --> 00:06:56,327
Because I may end up actually switching a 
lot, I may do C note for instance or I 

99
00:06:56,327 --> 00:07:01,327
may not but, the point is that what I 
really should do is replace these guys 

100
00:07:01,327 --> 00:07:02,077
with this, 
right? 

101
00:07:02,077 --> 00:07:07,202
Instead of saying G less than 0, I should 
say G less than negative epsilon. 

102
00:07:07,202 --> 00:07:11,231
And instead of saying g positive, I 
should say g greater than epsilon. 

103
00:07:11,231 --> 00:07:15,676
so Instead of having this as my switching 
surface, I'm actually building this 

104
00:07:15,676 --> 00:07:19,768
little corridor here where I'm saying, 
I'm going to use f1 until I've gone 

105
00:07:19,768 --> 00:07:22,412
through the entire corridor and so here's 
f1. 

106
00:07:22,412 --> 00:07:26,101
And then I'm going to use f2 until I've 
gone through that corridor. 

107
00:07:26,101 --> 00:07:31,974
And this factification not only reduces 
chattering but it also allows us to 

108
00:07:31,974 --> 00:07:38,446
switch not when we're exactly delta away 
from an ob, obstacle but in somewhere 

109
00:07:38,446 --> 00:07:43,923
delta plus minus epsilon. 
So always build fat guards as a practical 

110
00:07:43,923 --> 00:07:50,002
precaution against the fact that de, 
deployed real world is not as clean as 

111
00:07:50,002 --> 00:07:54,222
the theoretical world on my powerpoint 
slides. 

112
00:07:54,222 --> 00:07:59,902
And then, like I said, the final advice, 
when it comes to practical 

113
00:07:59,902 --> 00:08:06,467
considerations, is even though you have 
built a beautiful hybrid automotan, 

114
00:08:06,467 --> 00:08:13,862
you've thought about everything, you have 
dealt with practical considerations and 

115
00:08:13,862 --> 00:08:20,016
that you deal with point obstacles or non 
point obstacles as susceptible points 

116
00:08:20,016 --> 00:08:24,193
since [UNKNOWN]. 
you are using sufficiently [UNKNOWN] 

117
00:08:24,193 --> 00:08:27,886
guards, you still have to tweak, tweak, 
tweak. 

118
00:08:27,886 --> 00:08:33,732
You have to test these parameters. 
You have to do it over and over again and 

119
00:08:33,732 --> 00:08:38,512
Like I said, this is what makes robotics 
hard and why it's a little frustrating at 

120
00:08:38,512 --> 00:08:43,082
times, but at the end of it, it's also 
what makes it satisfying when you get it 

121
00:08:43,082 --> 00:08:45,502
right. 
So what I'm going to do in the next 

122
00:08:45,502 --> 00:08:48,052
lecture is not talk at you or to you at 
all. 

123
00:08:48,052 --> 00:08:53,661
Instead, what we are going to do is to 
actually going to build this system that 

124
00:08:53,661 --> 00:08:59,569
we now have and tweak parameters until we 
are satisfied with our glorious, great, 

125
00:08:59,569 --> 00:09:01,576
unifying navigation system. 