welcome to module three control 
mobile robots going to in 
this module is try to a little 
systematic in we think design 
choices we actually model 
systems that dealing so, so 
far in module one we basic 
control theory we developed pid 
regulators we could rather 
elegant things, we really didnt know 
anything worked in module we 
started talking robots 
standard robot models going 
to use, abstractions useful 
thinking sensing modalities, 
robots know so 
going to in this module is 
actually take a step back start to 
revisit things we 
we need to first is develop 
a model class that is rich enough in 
sense that quiet general will 
catch capture a lot different 
robotic systems that interested in 
to simple enough so that we 
actually say things because, 
you know, complicated models dont 
really give us anything we 
effective ways interacting 
model also needs to expressive 
enough relevant enough, i 
mean that is, to capture 
aspect systems that 
interested in, in a way that matters 
actually translate actual systems 
theyre supposed to 
one thing to remember is that 
models always approximations, adn you 
want to make suere that you, things 
that you dont fully model dont matter 
so much going to is 
going to go wonderful world 
linear systems so, linear systems 
particularly effective compact, 
well behaved system representations 
dynamical systems so lets start 
i want to call worlds easiest 
simplest robot this is a point mass 
so is, is that a mass 
a line i immediately control 
acceleratio n so if you start 
controlling p is position 
robot acceleration is 
second derivative position is 
p double dot is equal to u we wont 
actually like to write in this way, we 
dont want double dots, we dont want 
to p is positions 
controlling something else we new 
variables so, we want to come a 
compactgeneral form that captures we 
want somehow glosses the, the, 
minor details separates a 
point mass robot a humanoid robot, 
say so way to this is to introduce 
new variables im going to 
introduce in this case two variables 
first one im going to call x simply 
say that thats position so x is 
position robot im going 
to say that x is velocity 
robot if i that, i actually 
write derivatives dynamics 
new variables so x dot, well, 
we x dot is equal to p dot p dot 
equal to x so, x dot is simply 
equal to x x dot is p double dot, 
right so x dot is p double dot, we 
here, equal to u so x dot 
is simply equal to u so this is a slight 
reformulation that so far doesnt seem to 
buy us anything we is we 
actually we put this system 
whats call states based form 
state system is going to 
excess so im simply going to lump x 
x a new variable that im going to 
call x, note that this is actually 
a dimensional object im 
going to is im going to talk 
dynamics this dimensional object so 
x dot is x dot, x dot we know that 
x dot x x dot u so i 
simply write x dot is this x u vector 
well gets even better if i 
a matrix if i x x there i 
multiply this matrix, lets say 
that i would like to get x, well 
i to multiply x x 
well, this is zero times x so im going 
to write here times x is going 
to give that, right so i going 
to is simply write this a matrix, so 
x dot is zero times x times x 
x dot is simply u, so zero times x 
zero times x we get one u 
so i rewritten dynamics using 
matrices, may may look 
easier trust me, actually will 
much easier moreover, thing we care 
in this case would x so, im 
going to take output system to 
x and, i also write this a 
matrix in this case a role 
vector times x this simply means that i 
get one x, zero x so, i 
rewrit them, everything in a much 
more, im going to claim compact form, 
using matrices so, to summarize, 
state space form x dot is this thing, 
x y sorry 
output is this thing now, if i 
introduce matrices im going to call 
this thing a matrix im going to call 
this thing b matrix this thing 
c matrix then, a sudden, i 
write everything like this x dot is ax 
plus bu, y is cx weve hidden 
particulars model inside this 
a, b, c matrices this is a 
general way writting systems so this in 
fact clearly deserves one 
sweethearts we done is 
to take a system that really 
particular written in a 
general form involving system 
matrisis to make sure that we believe 
this is in fact generally usefull lets 
consider dimensional point mass 
where, i do, is i move in 
x y directions say so, 
position is going to x y 
position, input is acceleration in 
x y direction 
dynamics course is p double dot x is 
ux, means acceleration, 
accelerating in x direction 
ux input, similarly my, y 
direction well, we need to 
thing so im going to introduce a 
bunch new variabl es 
so x is px x is px i said 
im introducing x is py, 
x is py i two inputs two 
outputs so if i this i actually 
write this new system, also using a b 
c matrixes so if you take a look this 
a matrix, here in this corner is 
old a matrix that we a d 
pointmass well this is x 
component a matrix this would 
y component similarly b, this is 
old b i two copies 
c, this is old c i a copy 
so this choice a, b c 
matrices, voila i write 
that this system exactly form 
x dot is ax bu y is cx 
one thing that im going to encourage 
you to is make sure that you go 
matrix multiplications here 
convince that this choice a, 
b, c matrixes is actually corresponds 
to original dynamics that we 
here point that i really want to 
make this is you know what, x dot 
is ax plus bu, y is cx, is a general 
way writing down, system dynamics 
that you in fact, this is whats 
called an lti system linear time 
invariant system state space form, 
going to see this a, b, c 
triple quite a lot in this course, 
will show 
will allow us to general 
we reason systems 
going to hide particulars 
dynamics inside a, b, c matrices 
we move to next lecture 
actually going to see a little bit 
models come lets 
say a few words though 
dimensions we here if x is 
an n dimensional vector so a rn 
point mass line x is 
dimensional a d point we 
control exploration x dimensional 
anyway, x is in rn, a is an n n 
matrix if u is in rm, meaning we an 
m dimensional inputs, v is going to 
an n m matrix similarly if 
output is p dimensional, meaning 
sucking p different things 
system, c matrix is a p n 
matrix reason this is right you 
see that if you actually write 
equation x dot is ax plus bu well, x 
dot to dimension x 
so to n one now, i know that 
a is n n x is n one whenever 
you matrix multiplication like that 
first thing is that numbers 
to otherwise you cannot 
this multiplication so you to make 
sure you end 
n end, an n one 
n pieces here means that ax actually 
becomes n one factor is 
we need, right x dot n one 
similarly b, b is n m you u is 
m one, well things cancel 
that we end 
something thats n one if you look 
y similarly, y is p one, well is p bt n 
x is n one guys cancel out, 
we end is a p one 
vector and, important that 
dimensions lineup so, a sanity check, 
always going to forced to insure 
that things that we build, 
right dimensions and, if dont 
dimensions, we write 
is actually nonsense, we cant perform 
multiplications okay, that 
concludes first lecture linear 
systems in next lecture, 
going to see a little bit 
systems actually come 
