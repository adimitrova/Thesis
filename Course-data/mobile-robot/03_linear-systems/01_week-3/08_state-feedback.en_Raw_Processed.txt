so outcome last lecture one 
hand a little bit exciting we 
is we took measurements that we 
get we try to use a, a 
way designing controllers to stabilize 
system we actually know to 
stabilize systems we need real parts 
eigen values strictly 
negative 
hand, outcome last 
lecture wildly disappointing 
we couldnt actually reason 
that that we looked 
output full state 
information so today, going to look 
we design controllers we 
take x account, 
y so if you recall this picture 
going to today is simply say, you 
know i dont care y in fact, 
forget measurements comes 
here is x then, we 
actually now, obviously we need 
to is topic next modal is 
create a way actually sucking x 
y lets pretend a 
moment that we access to full 
state information well if we that 
first we dont to worry y 
so ever so x dot is ax plus bu, 
forget y we is instead 
saying u is negative ky, 
going to say u is negative kx, k is 
matrix various gains in in 
previous example, a scalar 
a in it, in general could 
a matrix now, like last time, we 
plug this choice u back 
equation x, we get x, this 
ax, plus bu, well u is negative kx so 
we put everything together in 
this matrix, a minus bk 
if we call this a hat, we a 
sudden a new system matrix 
job is to make a hat pretty 
possible well in particular a hat is 
known closed loop dynamics 
we closed loop system 
feeding back state information 
system in that way we 
getting rid axs x dot is ax 
plus bu we getting x dot is a 
minus bkx control sign task 
a stability point is simply pick 
if possible k that closedloop 
system is stabilized luckily us we 
know exactly this means 
means that real part 
eigenvalues closedloop dynamics, a 
minus bk, to strictly negative so, 
lets go back to simple robot to 
see we understand this in 
context simple robot arguably, 
entire next module, module , is going 
to devoted to this question we 
pick k that we stabilize this 
system, get eigen values we want 
top that, we get around this 
rather peculiar conundrum we 
y we would like to x 
going to pretend that we x 
well, that, we will wait 
now, lets go back to robot lets 
note, though, first all, that u is in 
r, x is in r squared, r and, in 
fact, if u is negative kx always 
useful to write this kind 
dimensional analysis x is n 
in this case, u is in general, lets say 
that u is m x , in this case 
actually x , then, a dimensional 
point view, k to m x n, 
otherwise doesnt work out, so we 
to able to cancel things out, 
comes soemthing thats m x so in 
general, k is a m x matrix m is 
dimension output n is 
dimension state okay, in this 
case m means , we pick k 
k here, control gains, we 
plug to abk equation here so this 
is this is a, this is b, this is k, 
right so if we that, we get this 
system we perform matrix 
multiplication i would encourage you to 
make sure that i got matrix 
multiplication right 
but, now, lets 
accept fact that close loop 
dynamics becomes x dot, is , minus k 
minus kx okay, so we this 
knobs that we tweak, k k, w 
hen we tweak them, eigen values 
closed loop dynamics going to move 
around so, in next module well 
systematic in terms we actually 
pick this case 
lets put case pull case 
a hat oh, im a lazy man, so 
im pull hat so lets 
try k equals k equals to 
a first, first attempt, least 
well, if i plug this in to a mius bk 
equation, i get following closedloop 
system dynamics lets check 
eigenvalues things so list write 
eig in matlab whatever system you want 
to use if you that, youll find 
that eigenvalues negative 
plus minus something, something, 
something, j real parts 
eigenvalues well real parts 
eigenvalues ,, there, , so 
there strictly negative, course 
is we needed stability so we 
asymptotic stability, so we in 
fact achieved asymptotic stability now, 
thing to note is that fact 
that we a j hanging around there, 
meaning we an imaginary component to 
eigenvalues, that means that we 
expect oscillations in way system 
behaves so we an asymptotically 
stable system oscillations 
floating around, in fact 
damped oscillations because, since 
system is stable, oscillations 
going to become smaller smaller in 
amplitude, goes to infinity, 
going to in fact go away completely 
so if i this, here is 
looks like you see quickly we 
get close to origin we overshot a 
little bit this 
osculations so lets see if we 
something osculations well 
here is another attempt completely 
arbitrary i going to make k smaller 
means k tells much i react 
to position k tells much i 
react to volicity you always think of, 
almost think this a p parameter in a 
pid regulator, this is d parameter 
i n pid regulator p is 
position in this case, d is 
derivative position, is velocity 
thats k is, is affecting okay 
if i that, new system matrix 
becomes this beast here well, lets check 
eigenvalues in this case, 
eigenvalues end numbers 
theyre real, means we cannot 
expect, really, oscillations even 
better yet real strictly 
negatives so this is an asymptotically 
stable system oscillation 
oscillations 
so, this seems like a pretty decent design 
to lets see would actually 
to robot so robot, eh, well, 
oscillating unbearably slow 
so, we saw here is that we actually 
got rid oscillations we got 
assistance that much sluggish 
in sense that itis slow 
borderline annoying a performance 
point view asymptotic 
stability is achieved we saw we 
need to is to able to achieve 
stability while things 
time one thing that is 
absolutely clear is that eigenvalues 
better others design 
control gain, somehow, reflected 
by, good eigenvalues so, 
eigenvalues cause oscillation 
eigenvalues cause instability 
eigenvalues make system respond 
slowly so forth so i want to 
leave you is seems like state 
feedback is way to go even though we 
dont really know to get to state yet 
we will end next module 
we to careful creative 
clever in terms we select 
eigenvalues thats another topic 
next module is we 
actually select appropriate 
eigenvalues to get closed loop system 
behavior that we want 
