1
00:00:00,012 --> 00:00:04,660
So now we know not only that the first
order business is to make the system

2
00:00:04,672 --> 00:00:09,842
stable meaning it shouldn't blow up, it
should behave well, but we also know what

3
00:00:09,854 --> 00:00:14,974
this means, namely that the Eigen values
of the system should have negative real

4
00:00:14,986 --> 00:00:19,179
part and even though we saw some
critically stable cases last time.

5
00:00:19,452 --> 00:00:24,551
Including a rather awesome, set of robots
slamming into each other. We typically

6
00:00:24,563 --> 00:00:29,455
don't want critical stability. We want
asymptotic stability. Which means that we

7
00:00:29,467 --> 00:00:34,186
need to have strictly negative real part
of all the eigenvalues here. And today,

8
00:00:34,289 --> 00:00:38,951
we're going to actually achieve that, or
try to achieve it, by designing a

9
00:00:38,963 --> 00:00:44,339
controller. Because remember this picture.
, Speaker:We have our system, x dot is Ax

10
00:00:44,351 --> 00:00:49,135
plus Bu where u is the input, and then y
is equal to Cx. So, whatever we do to our

11
00:00:49,147 --> 00:00:54,007
control choice has to depend on the things
that we have access to, which is why we

12
00:00:54,019 --> 00:00:58,904
don't know the state of the system. But,
we certainly know the output. So, today

13
00:00:58,916 --> 00:01:03,718
we're going to try something called
'output feedback,' which means we're going

14
00:01:03,730 --> 00:01:08,922
to take the output of the system. And use
it to feed directly back in as a way of

15
00:01:08,934 --> 00:01:14,173
controlling it. And we're going to start
by returning to our old friend, the

16
00:01:14,185 --> 00:01:19,526
world's simplest robot, which is just a
point on a line that we can control the

17
00:01:19,538 --> 00:01:24,931
acceleration of and, as you hopefully
recall, we can write this in state space

18
00:01:24,943 --> 00:01:31,486
form as x dot is. This a matrix, 0100x.
plus a b matrix that's 01. And then, the

19
00:01:31,498 --> 00:01:38,779
output is 10x. This means that the output
is the position of the point mass. And x1,

20
00:01:38,907 --> 00:01:45,831
the first component of x is the position.
The second component of x is. The velocity

21
00:01:45,843 --> 00:01:53,376
and then u immediately gives us the, the
acceleration. So now our job is to somehow

22
00:01:53,388 --> 00:02:00,467
connect y to u meaning pick our input in
such a way that this system behaviors and

23
00:02:00,479 --> 00:02:06,470
in fact here is an idea, we want to drive.
The system to zero, which means stabilize

24
00:02:06,482 --> 00:02:11,411
it. So, why don't we move towards the
origin? meaning, the position of the robot

25
00:02:11,423 --> 00:02:16,146
is what it is. And let's say that, here is
the origin. And our job is to drive it to

26
00:02:16,158 --> 00:02:20,539
the origin. So if the position is
negative. Meaning we're on the left on the

27
00:02:20,551 --> 00:02:24,180
origin. We should probably move in this
direction. If the.

28
00:02:24,182 --> 00:02:28,750
Robot is over there, we should move it to
the left, which is in a negative

29
00:02:28,762 --> 00:02:33,870
direction. So that's a very, very simple
idea. And in fact if we turn it into math,

30
00:02:33,977 --> 00:02:38,730
we see that if y is negative, so y
negative again, corresponds if the origin

31
00:02:38,742 --> 00:02:43,590
is here, us being on this side, then u
should be positive, which means moving

32
00:02:43,602 --> 00:02:48,665
this. Direction, and similarly if Y is
positive than U should be negative. And

33
00:02:48,677 --> 00:02:53,381
here's some suggestion. Right.
Let's pick the world's simplest controller

34
00:02:53,393 --> 00:02:58,410
that achieves this. Simply, the negative
of Y. So Y positive means negative U, Y

35
00:02:58,422 --> 00:03:04,609
negative means positive U. u. So let's try
this, and see what it actually does. And

36
00:03:04,621 --> 00:03:10,487
what we need to do first is understand.
How does this change the system dynamics?

37
00:03:10,607 --> 00:03:15,818
Because what we really did now, is, we had
u equal to well, we had minus y. So k, in

38
00:03:15,830 --> 00:03:22,084
our example, was just a1. But in general,
k here could be. It's a more rich

39
00:03:22,096 --> 00:03:28,326
structure, and if used in the y's or
multidimensional, then this needs to be a

40
00:03:28,338 --> 00:03:33,878
vector. Now, we know that y is equal to C
times x, so we can write this as u being

41
00:03:33,890 --> 00:03:39,729
equal to negative KCx. So, now let's plug
this into our differential equation that

42
00:03:39,741 --> 00:03:46,081
we have. So, x dot is Ax plus Bu, and now
instead of u. We're plugging in this term

43
00:03:46,093 --> 00:03:52,649
right. So then we get a minus BKCx or if
you plug everything together, we get A

44
00:03:52,661 --> 00:03:59,011
minus BKCx. And this, we can write if you
want to as a hat times x. So this is just

45
00:03:59,023 --> 00:04:06,167
a new system matrix and of course our job
is to pick k now so that's the real Part

46
00:04:06,179 --> 00:04:12,916
of the eigenvalues of A hat is strictly
negative. In other words, pick if possible

47
00:04:12,928 --> 00:04:19,268
K such that the real part of lambda is
strictly negative for all lambda that is,

48
00:04:19,398 --> 00:04:25,664
that is an eigenvalue to this new system
matrix A minus BKC. So that's really our,

49
00:04:25,793 --> 00:04:32,010
our job here and in a way already picked
K, we said K was equal to one. Well let's

50
00:04:32,022 --> 00:04:38,515
see what's happening if that's the case,
then we have x dot is, this is A, this is

51
00:04:38,527 --> 00:04:44,810
B, this is K a nd this is C. So this is
what we have in terms of the. The system

52
00:04:44,822 --> 00:04:52,035
matrix for our, robot. And one thing to
note, first of all. That 1 times 1, 0 is

53
00:04:52,047 --> 00:04:59,115
just 1, 0. And if I multiply this by 0, 1,
then I get, what do I get? I get 0 times

54
00:04:59,127 --> 00:05:04,554
1, then 0 times 0 1 times 1. And 0 times
1. So this is what this whole expression

55
00:05:04,566 --> 00:05:10,749
is equal to. So now I can just take this
matrix, and subtract away this matrix to

56
00:05:10,761 --> 00:05:16,729
get the, the right answer. And if I do
that, I get x. is 0, 1, negative 1, 0, x.

57
00:05:16,854 --> 00:05:22,748
And this is for my particular choice of k.
And let's check out what, what the

58
00:05:22,760 --> 00:05:27,949
eigenvalues are of this thing. Well, you
write eig in MATLAB and you get the

59
00:05:27,961 --> 00:05:32,495
answer. Or, as we will see in future
lectures, you can actually compute it and,

60
00:05:32,596 --> 00:05:37,436
and say something about the clever choice
of k in that way. But, for now, we're just

61
00:05:37,448 --> 00:05:42,010
going to immediately plug this into our
favorite software system, and we find out

62
00:05:42,022 --> 00:05:47,035
that the eigenvalues are plus and minus j.
Where j is square root to negative 1. So

63
00:05:47,047 --> 00:05:52,914
is this system asymptotically stable?
Well, the real part of lamda for both

64
00:05:52,926 --> 00:05:59,176
lamdas so we have two lamdas. The real
part is zero, because this is a purely

65
00:05:59,188 --> 00:06:04,870
imaginary system. And, as I said last
time, if I have two. Imaginary eigenvalues

66
00:06:04,882 --> 00:06:09,115
and all the others are well behaved, in
this case I don't have any others, then I

67
00:06:09,127 --> 00:06:13,517
have a critically stable system. And in
fact since I have imaginary components, we

68
00:06:13,529 --> 00:06:17,861
have already hinted at this that what we
actually end up with are oscillations. So

69
00:06:17,873 --> 00:06:21,973
this is a critically stable system and if
I simulate with this role, what it's

70
00:06:21,985 --> 00:06:27,053
doing, it's going to look like this.
Really what's happening is this thing is

71
00:06:27,065 --> 00:06:33,293
just going back and forth, back and forth.
So, what's the problem? We clearly did not

72
00:06:33,305 --> 00:06:38,456
stabilize it, we know it's not
asymptotically stable in fact it's just

73
00:06:38,468 --> 00:06:44,425
going back and forth back and forth well
here is the problem, When the robot is

74
00:06:44,437 --> 00:06:49,243
let's say on it's way. Away from the
origin, then we're pushing it, correctly

75
00:06:49,255 --> 00:06:53,725
so, towards the origin. But when it's on
it's way back, we're still pushing it

76
00:06:53,737 --> 00:06:58,346
equally hard, even thou gh it's actually
going there almost by itself. So, we're

77
00:06:58,358 --> 00:07:02,916
kind of not taking the direction in which
the robot is going. Into account.

78
00:07:02,917 --> 00:07:07,310
What this actually means is that we are
not looking at the velocity because the

79
00:07:07,322 --> 00:07:11,554
velocity is going to tell you which
direction it is going in. So the problem

80
00:07:11,566 --> 00:07:15,885
is that we do not take velocity into
account. Remember what the state is? The

81
00:07:15,897 --> 00:07:20,030
state is position and velocity. So the
problem is that we need all of it to

82
00:07:20,042 --> 00:07:24,497
stabilize and we need the full state
information not just the output. So output

83
00:07:24,509 --> 00:07:29,892
feedback like this doesn't quiet Work, but
instead we want to operate on x instead of

84
00:07:29,904 --> 00:07:35,032
y. But here of course is the problem. How
do we do that? And the corollary to that

85
00:07:35,044 --> 00:07:40,314
is, we don't even know x. We only know y.
How in the world can we design controllers

86
00:07:40,326 --> 00:07:45,713
for things that we don't know? Well, as we
will see in the next module, it's possible

87
00:07:45,725 --> 00:07:50,736
to figure out x from y a lot of times. If
you just think of y in this case as being

88
00:07:50,748 --> 00:07:55,880
the position And x being y, as x being
position in velocity. Then velocity,

89
00:07:55,990 --> 00:08:00,952
right, we can get by measuring two
positions after each other, and dividing

90
00:08:00,964 --> 00:08:05,488
it by the time in between the
measurements. Then we get an estimate of

91
00:08:05,500 --> 00:08:10,902
the velocity. So, it's clearly possible in
this case to at least get an estimate of

92
00:08:10,914 --> 00:08:16,764
state from the, the From the output. So
like I said this is the next module but in

93
00:08:16,776 --> 00:08:22,323
the next lecture which is the last lecture
of this module will pretend that we

94
00:08:22,335 --> 00:08:28,287
actually have x and revisits the world's
simplest robot and see how can we actually

95
00:08:28,299 --> 00:08:31,503
stabilize it if we have all of x and not
just y.