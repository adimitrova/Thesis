1
00:00:00,012 --> 00:00:06,260
Welcome to module three of control of
mobile robots. what we're going to do in

2
00:00:06,272 --> 00:00:12,292
this module is try to be a little more
systematic in how we think of our design

3
00:00:12,304 --> 00:00:17,941
choices and how we actually Model the
systems that we're dealing with. So, so

4
00:00:17,953 --> 00:00:22,547
far in module one we did some basic
control theory. We developed PID

5
00:00:22,559 --> 00:00:28,140
regulators. we could do some rather
elegant things, but we really didn't know

6
00:00:28,152 --> 00:00:33,351
Why anything worked. And in module 2 we
started talking about robots and some of

7
00:00:33,363 --> 00:00:38,393
the more standard robot models we're going
to use, what abstractions are useful for

8
00:00:38,405 --> 00:00:43,974
thinking about sensing modalities, and how
do the robots know where they are. so what

9
00:00:43,986 --> 00:00:48,282
we're going to do in this module is
actually take a step back and start to

10
00:00:48,294 --> 00:00:53,173
revisit some of the things we did. And
what we need to do first of all is develop

11
00:00:53,185 --> 00:00:57,445
a Model class that is rich enough in the
sense that it's quiet general and it will

12
00:00:57,457 --> 00:01:01,475
catch and capture a lot of different
robotic systems that we're interested in.

13
00:01:01,569 --> 00:01:05,744
But it has to be simple enough so that we
can actually say things about it because,

14
00:01:05,838 --> 00:01:10,134
you know, very complicated models don't
really give us anything because we have no

15
00:01:10,146 --> 00:01:14,467
effective ways of interacting with them.
the model also needs to be expressive

16
00:01:14,479 --> 00:01:19,000
enough and relevant enough, and what I
mean about With that is, it has to capture

17
00:01:19,012 --> 00:01:23,558
the aspect of the systems that we're
interested in, in a way that matters and

18
00:01:23,570 --> 00:01:28,503
actually translate into the actual systems
doing what they're supposed to be doing.

19
00:01:28,606 --> 00:01:33,366
Because one thing to remember is that
models are always approximations, adn you

20
00:01:33,378 --> 00:01:38,307
want to make suere that you, the things
that you don't fully model. Don't matter

21
00:01:38,319 --> 00:01:43,404
so much. And what we're going to do is
we're going to go into the wonderful world

22
00:01:43,416 --> 00:01:49,169
of linear systems. So, linear systems are
particularly effective and compact, and

23
00:01:49,181 --> 00:01:54,628
well behaved system representations of
dynamical systems. So let's start with

24
00:01:54,640 --> 00:01:59,956
what I want to call the world's easiest
and simplest robot. This is a point mass.

25
00:02:00,070 --> 00:02:05,596
So what it is, is that it's just a mass.
On a line and I can immediately control

26
00:02:05,608 --> 00:02:10,729
the acceleratio n. So if you start
controlling but p is the position of the

27
00:02:10,741 --> 00:02:16,202
robot then acceleration which is the
second derivative of the position is just

28
00:02:16,214 --> 00:02:21,719
p double dot is equal to u. Now we won't
actually like to write it in this way, we

29
00:02:21,731 --> 00:02:27,190
don't want the double dots, we don't want
to have. P is for positions and then we're

30
00:02:27,202 --> 00:02:31,930
controlling something else. We have new
variables. So, we want to come up with a

31
00:02:31,942 --> 00:02:36,765
compact/general form that captures what we
want but somehow glosses over the, the,

32
00:02:37,022 --> 00:02:41,593
the minor details of what separates a
point mass robot from a. Humanoid robot,

33
00:02:41,691 --> 00:02:45,532
say. So the way to do this is to introduce
some new variables. And I'm going to

34
00:02:45,862 --> 00:02:50,154
introduce in this case two variables. The
first one I'm going to call x1 and simply

35
00:02:50,166 --> 00:02:54,777
say that that's the position. So x1 is the
position of the robot. And then I'm going

36
00:02:54,459 --> 00:02:58,790
to say that x2 is the velocity of the
robot. And if I do that, I can actually

37
00:02:58,802 --> 00:03:05,839
write down the derivatives. The dynamic's
of these new variables. So x1 dot, well,

38
00:03:05,998 --> 00:03:12,173
we have x1 dot is equal to p dot but p dot
was equal to x2. So, x1 dot is simply

39
00:03:12,185 --> 00:03:17,322
equal to x2. X2 dot is P double dot,
right? So X2 dot is P double dot, which we

40
00:03:17,334 --> 00:03:22,106
have up here, which equal to U. So X2 dot
is simply equal to U. So this is a slight

41
00:03:22,118 --> 00:03:27,447
reformulation that so far doesn't seem to
buy us anything. But what we can do is we

42
00:03:27,459 --> 00:03:32,255
can actually We put now this system on
what's call state's based form. And the

43
00:03:32,267 --> 00:03:36,890
state of the system is going to be our
excess. So I'm simply going to lump x1 and

44
00:03:36,902 --> 00:03:41,655
x2 into a new variable that I'm going to
call x, and now note that this is actually

45
00:03:41,667 --> 00:03:47,991
a 2-dimensional object. And then what I'm
going to do is I'm going to talk about the

46
00:03:48,003 --> 00:03:54,418
dynamics of this 2-dimensional object. So
x dot is x1 dot, x2 dot and we know that

47
00:03:54,430 --> 00:04:00,455
x1 dot was x2 and x2 dot was u. So I can
simply write x dot is this x2 u vector.

48
00:04:00,585 --> 00:04:07,260
Well it gets even better because if I have
a matrix. If I have x1 x2 there and I

49
00:04:07,272 --> 00:04:14,847
multiply this by 2 by 2 matrix, let's say
that I would like to get out x2, well what

50
00:04:14,859 --> 00:04:21,553
do I have to multiply x1 and x2 with?
Well, this is zero times x1 so I'm going

51
00:04:21,565 --> 00:04:29,663
to write 0 here and 1 times x2. Is going
to give me that, right. So what I am going

52
00:04:28,995 --> 00:04:37,655
to do is simply write this as a matrix, so
x dot is zero times x1 and 1 times x2 and

53
00:04:37,667 --> 00:04:44,861
x2 dot is simply u, so its zero times x1
and zero times x2 but we get one u out of

54
00:04:44,873 --> 00:04:50,763
it so I am now rewritten my dynamics using
these matrices, which may or may not look

55
00:04:50,775 --> 00:04:56,162
easier. But trust me, it actually will be
much easier. Moreover, the thing we care

56
00:04:56,174 --> 00:05:01,039
about in this case would be x1. So, I'm
going to take the output of the system to

57
00:05:01,051 --> 00:05:07,201
be x1. And, I can also write this as a
matrix. In this case it's a it's role

58
00:05:07,213 --> 00:05:13,920
vector times x. This simply means that I
get one of x1, and zero of x2. So, I have

59
00:05:13,932 --> 00:05:20,368
now re-writ them, everything in a much
more, I'm going to claim compact form,

60
00:05:20,501 --> 00:05:27,757
using these matrices. So, to summarize, on
state space form x dot is this thing, And

61
00:05:27,769 --> 00:05:31,917
x and y. Sorry.
The output is this thing. Now, if I

62
00:05:31,929 --> 00:05:38,427
introduce some matrices. I'm going to call
this thing my a matrix. I'm going to call

63
00:05:38,439 --> 00:05:44,899
this thing my b matrix. And this thing my
c matrix. Then, all of a sudden, I can

64
00:05:44,911 --> 00:05:51,064
write everything like this. x dot is ax
plus bu, y is cx. And now we've hidden all

65
00:05:51,076 --> 00:05:57,674
the particulars of the model inside this
a, b, and c matrices. But this is a very.

66
00:05:57,832 --> 00:06:03,290
General way of writting systems so this in
fact clearly deserves one of these

67
00:06:03,302 --> 00:06:08,440
sweethearts because what we have done is
to take a system that was really

68
00:06:08,452 --> 00:06:13,540
particular and written it in a very
general form involving these system

69
00:06:13,552 --> 00:06:19,275
matrisis and to make sure that we believe
this is in fact generally usefull let's

70
00:06:19,287 --> 00:06:24,785
consider 2-dimensional point mass now.
Where, what I can do, is I can move in

71
00:06:24,797 --> 00:06:29,769
both the x and y directions say. So, the
position is going to be the x and y

72
00:06:29,781 --> 00:06:34,982
position, the input is my acceleration in
the x and y direction. And then the

73
00:06:34,994 --> 00:06:39,360
dynamics of course is p double dot x is
ux, which means my acceleration, my

74
00:06:39,372 --> 00:06:44,786
accelerating in the x direction with the
my ux input, and similarly for my, My y

75
00:06:44,798 --> 00:06:50,848
direction. Well, now we need to do the
same thing. So I'm going to introduce a

76
00:06:50,860 --> 00:06:55,898
bunch of new variabl es.
So x1 is px. x2 is p.x. As I said before.

77
00:06:56,027 --> 00:07:02,085
But now I'm introducing 2 more. X3 is py,
and x4 is p.y. I have two inputs and two

78
00:07:02,097 --> 00:07:08,190
outputs. So if I do this. I can actually
write this new system, also using a b and

79
00:07:08,202 --> 00:07:13,818
c matrixes. So if you take a look at this
a matrix, up here in this corner is the

80
00:07:13,830 --> 00:07:18,617
old a matrix that we had for a 1D
point-mass. Well this is just the x

81
00:07:18,629 --> 00:07:24,519
component of the a matrix. And this would
be the y component. Similarly b, this is

82
00:07:24,531 --> 00:07:31,277
my old b Now I have two copies of it. And
for C, this is my old C. Now I have a copy

83
00:07:31,289 --> 00:07:37,935
of it. So with this choice of A, B and C
matrices, voila. I can write the same Or

84
00:07:37,947 --> 00:07:42,058
that this system on exactly the same form
X dot is Ax + Bu. Y is Cx.

85
00:07:42,062 --> 00:07:47,025
And one thing that I'm going to encourage
you to do is make sure that you go through

86
00:07:47,037 --> 00:07:52,065
the matrix multiplications here and
convince yourself that this choice of a,

87
00:07:52,172 --> 00:07:57,155
b, and c matrixes is actually corresponds
to the original dynamics that we had up

88
00:07:57,167 --> 00:08:02,932
here. but the point that I really want to
make with all this is You know what, x dot

89
00:08:02,944 --> 00:08:09,487
is Ax plus Bu, y is Cx, is a very general
way of writing down, the system dynamics

90
00:08:09,499 --> 00:08:15,641
that you have. And in fact, this is what's
called an LTI system. Linear time

91
00:08:15,653 --> 00:08:21,377
invariant system on state space form, and
we're going to see this a, b, and c.

92
00:08:21,582 --> 00:08:26,323
triple quite a lot in this course, because
they will show up over and over again. And

93
00:08:26,335 --> 00:08:30,778
they will allow us to be general about how
we reason about our systems. And then

94
00:08:30,790 --> 00:08:35,208
we're going to hide the particulars of the
dynamics inside the a, b, and c matrices.

95
00:08:35,321 --> 00:08:40,907
Before we move on to the next lecture
we're actually going to see a little bit

96
00:08:40,919 --> 00:08:45,962
more where these models come from. Let's
say a few words though about the

97
00:08:45,974 --> 00:08:51,713
dimensions of what we have here. If x is
an n dimensional vector so it's a Rn for

98
00:08:51,725 --> 00:08:56,840
the point mass on the line x is
2-dimensional or a 2D point where we

99
00:08:56,852 --> 00:09:02,342
control exploration x was 4-dimensional.
Anyway, x is in Rn, then A is an n by n

100
00:09:02,354 --> 00:09:07,411
matrix. If U is in Rm, meaning we have an
m dimensional inputs, then V is going to

101
00:09:07,831 --> 00:09:13,404
be an n by m matrix. And similarly if the
output is p dimensional, meaning we're

102
00:09:13,416 --> 00:09:18,953
sucking out p different things from our
system, then the C matrix is a. P by n

103
00:09:18,965 --> 00:09:25,456
matrix. And the reason this is right. you
can see that if you actually write down

104
00:09:25,468 --> 00:09:31,574
the equation. X dot is Ax plus Bu. Well, x
dot has to have the same dimension as x.

105
00:09:31,698 --> 00:09:37,195
So it has to be n by one. Now, I know that
a is n by n. And x is n by one. Whenever

106
00:09:37,207 --> 00:09:42,540
you have matrix multiplication like that.
The first thing is that these numbers have

107
00:09:42,552 --> 00:09:47,490
to be the same otherwise you cannot do
this multiplication. So you have to make

108
00:09:47,502 --> 00:09:52,895
sure these are the same. And when you end
up with n at the end, it's an n by one or

109
00:09:52,112 --> 00:09:58,155
n pieces here Which means that ax actually
becomes and n by one factor. Which is what

110
00:09:58,167 --> 00:10:02,830
we need, right? Because x dot n by one.
Similarly with b, b is n by m And you u is

111
00:10:03,164 --> 00:10:09,473
m by one, well these things cancel out
that they should and we end up with

112
00:10:09,485 --> 00:10:15,919
something that's n by one. If you look at
y similarly, y is p by one, well is p bt n

113
00:10:15,931 --> 00:10:20,579
and x is n by one. These guys cancel out,
and what we end up with is a P by one

114
00:10:20,591 --> 00:10:25,034
vector. And, it's important that the
dimensions lineup. So, as a sanity check,

115
00:10:25,133 --> 00:10:29,638
we're always going to be forced to insure
that the things that we build, have the

116
00:10:29,650 --> 00:10:34,403
right dimensions. And, if they don't have
these dimensions, then what we write down

117
00:10:34,415 --> 00:10:39,975
is actually nonsense, and we can't perform
these multiplications. Okay, that

118
00:10:39,987 --> 00:10:45,225
concludes the first lecture on linear
systems. And in the next lecture, we're

119
00:10:45,237 --> 00:10:49,650
going to see a little bit more where these
systems actually come from.