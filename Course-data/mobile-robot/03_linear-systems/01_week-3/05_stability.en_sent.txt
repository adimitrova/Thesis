so in the previous lecture, we did a lot of technical push ups to end up with end up with a description of what the solution to a general lti system is.
the reason for that is, is that i really, really enjoy rule, even though i do.
but that it will actually help us to characterize what these systems are doing.
and today, i want to talk about stability, because as you probably recall when we did a control design, first order of business is to design controllers so that systems don't blow up.
if they blow up, there's nothing we can do about it.
the quad rotors just fall out of the air.
the robots drive off to infinity.
the cars smash into things.
we don't want them to blow up, because the deciding objectives are almost always layered in this sense.
first order of business is stability.
then we want to track whatever reference character or reference point we have.
we also want it to be robust to parameter uncertainties, and possibly noise.
and then we can wrap other objectives around it, like when you want to move as fast, quickly as you can, or use as little energy when you're moving, or things like this.
but, regardless of which, stability is always the first order of business.
so let's start with scalar systems, no inputs.
so only the a matrix now, in this case x dot is little ax, which means that it's scalar.
well then the solution x of t is e to the a, we said t minus t naught x of t naught.
here i simply picked t naught to be equal to 0. so this is the solution.
okay, lets plot what this solution looks like.
if a is positive, then x of t it starts nicely and then pabaah.
its, its blowing up as far as i can tell.
so if a is positive this system blows up.
well, if a is negative, then e to the at, this is a decaying exponential.
so we get x to just go, , nice down to zero.
what happens if a is zero in between these 2?
well, then you have e to the zero t, which is 1. so then, x of t is simply equal to x naught.
x never changes.
so here, it didn't blow up, but it didn't actually go down to zero.
and in fact, what we have its, its really a sitution where three possible things can happen you blow up, you go down to zero, or you stay put.
so let's talk about these three cases.
the first case is what is called asymptotic, stability.
so the system is asymptotically stable if x goes to zero for all initial conditions, so this fancy upside down a, is known as the universal quantifier.
all we need to know is that when we see and upside down a the way we pronounce it is for all x nought.
so asymptotic stability means that we go to zero and almost always what we want to design our system so that x actually goes to 0 no matter where we start, that's asymptotically stability and as you recall, in the scalar case, a strictly negative corresponds to asymptotically stability.
and then we have unstability, instability where the system being unstable.
what that means is there exists an initial condition, so the flipped e, and to speak for the existential quantifier, which we read it as exists.
so it's unstable if there exists so many extra conditions from which the system actually blows up.
in the scaler case, we had a positive corresponding to instability.
and then we have something we call critical stability, which is somehow in between.
the system doesn't blow up.
but it doesn't go to zero either, and in fact, for the scalar system, this corresponded, corresponded to the, a equal to zero case.
so if you summarize that, if you have a scalar system then a positive means the system is unstable.
a negative means that the system is asymptotically stable, which is code for saying that the state goes to zero.
and a zero means critically stable.
okay.
let use this way of thinking now on the matrix case.
x. is ax, capital a. so this is now, x is a vector, a is a matrix.
what do we do there?
well, we can't just say.
oh, a is positive, or a is negative.
because a is a matrix.
it's not positive or negative.
but what we can do is we can go for the next best thing, which is the eigenva lues.
and, in fact, almost always, the intuition you get from a scalar system translates into the behavior of the eigenvalues of these matrices.
and for those of you who don't know what eigenvalues are, these are the special things that are associated with matrices.
so, if i have a matrix a; n by n, and i multiply it by a vector an n by 1 vector, if i can write it as the same vector times a scalar, then what this means is that the way that a acts on this vector is basically scaling it.
and the scaling factor is given by lambda.
if i can, if i can find lambda of v to satisfy this, then what i have is a lambda that is called an eigenvalue.
and it's actually not a real number.
it's typically a complex number.
so it's a, a slightly more general object than just a real number, but that's an eigenvalue.
and v is known as an eigenvector.
and eigenvalues and eigenvectors are really these fundamental objects in, in when you're dealing with matrices and when you want to understand how they behave.
and, whenever you think scalar first, you can almost always translate it into what do the eigenvalues, eigenvalues do for your systems.
and, the eigenvalues actually would tell you how the matrix a acts in the directions of eh eigenvectors.
so, you can almost think of them as scalar systems in the directions of the different eigenvectors.
and, you know, sometimes you may want to compute eigenvalues.
i don't.
so, if you use matlab.
you would just write, eig(a), and out pops the eigenvalues.
whatever software you, your comfortable with, you want to use c, or python, or whatever, there is almost always a library that allows you to compute eigenvalues.
and, the command is typically something like eig(a).
so, this would give you what eigenvalues are, given a particular matrix.
okay.
let's see what this actually means.
let's take a simple example here.
here's my a system.
1, 0, o minus 1. if you take eig a of this.
you get 1 eigenvalue being 1. and the other eigenvalue being negative 1. and the correspo nding eigenvectors are 1, 0, and 0, 1. okay.
what does this mean?
it actually means the following.
so let's say that this is x1, and this is x2.
okay.
v2 was 0, 1. so this was this direction.
so here is what, v2 is.
this is the direction in which v2 is pointing.
well, the eigenvalue there is negative 1, which means that, if you recall the scalar system, when a was negative, we had stability.
so if i start here, my trajectory is going to pull me down to zero.
nice and stable, and in fact, if i start here, it's going to pull me up to zero, nice and stable.
right.
so, if i'm starting.
on the x2 axis, my system is well behaved.
if i start on the x1 axis, i have lambda 1 being positive, which corresponds to little a being positive in the scalar case, which means that the system actually blows up.
so, here, the system goes off to infinity.
and, in fact, if i start here, my x2 component is going to shrink but my x1 component is going to go off to infinity.
so what i have is this is what the system actually looks like.
so the eigen vectors in this case will tell me what happens along different dimensions of, of the system.
so after all of this, if i have x dot as big ax, and i can find a solution, then the system is asymptotically stable, if and only if, for the scalar case, we had that little a had to be negative.
what we need in the matrix case is that the real part, remember that lambda are complex, the real part of lambda is strictly negative for all eigenvalues to a. for all, this is what asymptotic stability means for linear systems.
unstable means that there is one or more, but one single bad eigenvalue spoils the whole bunch.
so a single eigenvalue that has positive real part.
this is an, a sufficient condition for instability.
and we have critical stability only if so this is a, a necessary condition that says the real part has to be less than or equal to 0 for all igon values.
but where we are going to be spending our time is typically up here in the asymptotically stabl e domain, because what we want to do, is we want to design our system or our controllers in such a way that the closed loop system is asymptotically stable.
so we're going to somehow make the eigen values have negative real part that's going to be one of the design objectives that we're interested in.
and i want to point out something about critical stability that if one eigenvalue is 0 and the rest of the eigenvalues have negative real part, or if you have two purely imaginary eigenvalues so they have no real part, and the rest have negative real part, then you have critical stability.
and we will actually see that a little bit later on, but the thing that i really want to take, you to take with you based on this slide, is, you look at the a matrix, you compute the eigenvalues.
if the real part of the eigenvalues are all negative you're free and clear, the system is asymptotically stable.
if one or more eigenvalues have positive real part, you toast, your system blows up.
that is bad.
so, let's end with a tale of two pendula.
here is the normal pendula, well if you compute the of this, you get this matrix.
and the eigenvalues are j and negative j. well, i don't know if you remember, but on the previous slide, there was a bullet that said if you have 2 purely imaginary eigenvalues, which we have here.
we have 2 purely imaginary eigenvalues and then no more, then we have critical stability.
what this actually means is that, this pendulum, clearly, there is no friction or grav-, or damping here.
it's just going to oscillate forever.
it's not going to blow up.
and it's, , excuse me.
and it's not going to go down to zero.
it's just going to keep oscillating forever and ever.
it's critically stable system.
now, let's look at the inverted pendulum where i'm moving the base, but in that case, a is 0110. we already know, this things is going to fall over.
right?
so, if you compute the eigen values you get one eigen value to be equal to negative 1 and 1 to be positive 1, which means that, we have one rothton eigenvalue.
this eigenvalue that's going to spoil the system.
so this in an unstable system.
so now that we understand that eigenvalues really matter, and they really influence the behavior of the system, let's see, , excuse me, how we can use this to our advantage when we do control design.
