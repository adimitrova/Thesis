1
00:00:00,012 --> 00:00:05,049
So the outcome of last lecture was on one
hand a little bit exciting because what we

2
00:00:05,061 --> 00:00:09,790
did is we took the measurements that we
get and we try to use them as a, for as a

3
00:00:09,802 --> 00:00:14,560
way of designing controllers to stabilize
the system. We actually know how to

4
00:00:14,572 --> 00:00:19,355
stabilize systems. We need the real parts
of the eigen values are all strictly

5
00:00:19,355 --> 00:00:22,829
negative.
On the other hand, the outcome of the last

6
00:00:22,841 --> 00:00:27,723
lecture was wildly disappointing because
we couldn't actually do it. And the reason

7
00:00:27,735 --> 00:00:31,771
for that was that we only looked at the
output and not at the full state

8
00:00:31,783 --> 00:00:36,965
information. So today, we're going to look
at How do we design controllers when we

9
00:00:36,977 --> 00:00:42,201
take all of x into account, and not just
y. so if you recall this picture. What

10
00:00:42,213 --> 00:00:47,245
we're going to do today is simply say, you
know what? I don't care about y. In fact,

11
00:00:47,353 --> 00:00:52,548
forget about measurements. What comes out
here is x itself. And then, what can we

12
00:00:52,560 --> 00:00:58,604
actually do? Now, obviously. What we need
to which is the topic of the next modal is

13
00:00:58,616 --> 00:01:04,366
create a way of actually sucking out x
from y but for now lets just pretend for a

14
00:01:04,378 --> 00:01:10,269
moment that we do have access to the full
state information. Well if we have that

15
00:01:10,281 --> 00:01:15,603
first off we dont have to worry about y
what so ever So x dot is Ax plus Bu,

16
00:01:15,728 --> 00:01:21,823
forget about y. Then what we do is instead
of saying u is negative Ky, we're now

17
00:01:21,835 --> 00:01:27,867
going to say u is negative Kx, where K is
the matrix of various gains in it. In the

18
00:01:27,879 --> 00:01:33,999
previous example, it was just a scalar
with a 1 in it, but in general it could be

19
00:01:34,011 --> 00:01:40,127
a matrix. Now, just like last time, we
plug this choice of u Back into the

20
00:01:40,139 --> 00:01:46,613
equation for x., and then we get x., this
ax, plus bu, well u is negative kx. So

21
00:01:46,625 --> 00:01:52,294
then we can put everything together in
this matrix, a minus bk.

22
00:01:52,302 --> 00:01:57,710
And if we call this A hat, we all of a
sudden have a new system matrix and our

23
00:01:57,722 --> 00:02:02,727
job is to make A hat as pretty as
possible. Well in particular A hat is

24
00:02:02,739 --> 00:02:08,703
known as the closed loop dynamics because
now we have closed the loop of the system.

25
00:02:08,822 --> 00:02:14,975
We're feeding back the state information.
Into the system and in that way we are

26
00:02:14,987 --> 00:02:20,434
getting rid of the Ax's or x dot is Ax
plus Bu and we are getting x dot is A

27
00:02:20,446 --> 00:02:27,235
minus BKx and they control the sign task
from a stability point of is simply pick

28
00:02:27,247 --> 00:02:33,526
if possible K such that the closed-loop
system is stabilized and luckily for us we

29
00:02:33,538 --> 00:02:38,887
now know. Exactly what this means. It
means that the real part of the

30
00:02:38,899 --> 00:02:45,276
eigenvalues of the closed-loop dynamics, A
minus BK, has to be strictly negative. So,

31
00:02:45,397 --> 00:02:51,186
let's go back again to our simple robot to
see how can we understand this in the

32
00:02:51,198 --> 00:02:56,984
context of the simple robot. And arguably,
the entire next module, module 4, is going

33
00:02:56,984 --> 00:03:01,988
to be devoted to this question. How do we
pick K such that we can stabilize this

34
00:03:02,000 --> 00:03:06,910
system, get the eigen values we want? And
on top of that, how do we get around this

35
00:03:06,922 --> 00:03:11,531
rather peculiar conundrum where we only
have y but we would like to have x and

36
00:03:11,543 --> 00:03:17,378
we're going to pretend that we have X.
Well, that, we will have wait for. But for

37
00:03:17,390 --> 00:03:23,787
now, let's go back to the robot. Let's
note, though, first of all, that u is in

38
00:03:23,799 --> 00:03:29,595
r, and x is in r squared, or r2. And, in
fact, if u is negative kx. It's always

39
00:03:29,607 --> 00:03:35,482
useful to write down this kind of
dimensional analysis. Where x is n by 1.

40
00:03:35,802 --> 00:03:41,242
In this case, u is in general, let's say
that u is m x 1, in this case it's

41
00:03:41,254 --> 00:03:47,321
actually 1 x 1, then, from a dimensional
point of view, K has to be m x n, because

42
00:03:47,333 --> 00:03:53,644
otherwise it doesn't work out, so we have
to be able to cancel these things out, and

43
00:03:53,656 --> 00:03:59,482
out comes soemthing that's m x 1. So in
general, K is a m x 1 Matrix where m is

44
00:03:59,494 --> 00:04:06,095
the dimension of the output and the n is
the dimension of the state. Okay, in this

45
00:04:06,107 --> 00:04:12,436
case m by 1 means 1 by 2, we pick k1 and
k2 here, those are our control gains, we

46
00:04:12,448 --> 00:04:18,511
plug it to the A-Bk equation here. So this
is. This is a, this is b, and this is k,

47
00:04:18,620 --> 00:04:23,090
right? So if we do that, we get this
system. And we perform the matrix

48
00:04:23,102 --> 00:04:27,760
multiplication. I would encourage you to
make sure that I got the matrix

49
00:04:27,772 --> 00:04:32,358
multiplication right by doing it
yourselves. But, for now, let's just

50
00:04:32,370 --> 00:04:36,671
accept the fact that the close loop
dynamics becomes x dot, is 0, 1 minus k1

51
00:04:36,683 --> 00:04:41,832
minus k2x. Okay, so now we have this 2
knobs that we can tweak, k1 and k2, and w

52
00:04:41,832 --> 00:04:47,500
hen we tweak them, the eigen values of the
closed loop dynamics are going to move

53
00:04:47,512 --> 00:04:53,045
around. So, in the next module we'll be
systematic in terms of how we actually

54
00:04:53,057 --> 00:04:57,765
pick this case. For now.
Let's just put some case pull some case

55
00:04:57,777 --> 00:05:02,745
out of a hat. Oh, and I'm a lazy man, so
I'm pull once out of the hat. So let's

56
00:05:02,757 --> 00:05:06,968
just try k1 equals k2 equals to 1. Why
not? As a first, first attempt, at least.

57
00:05:07,078 --> 00:05:12,190
Well, if I plug this in to my A mius BK
equation, I get the following closed-loop

58
00:05:12,202 --> 00:05:17,456
system dynamics. And let's check the
eigenvalues of these things. So list write

59
00:05:17,468 --> 00:05:23,105
eig in MATLAB or whatever system you want
to use. if you do that, you'll find out

60
00:05:23,117 --> 00:05:26,805
that the eigenvalues are negative 0.5 -
plus minus something, something,

61
00:05:26,917 --> 00:05:32,305
something, j. What are the real parts of
the eigenvalues? Well the real parts of

62
00:05:32,317 --> 00:05:39,066
the eigenvalues. ,, . There, -0.5, so
there strictly negative, which of course

63
00:05:39,078 --> 00:05:45,406
is what we needed for stability. So we
have asymptotic stability, so we have in

64
00:05:45,418 --> 00:05:50,355
fact Achieved asymptotic stability. Now,
the other thing to note is that the fact

65
00:05:50,367 --> 00:05:55,045
that we have a J hanging around there,
meaning we have an imaginary component to

66
00:05:55,057 --> 00:05:59,840
our eigenvalues, that means that we can
expect oscillations in the way the system

67
00:05:59,852 --> 00:06:04,479
behaves. So we have an asymptotically
stable system with some oscillations

68
00:06:04,491 --> 00:06:08,859
floating around, and they are in fact
damped oscillations because, since the

69
00:06:08,871 --> 00:06:13,239
system is stable, the oscillations are
going to become smaller and smaller in

70
00:06:13,251 --> 00:06:18,079
amplitude, and as t goes to infinity, they
are going to in fact go away completely.

71
00:06:18,178 --> 00:06:22,837
So if I do this, then here is what it
looks like. As you can see very quickly we

72
00:06:22,849 --> 00:06:27,292
get close to the origin we overshot a
little bit and this because of these

73
00:06:27,304 --> 00:06:32,087
osculations. So lets see if we can do
something about these osculations. Well

74
00:06:32,099 --> 00:06:36,721
here is another attempt completely
arbitrary. I am going to make k1 smaller

75
00:06:36,733 --> 00:06:41,387
which means k1 tells me how much I react
to position and k2 tells me how much I

76
00:06:41,399 --> 00:06:47,765
react to volicity You can always think of,
almost think of this as a p parameter in a

77
00:06:47,777 --> 00:06:52,901
PID regulator, and this is the d parameter
i n the PID regulator. Because p is the

78
00:06:52,913 --> 00:06:57,845
position in this case, and d is the
derivative of position, which is velocity.

79
00:06:57,953 --> 00:07:03,152
And that's what k2 is, is affecting. Okay.
If I do that, then my new system matrix

80
00:07:03,164 --> 00:07:08,400
becomes this beast here. Well, let's check
its eigenvalues. In this case, the

81
00:07:08,412 --> 00:07:13,560
eigenvalues end up being these 2 numbers.
And they're real, which means we cannot

82
00:07:13,572 --> 00:07:18,770
expect, really, any oscillations. and even
better yet. The real and strictly

83
00:07:18,782 --> 00:07:23,480
negatives. So this is an asymptotically
stable system with no oscillation.

84
00:07:23,480 --> 00:07:28,360
Oscillations.
So, this seems like a pretty decent design

85
00:07:28,372 --> 00:07:34,715
to me. Let's see what it would actually do
to the robot. So the robot, eh, well, it's

86
00:07:34,727 --> 00:07:40,920
not oscillating but it's unbearably slow.
So, what we saw here is that we actually

87
00:07:40,932 --> 00:07:46,140
got rid of the oscillations but we got
assistance that was much more or sluggish

88
00:07:46,152 --> 00:07:50,525
in the sense that iti's slow and
borderline annoying from a performance

89
00:07:50,537 --> 00:07:55,405
point of view. But for now asymptotic
stability is achieved and what we saw we

90
00:07:55,417 --> 00:08:00,440
need to do is to be able to achieve
stability while doing other things at the

91
00:08:00,452 --> 00:08:05,130
same time. But one thing that is
absolutely clear is that some eigenvalues

92
00:08:05,142 --> 00:08:10,525
are better than others. And our design of
control gain, somehow, should be reflected

93
00:08:10,537 --> 00:08:15,450
by, what are good eigenvalues. So, some
eigenvalues cause oscillation. Some

94
00:08:15,462 --> 00:08:20,560
eigenvalues cause instability. Some
eigenvalues make the system Respond too

95
00:08:20,572 --> 00:08:25,508
slowly and so forth. So what I want to
leave you with now is it seems like state

96
00:08:25,520 --> 00:08:30,669
feedback is the way to go. Even though we
don't really know how to get to state yet.

97
00:08:30,777 --> 00:08:36,022
But we will by the end of the next module.
And we have to be careful and creative and

98
00:08:36,034 --> 00:08:41,321
clever in terms of how we select our
eigenvalues. And that's another topic for

99
00:08:41,333 --> 00:08:46,475
the next module. which is how do we
actually Select the appropriate

100
00:08:46,487 --> 00:08:51,813
eigenvalues to get the closed loop system
behavior that we want.