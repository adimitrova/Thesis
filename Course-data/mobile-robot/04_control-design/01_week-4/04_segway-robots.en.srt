1
00:00:00,012 --> 00:00:05,587
So, we now have a general procedure for 
designing controllers which is pole 

2
00:00:05,587 --> 00:00:09,247
placement. 
And the whole idea there is, we pick our 

3
00:00:09,247 --> 00:00:12,432
k such that the desired eigenvalues line 
up. 

4
00:00:12,432 --> 00:00:17,897
We also, in the last lecture, learned 
when it works and when it doesn't and the 

5
00:00:17,897 --> 00:00:21,330
key characteristic there was 
controlability or complete 

6
00:00:21,330 --> 00:00:24,325
controlability. 
We can do pole placement when we have 

7
00:00:24,325 --> 00:00:27,076
complete controlability. 
If we don't, we can't. 

8
00:00:27,076 --> 00:00:29,694
Simple as that. 
And in fact, it's not just pole 

9
00:00:29,694 --> 00:00:32,725
placement. 
If we don't have complete controlability, 

10
00:00:32,725 --> 00:00:37,190
we can't make the system do what we want 
meaning, we have to buy a new one, bigger 

11
00:00:37,190 --> 00:00:39,849
b matrix. 
There's nothing else we can do. 

12
00:00:39,849 --> 00:00:45,807
Today, in this lecture, I would like to 
unleash these awesome powers that we have 

13
00:00:45,807 --> 00:00:49,889
on a complicated robotic system, namely a 
Segway robot. 

14
00:00:49,889 --> 00:00:55,330
And in fact, this is a robot that's 
balancing on these two wheels, and in 

15
00:00:55,330 --> 00:00:59,730
fact, here at Georgia Tech, 
we have a Segway robot, known as the 

16
00:00:59,730 --> 00:01:03,089
golem crane in Professor Mike Stillman's 
lab. 

17
00:01:03,089 --> 00:01:08,678
And basically, the way a Segway robot 
works is that it's a unicycle, roughly a 

18
00:01:08,678 --> 00:01:12,174
unicycle, on top of which there is an 
inverted pendulum. 

19
00:01:12,174 --> 00:01:16,697
And luckily for us, we know how to model 
unicycles and inverted pendulas. 

20
00:01:16,697 --> 00:01:21,245
Now, I'm writing +... 
there because there's a little bit more 

21
00:01:21,245 --> 00:01:26,572
going on, but basically we're going to be 
moving while balancing this thing. 

22
00:01:26,572 --> 00:01:30,310
so, let's start with the base. 
The base is a unicycle, 

23
00:01:30,310 --> 00:01:33,740
x1 and x2, 
that's the x and y position of the base. 

24
00:01:33,740 --> 00:01:37,043
And it's v cosine psi, where psi is the 
heading. 

25
00:01:37,043 --> 00:01:40,885
And psi dot is still omega. 
We've seen this repeatedly. 

26
00:01:40,885 --> 00:01:44,106
So, this is the dynamics of the base, 
almost. 

27
00:01:44,106 --> 00:01:48,263
And then, on top of that, we have this 
inverted pendulum. 

28
00:01:48,263 --> 00:01:53,972
And as we've seen, we need phi, which is 
the angle by which the pendulum is 

29
00:01:53,972 --> 00:01:59,718
deviating from upright position and we 
also need the angular velocity to 

30
00:01:59,718 --> 00:02:04,801
describe what is going on here. 
Now, the inputs to a Segway robot are 

31
00:02:04,801 --> 00:02:09,148
torques, wheel torques. 
So, the left wheel torque and the right 

32
00:02:09,148 --> 00:02:12,850
wheel torque. 
And torques translates into forces, or 

33
00:02:12,850 --> 00:02:18,418
torques and forces translate into 
accelerations, but here in the unicycle, 

34
00:02:18,418 --> 00:02:23,606
these are, are old control inputs. 
The velocities now, since we have inputs 

35
00:02:23,606 --> 00:02:29,307
that acts as torques, we need to actually 
add v dot and omega dot into the 

36
00:02:29,307 --> 00:02:33,319
equation. 
So, v and omega are going to be extra 

37
00:02:33,319 --> 00:02:40,208
states, that's where the +... 
comes from because, what I have done is I 

38
00:02:40,208 --> 00:02:44,362
have added v and omega as states to my, 
my model. 

39
00:02:44,362 --> 00:02:49,916
So, what I really have in terms of the 
state of the system, well, it's the 

40
00:02:49,916 --> 00:02:55,785
position of the unicycle, the 
translational velocity, its orientation, 

41
00:02:55,785 --> 00:03:02,081
the angular velocity, and then phi and 
phi dot associated with the upright face. 

42
00:03:02,081 --> 00:03:06,683
And my inputs are these wheel torques, 
left and right wheel torques. 

43
00:03:06,683 --> 00:03:10,048
And in fact, if I write down the dynamics 
of this thing. 

44
00:03:10,048 --> 00:03:12,844
Well here, I just have the unicycle 
dynamics. 

45
00:03:12,844 --> 00:03:16,201
That's all that I'm saying here, this is 
unicycle dynamics. 

46
00:03:16,201 --> 00:03:20,236
And then, I have all these other 
derivatives that I need to solve and 

47
00:03:20,236 --> 00:03:23,647
compute. 
And if you sit down and do the math very 

48
00:03:23,647 --> 00:03:28,527
carefully or you look in a book or 
something, you got this mess here. 

49
00:03:28,527 --> 00:03:33,462
Wooh, this looks kind of horrible. 
Well, the first thing we do, of course, 

50
00:03:33,462 --> 00:03:37,282
when we have something like this is we 
linearize it. 

51
00:03:37,282 --> 00:03:42,732
This looks absolutely miserable. 
But if we linearize it, what we end up 

52
00:03:42,732 --> 00:03:48,552
with is a, an LTI system and, in fact, 
it's x dot is Ax+Bu, and I should point 

53
00:03:48,552 --> 00:03:54,433
out that what I've done, is I've 
linearized this around (x,u)=(0,0), which 

54
00:03:54,433 --> 00:03:59,477
means that I have zero torques and the 
position of the robot is at zero. 

55
00:03:59,477 --> 00:04:04,000
It's looking at the x direction and the 
pendulum is looking straight up. 

56
00:04:04,000 --> 00:04:08,938
So, I'm linearizing it around 0,0. 
And if you do that, you get the following 

57
00:04:08,938 --> 00:04:12,738
A and B matrices. 
Obviously, I'm not going to ask anyone to 

58
00:04:12,738 --> 00:04:15,640
[LAUGH] memorize this. 
I'm just showing you. 

59
00:04:15,640 --> 00:04:18,552
This is where the A and B matrices came 
from. 

60
00:04:18,552 --> 00:04:23,175
Now, before we even attempt pole 
placement, let's make sure that we can 

61
00:04:23,175 --> 00:04:26,524
indeed do it. 
So, the first thing we have to check now 

62
00:04:26,524 --> 00:04:31,197
for this system is controllability. 
And this is too big, right? So, I'm going 

63
00:04:31,197 --> 00:04:36,493
to go to MatLab right away and write, 
here's the controllability matrix of my A 

64
00:04:36,493 --> 00:04:42,998
and B, here's the rank, and out comes 6. 
Does anyone remember what n was in this 

65
00:04:42,998 --> 00:04:48,395
case? Well, I do. 
n was equal to 7, which means that the 

66
00:04:48,395 --> 00:04:53,642
rank of the controlability matrix was not 
equal to 7. 

67
00:04:53,642 --> 00:04:58,562
So, this is not a completely controllable 
system. 

68
00:04:58,562 --> 00:05:03,491
And the problem here is the unicycle. 
We've already seen that when we linearize 

69
00:05:03,491 --> 00:05:08,169
the unicycle, the dynamics gets messed 
up, we can't move in the y direction. 

70
00:05:08,169 --> 00:05:13,016
I don't know if you remember that but if 
you say an x and y is the position of the 

71
00:05:13,016 --> 00:05:16,841
unicycle, then we had y dot equal to 0. 
What that means is we have no way of 

72
00:05:16,841 --> 00:05:20,965
moving sideways basically. 
So, the unicycle is what's making life 

73
00:05:20,965 --> 00:05:25,631
hard for us here, so what I'm going to do 
is I'm just going to ignore the unicycle. 

74
00:05:25,631 --> 00:05:30,662
Say, that the position and orientation of 
the base, I don't care about that, but 

75
00:05:30,662 --> 00:05:35,518
what I care about is, the velocities, how 
quickly it's moving and how quickly it's 

76
00:05:35,518 --> 00:05:38,226
turning. 
So, I'm going to shave off x, y, or x1, 

77
00:05:38,226 --> 00:05:44,344
y, x1, x2 and psi from the state space 
and get a smaller system that has s 

78
00:05:44,344 --> 00:05:51,401
states, the velocity, translational 
velocity, angular velocity and these phi 

79
00:05:51,401 --> 00:05:57,717
and phi dot associated with the pendulum. 
If I do that, I get a 4 by 4 system with 

80
00:05:57,717 --> 00:06:03,472
the following A and B matrices, again, 
the actual numbers aren't that, that 

81
00:06:03,472 --> 00:06:06,917
important. 
Well, I go to MatLab, I write rank 

82
00:06:06,917 --> 00:06:10,737
controllability matrix, I get the answer 
being 4. 

83
00:06:10,737 --> 00:06:16,033
In this case, n was equal to 4. 
So, if I shave off the unicycle base from 

84
00:06:16,033 --> 00:06:20,202
my system, I get the completely 
controllable system. 

85
00:06:20,202 --> 00:06:25,137
Now, I can start controlling it. 
The last twist though before I do that 

86
00:06:25,137 --> 00:06:30,412
is, I want my system to actually move. 
So, I'm not going to stabilize it to v 

87
00:06:30,412 --> 00:06:34,417
and omega equal to zero, because that's 
not what I want. 

88
00:06:34,417 --> 00:06:39,827
Instead, I'm going to say, I would like 
it to go to v desired and omega desired. 

89
00:06:39,827 --> 00:06:43,099
So, let's just subtract away v desired 
and omega desired, 

90
00:06:43,099 --> 00:06:47,050
and then I have a 0 here because you want 
to stabilize it to phi and phi dot being 

91
00:06:47,050 --> 00:06:49,662
zero, 
meaning, the pendulum being upright. 

92
00:06:49,662 --> 00:06:53,973
I'm going to find a new state, 
x tilde, which is my old state minus this 

93
00:06:53,973 --> 00:06:57,832
delta which is the thing I would like to 
stabilize it to. So, this is my delta. 

94
00:06:58,951 --> 00:07:05,012
So, I have a new state. 
Well, what's the dynamics of the new 

95
00:07:05,012 --> 00:07:11,015
state? Well, delta x tilde dot is x minus 
delta dot, delta is constant so this is 0 

96
00:07:11,015 --> 00:07:13,747
so this is just x dot. 
So, it's Ax+Bu. 

97
00:07:13,747 --> 00:07:18,754
Well, I can write, I can add a minus 
delta and add in an A delta at the end 

98
00:07:18,754 --> 00:07:24,417
because then I have x tilde again here. 
so, if I do that, I get a new system and 

99
00:07:24,417 --> 00:07:29,378
here is the lucky part for us. 
A times delta turns out to be equal to 

100
00:07:29,378 --> 00:07:34,423
zero because of the structure of A so I 
get this thing going away. 

101
00:07:34,423 --> 00:07:39,829
I have x tilde here so my new system 
dynamics is the same as my old system 

102
00:07:39,829 --> 00:07:42,803
dynamics. 
x tilde dot is Ax tilde plus Bu. 

103
00:07:42,803 --> 00:07:46,536
And now, I want to stabilize this system 
down to the origin, 

104
00:07:46,536 --> 00:07:51,121
which means that the velocities are 
actually going to end up being equal to 

105
00:07:51,121 --> 00:07:54,829
the desired velocities. 
So, we have completely control of the 

106
00:07:54,829 --> 00:07:56,946
system. 
We wish to stabilize it. 

107
00:07:56,946 --> 00:08:00,679
We do pole placement. 
And again, like we talked about last 

108
00:08:00,679 --> 00:08:03,556
time, 
it isn't entirely clear how to pick the 

109
00:08:03,556 --> 00:08:07,168
eigenvalues. 
So, I played around with the eigenvalues 

110
00:08:07,168 --> 00:08:12,920
and this seemed to give a good response. 
I didn't want oscillations, so there are 

111
00:08:12,920 --> 00:08:17,428
no imaginary parts, and I picked lambda 1 
minus 19, lambda 2 minus 7.5, and so 

112
00:08:17,428 --> 00:08:20,579
forth. 
This is the smallest eigenvalue, it's 

113
00:08:20,579 --> 00:08:24,550
going to tell me how quickly, in general, 
the system responds. 

114
00:08:24,550 --> 00:08:29,786
So, with this, I'm going to pick u as -K 
not x but x tilde, which is the, the new 

115
00:08:29,786 --> 00:08:35,104
system I'm interested in. 
I get my close look dynamics like this. 

116
00:08:35,104 --> 00:08:40,823
And, in fact, the way I compute K is to 
use the, the place command in MatLab. 

117
00:08:40,823 --> 00:08:44,075
So, I type in my P and K is place A, B, 
and P. 

118
00:08:44,075 --> 00:08:49,975
So, this stabilizes the Segway robot. 
So now, the last thing we have to do is 

119
00:08:49,975 --> 00:08:53,680
to actually do it. 
And the reason why I'm okay with 

120
00:08:53,680 --> 00:08:58,692
neglecting the unicycle base and only 
controlling v and omega is that the 

121
00:08:58,692 --> 00:09:04,099
curvature of the path that's being traced 
by the Segway robot, actually is omega 

122
00:09:04,099 --> 00:09:07,102
over v. 
So, what I'm really controlling now is 

123
00:09:07,102 --> 00:09:11,232
the curvature of the path rather than 
where the actual robot is. 

124
00:09:11,232 --> 00:09:16,232
And what I can do in the simulation that 
I'm about to show you is basically, with 

125
00:09:16,232 --> 00:09:20,597
buttons, make v bigger or v smaller or 
omega bigger or omega smaller. 

126
00:09:20,597 --> 00:09:25,337
And in essence, what I'm doing when I'm 
changing v and omega is I'm changing v 

127
00:09:25,337 --> 00:09:30,877
desired and omega desired. 
So, that's the way I'm going to be giving 

128
00:09:30,877 --> 00:09:35,111
reference signals or commands to the, the 
unicycle robot. 

129
00:09:35,111 --> 00:09:41,727
So, with that, let's move to the actual, 
actually the simulation of an actual 

130
00:09:41,727 --> 00:09:45,522
Segway robot. 
So now, we're ready to see our developed 

131
00:09:45,522 --> 00:09:50,485
Segway robot controller in action. 
And I'm here with Greg Droge who is a 

132
00:09:50,485 --> 00:09:55,373
graduate student at Georgia Tech who will 
be showing us a simulation of the, the 

133
00:09:55,373 --> 00:10:01,037
Segway robot, so, Greg, what do you have 
to show us? Okay. 

134
00:10:01,037 --> 00:10:03,847
Here, we have a simulation of the Segway 
robot. 

135
00:10:03,847 --> 00:10:07,562
On the left, we have a 3D implementation 
of the graphics. 

136
00:10:07,562 --> 00:10:12,752
So, you can see that now, I'm able to 
drive it around changing the velocities. 

137
00:10:12,752 --> 00:10:16,752
Just as, just as Dr. 
Egerstedt mentioned with the keypad. 

138
00:10:16,752 --> 00:10:22,101
and you notice a few interesting things. 
Right here in the top right corner you 

139
00:10:22,101 --> 00:10:24,410
see the plot of the translational 
velocity. 

140
00:10:24,410 --> 00:10:27,895
The red line is the desired velocity and 
the blue line is the, the actual 

141
00:10:27,895 --> 00:10:30,229
velocity. 
And you see that it converts this very 

142
00:10:30,229 --> 00:10:34,245
quickly to the inputs that I give it. 
And on the middle, you see the rotational 

143
00:10:34,245 --> 00:10:38,129
velocity and you see because of the 
eigenvalues that we've chosen, that it 

144
00:10:38,129 --> 00:10:41,147
actually converges really slowly but it 
still converges. 

145
00:10:41,147 --> 00:10:45,992
And on the bottom you see that they're, 
the tilt angle will always keep the, the 

146
00:10:45,992 --> 00:10:48,425
robot stable. 
So, I have a question. 

147
00:10:48,425 --> 00:10:52,433
Are you simulating this on the 
linearization or on the full nonlinear 

148
00:10:52,433 --> 00:10:54,900
model? 
So, the simulation is on the full 

149
00:10:54,900 --> 00:10:58,436
nonlinear model. 
Aha, so I actually have a question. 

150
00:10:58,436 --> 00:11:00,735
So, linearizations are only valid 
locally. 

151
00:11:00,735 --> 00:11:04,700
do you have any sense for when this 
breaks? Meaning, can we make the robot 

152
00:11:04,700 --> 00:11:10,097
fall over, for instance? Yeah, so if you 
give it a really big huge step input of 

153
00:11:10,097 --> 00:11:14,287
the translational velocity you'll see 
that in the 3D simulation, it goes in a 

154
00:11:14,287 --> 00:11:17,353
full circle and it actually hit the 
ground. 

155
00:11:17,353 --> 00:11:19,882
Do, do that again. 
That was exciting. 

156
00:11:19,882 --> 00:11:23,062
Okay. 
Aha, so there, we actually get a feeling 

157
00:11:23,062 --> 00:11:25,847
for how good or reasonable the 
linearizations are. 

158
00:11:25,847 --> 00:11:30,521
And in this case, it's fairly reasonable, 
you can drive it around, but if you give 

159
00:11:30,521 --> 00:11:35,042
it really large desired velocities, it 
actually falls over. 

160
00:11:35,042 --> 00:11:36,250
Correct. 
Alright. 

161
00:11:36,250 --> 00:11:36,844
Thank you very much, 
Greg. 

162
00:11:36,844 --> 00:11:36,844
Yup. 
You're welcome. 