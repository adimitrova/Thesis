1
00:00:00,012 --> 00:00:04,809
Welcome to the module 4 of the course 
Control of Mobile Robots. 

2
00:00:04,809 --> 00:00:10,430
So, in the last module we've learned 
about linear systems and we saw where 

3
00:00:10,430 --> 00:00:16,187
they came from and at the end we even 
managed to control them a little bit and 

4
00:00:16,187 --> 00:00:19,602
in fact we felt rather good about 
ourselves. 

5
00:00:19,602 --> 00:00:24,222
because we could design a state feed back 
controller for a point mass that 

6
00:00:24,222 --> 00:00:28,962
stabilized it, but at the same time we 
were a little queasy and uneasy about 

7
00:00:28,962 --> 00:00:33,972
this whole thing because we had to have x 
meaning the state to do our control 

8
00:00:33,972 --> 00:00:37,207
design but in reality, we actually don't 
have x. 

9
00:00:37,207 --> 00:00:41,060
We have y, the output. 
So what this module is devoted to is 

10
00:00:41,060 --> 00:00:46,197
trying to first of all, be systematic in 
how we do the control design and, 

11
00:00:46,197 --> 00:00:51,831
secondly, how do we actually overcome 
this seeming paradox of needing x but 

12
00:00:51,831 --> 00:00:55,810
only having y. 
So what we're going to do in the first 

13
00:00:55,810 --> 00:01:01,890
lecture, is stabilize the point mass. 
We're going to return to our old friend, 

14
00:01:01,890 --> 00:01:07,896
and in general, if I have a linear 
system, x dot is Ax + Bu, y is Cx. The 

15
00:01:07,896 --> 00:01:13,793
dilemma, as I've already stated is that 
we seem to need x for stability but all 

16
00:01:13,793 --> 00:01:17,214
we really have is y. 
So here is the game play. 

17
00:01:17,214 --> 00:01:21,126
We're going to ignore the fact that we 
don't have y. 

18
00:01:21,126 --> 00:01:26,722
Instead we're going to design our 
controller as if we had the state itself 

19
00:01:26,722 --> 00:01:32,582
and then somehow we're going to hope that 
we can figure out the state from the 

20
00:01:32,582 --> 00:01:37,297
Measurements, meaning from y, and this is 
the game plan we're going to pursue 

21
00:01:37,297 --> 00:01:41,592
throughout this entire module. 
And, the first step is, of course to 

22
00:01:41,592 --> 00:01:45,542
design u as if we had x. 
So step one is to, do the control design 

23
00:01:45,542 --> 00:01:49,032
and we're going to use a method called, 
pole placement. 

24
00:01:49,032 --> 00:01:53,154
And, pole placement is a rather powerful 
idea. 

25
00:01:53,154 --> 00:01:58,857
So if I have my point mass system again, 
x dot is Ax+Bu, where we have our old 

26
00:01:58,857 --> 00:02:04,182
friends the A and B matrices that we've 
seen over and over again. 

27
00:02:04,182 --> 00:02:10,932
Well, state feedback means that, what we 
are going to do is we're going to pick u 

28
00:02:10,932 --> 00:02:15,207
is -Kx. 
Where K in this particular situation is a 

29
00:02:15,207 --> 00:02:19,124
1 by 2 matrix, so it has 2 components. 
k1 and k2. 

30
00:02:19,124 --> 00:02:22,866
And those are, are gains. 
And we've already seen in the previous 

31
00:02:22,866 --> 00:02:25,790
module, that k1 is a gain that looks at 
precision. 

32
00:02:25,790 --> 00:02:30,514
And k2 is a gain that looks at velocity. 
And by tweaking them, somehow, we can get 

33
00:02:30,514 --> 00:02:34,064
the system to be, behave well. 
'Cuz we've already seen that. 

34
00:02:34,064 --> 00:02:38,045
So, the one question we need to ask 
first, is, of course, is, how do we 

35
00:02:38,045 --> 00:02:42,367
actually pick these control gains? 
Meaning, what should k be? Well. 

36
00:02:42,367 --> 00:02:45,366
Here is the whole idea behind pole 
placement. 

37
00:02:45,366 --> 00:02:49,026
When we plug in U is minus KX we get a 
closed loop system. 

38
00:02:49,026 --> 00:02:54,002
And what we're going to do, is we're 
going to pick K such that the closed loop 

39
00:02:54,002 --> 00:02:58,872
system has the right eigenvalues. 
And right meaning, we get to pick them. 

40
00:02:58,872 --> 00:03:03,273
And the risk is called pole placement, 
its that eigen values of the system 

41
00:03:03,273 --> 00:03:07,781
matrices are sometimes referred to as 
poles and what we're going to do is we're 

42
00:03:07,781 --> 00:03:12,323
going to make them be what we want them 
to be, in particular we want them to have 

43
00:03:12,323 --> 00:03:16,897
negative real part because that is what 
we need for asymptotic stability. 

44
00:03:16,897 --> 00:03:21,837
So but before we do that we actually need 
to figure out how do we computer 

45
00:03:21,837 --> 00:03:27,843
eigenvalues? So in general, if I have a 
matrix M, this doesn't have to be a 2 by 

46
00:03:27,843 --> 00:03:33,488
2, this is just some general M, then 
every square matrix M has a so-called 

47
00:03:33,488 --> 00:03:37,031
characteristic equation associated with 
it. 

48
00:03:37,031 --> 00:03:42,154
And it's given by this chi M of lambda, 
and it's kind of a mouthful. 

49
00:03:42,154 --> 00:03:47,072
It's the determinant of lambda times the 
identity matrix -M. 

50
00:03:47,072 --> 00:03:49,947
And then we set this determinant equal to 
0. 

51
00:03:49,947 --> 00:03:55,902
And the lambdas that solve this are 
Eigenvalues, well, let's see what this 

52
00:03:55,902 --> 00:03:59,467
means. 
If I have a 2x2 system and equal to M1, 

53
00:03:59,467 --> 00:04:04,727
M2, M3 and M4 then lambda I, meaning 
lambda times the identity minus M. 

54
00:04:04,727 --> 00:04:11,674
Well it's lambda times the identity minus 
M, well, if you plug this in, you get the 

55
00:04:11,674 --> 00:04:17,174
following matrix. 
Okay, now, let's take the determinant of 

56
00:04:17,174 --> 00:04:22,154
this matrix. 
So the determinant, well, is this object 

57
00:04:22,154 --> 00:04:26,312
you get by taking this element times this 
element. 

58
00:04:26,312 --> 00:04:30,947
And then you subtract away this element 
times that element. 

59
00:04:30,947 --> 00:04:34,272
this is how you do it for 2 by 2 
matrices. 

60
00:04:34,272 --> 00:04:38,152
in general it can become even more 
complicated. 

61
00:04:38,152 --> 00:04:45,927
But in this case, I get this times that 
which shows up as lambda - m1 * lambda - 

62
00:04:45,927 --> 00:04:50,275
m4. 
And then I get -m2, or - - m2 * -m3, 

63
00:04:50,275 --> 00:04:58,073
which shows up like this. 
So this is the, the determinant of this 2 

64
00:04:58,073 --> 00:05:03,165
by 2 M matrix. Okay. 
We need to set this determinant equal to 

65
00:05:03,165 --> 00:05:08,306
zero, so aa, carrying out the 
multiplications we have second order 

66
00:05:08,306 --> 00:05:14,493
equation that we have to solve for lambda 
in order to be able to find Eigenvalues, 

67
00:05:14,493 --> 00:05:17,187
okay. 
Lets try to that, we have this 

68
00:05:17,187 --> 00:05:21,212
equation.The way we solve second order 
equations, 

69
00:05:21,212 --> 00:05:25,188
is while there are formulas for this it 
is possible to do it. 

70
00:05:25,188 --> 00:05:30,768
In this case it turns out that lambda is 
this rather annoying looking expression 

71
00:05:30,768 --> 00:05:36,077
here, but this is what the Eigenvalue, 
the 2 Eigenvalue to this 2x2 matrix would 

72
00:05:36,077 --> 00:05:37,658
be. 
But it is annoying. 

73
00:05:37,658 --> 00:05:42,276
I really don't want to do this. 
So the question is there an easier way of 

74
00:05:42,276 --> 00:05:45,943
making the Eigenvalues be what we would 
like them to be. 

75
00:05:45,943 --> 00:05:50,542
Turns out that the answer is, yes. 
There is something called the fundamental 

76
00:05:50,542 --> 00:05:54,274
theorem of algebra. 
And this fancy looking, or fancy sounding 

77
00:05:54,274 --> 00:05:58,543
theorem says that, if I have a 
polynomial, the roots to that polynomial 

78
00:05:58,543 --> 00:06:03,274
are determined by the coefficients, which 
means that you know what? I actually 

79
00:06:03,274 --> 00:06:07,518
don't have to solve this equation. 
Here I have coefficients in front of 

80
00:06:07,518 --> 00:06:12,636
lambda then here I have the coefficients 
that aren't in front of any lamda, those 

81
00:06:12,636 --> 00:06:17,070
coefficients alone are enough to 
implicitly but completely determined 

82
00:06:17,070 --> 00:06:19,873
eigen values. 
So what we're going to do is we're 

83
00:06:19,873 --> 00:06:24,018
actually not going to solve this. 
We're just going to stop here and say, 

84
00:06:24,018 --> 00:06:27,352
fine, lets start massaging the 
coefficients direct. 

85
00:06:27,352 --> 00:06:33,321
So if we go back to our point mass again. 
I pick u as -kx. 

86
00:06:33,321 --> 00:06:38,786
Then I get x dot is (A - BK) x We've seen 
this before. 

87
00:06:38,786 --> 00:06:47,073
this is the closed loop dynamics. 
And in particular if I plug in what k is 

88
00:06:47,073 --> 00:06:50,571
I get A - BK being this two matrices 
here. 

89
00:06:50,571 --> 00:06:55,474
And, if I compute that, I get 0, 1, -k1, 
-k2. 

90
00:06:55,474 --> 00:07:01,311
And I, encourage all of you to perform 
this multiplication at home, just to make 

91
00:07:01,311 --> 00:07:07,768
sure that you trust that this is indeed 
Now let's compute the igon values or at 

92
00:07:07,768 --> 00:07:14,635
least the co-efficients in this thing 
called the characteristic equation. 

93
00:07:14,635 --> 00:07:20,366
So, chi A minus BK lambda is the 
determinent of this matrix or the 

94
00:07:20,366 --> 00:07:25,562
negative of that matrix plus Lambda times 
the identity. 

95
00:07:25,562 --> 00:07:31,464
So, this is what I have here of course is 
lambda I - (A - BK). 

96
00:07:31,464 --> 00:07:38,924
And, if you compute this determinant, you 
get, lambda ^ 2 + lambda k2 + k1. 

97
00:07:38,924 --> 00:07:44,610
That's not so bad. 
And the neat thing here is that again, 

98
00:07:44,610 --> 00:07:50,352
all we care about These coefficients. 
The things that determine what the roots 

99
00:07:50,352 --> 00:07:53,752
are without us actually having to 
complete the roots. 

100
00:07:53,752 --> 00:07:58,167
Now why does that help us? Well, what 
we're going to do now is we're going to 

101
00:07:58,167 --> 00:08:01,332
pick our favorite eigenvalues in the 
whole world. 

102
00:08:01,332 --> 00:08:06,212
We're going to pick the eigenvalues that 
we would like the system to have, and if 

103
00:08:06,212 --> 00:08:10,572
we somehow magically manage to make the 
closed loop system have these 

104
00:08:10,572 --> 00:08:16,126
eigenvalues, then the characteristic 
equation would be lamda minus lamda 1 

105
00:08:16,126 --> 00:08:22,029
because the characteristic equation has 
to be 0 has to be lamda 1 as a root. 

106
00:08:22,029 --> 00:08:28,248
And if I plug in lamda 1, I get 0 here. 
Similarly if I plug in lamda 2 I get 0 

107
00:08:28,248 --> 00:08:33,180
here, and lamda and 0 here. 
So what I have is a product of lamda 

108
00:08:33,180 --> 00:08:37,807
minus these desired favorite eigenvalues 
in the whole world. 

109
00:08:37,807 --> 00:08:41,880
So let's do that. 
so for the robot or the point mass, I'm 

110
00:08:41,880 --> 00:08:46,713
going to pick both eigenvalues at -1. 
I need, I know that they need to have 

111
00:08:46,713 --> 00:08:51,752
negative real part, well, -1 is 
particularly simple Because then I get 

112
00:08:51,752 --> 00:08:57,542
this phi of lambda which is this desired 
characteristic equation, not the actual 

113
00:08:57,542 --> 00:09:00,837
characteristic equation but the desired 
one. 

114
00:09:00,837 --> 00:09:06,297
It's just lambda + 1 * lambda + 1 or, if 
I carry out this multiplication, I get 

115
00:09:06,297 --> 00:09:10,897
lambda ^ 2 + 2 lambda + 1. 
Now, what we need to do is simply line up 

116
00:09:10,897 --> 00:09:15,122
these coefficients with the actual 
coefficients that we have. 

117
00:09:15,122 --> 00:09:19,172
So if I do that, I see, this is the 
characteristic equation. 

118
00:09:19,172 --> 00:09:21,922
This is what I would like it to look 
like. 

119
00:09:21,922 --> 00:09:25,422
Well, here are the coefficients in front 
of lambda. 

120
00:09:25,422 --> 00:09:30,232
And here are these coefficients that are 
hanging out by themselves. 

121
00:09:30,232 --> 00:09:37,295
All we do now is simply line these up. 
So k2 has to be = 2, k1 has to be = 1 and 

122
00:09:37,295 --> 00:09:42,676
wahlah, I've actually designed the k 
matrix that I need. 

123
00:09:42,676 --> 00:09:50,305
So now all I do is I plug this in to my 
original system which is x dot is Ax + Bu 

124
00:09:50,305 --> 00:09:56,902
but I've closed the loop right now with u 
being -Kx and I have successfully 

125
00:09:56,902 --> 00:10:02,227
stabilized the system, by placing the 
eigenvalues exactly where I would like 

126
00:10:02,227 --> 00:10:02,890
them to be. 