1
00:00:00,012 --> 00:00:07,391
So with the last lecture, we are actually 
declaring success in terms of designing 

2
00:00:07,391 --> 00:00:11,608
controllers. 
The useful placement, which add 

3
00:00:11,608 --> 00:00:18,363
controllability, and off we go. 
the big problem, though, is well, we 

4
00:00:18,363 --> 00:00:22,144
don't have x. 
And we have to, when we do. 

5
00:00:22,144 --> 00:00:27,105
u=-Kx. 
Well, x is there, but we don't have it. 

6
00:00:27,105 --> 00:00:31,534
So, what about y. 
Ultimately, we don't have x. 

7
00:00:31,534 --> 00:00:38,680
We have y coming out of the system. 
And somehow, this Y has to translate into 

8
00:00:38,680 --> 00:00:42,372
a u. 
It's not enough to say x translates into 

9
00:00:42,372 --> 00:00:47,567
u because we actually don't have, y. 
Well here is the, cool idea. 

10
00:00:47,567 --> 00:00:50,762
I'm going to put a little magic block 
here. 

11
00:00:50,762 --> 00:00:56,832
And the output of that block, somehow 
should become x meaning I would like to 

12
00:00:56,832 --> 00:01:00,722
be able to take y push it through a magic 
block. 

13
00:01:00,722 --> 00:01:04,455
And get the state out. 
Now I'm not going to get x exactly, in 

14
00:01:04,455 --> 00:01:07,310
fact I'm going to put a little hat on top 
of it. 

15
00:01:07,310 --> 00:01:12,138
This is my estimate of a state. 
Meaning I'm taking my sensor measurments, 

16
00:01:12,138 --> 00:01:16,430
y and based on those measurements I'm 
going to estimate what x is. 

17
00:01:16,430 --> 00:01:20,072
And I'm going to call that x hat, in fact 
the magic block. 

18
00:01:20,072 --> 00:01:24,270
The thing that allows to get x from y is 
called an observer. 

19
00:01:24,270 --> 00:01:29,981
So in today's lecture I'm going to be 
talking about these observers and how do 

20
00:01:29,981 --> 00:01:34,493
we actually be design them. 
Well, it turns out the general idea 

21
00:01:34,493 --> 00:01:39,902
behind the observer design can be 
summarized in the predictor-corrector. 

22
00:01:39,902 --> 00:01:45,447
Under the predictor corrector banner. 
So, let's say that we have, a x is ax. 

23
00:01:45,447 --> 00:01:48,583
Forget about u for now, that doesn't 
matter. 

24
00:01:48,583 --> 00:01:51,067
And y is cx. 
Well, here is the idea. 

25
00:01:51,067 --> 00:01:55,576
The first thing we're going to do, is 
we're going to make a copy of this 

26
00:01:55,576 --> 00:01:58,531
system. 
And our estimator is going to be this 

27
00:01:58,531 --> 00:02:00,369
copy. 
So I'm going to have x. 

28
00:02:00,369 --> 00:02:01,274
is =. 
Sorry. 

29
00:02:01,274 --> 00:02:04,225
xhat. 
is = to Ax hat, so my estimate is 

30
00:02:04,225 --> 00:02:09,518
going to evolve, according to the same 
dynamics as my actual state. 

31
00:02:09,518 --> 00:02:15,898
And this is known as the predictor, which 
allows me to predict what my estimate 

32
00:02:15,898 --> 00:02:20,261
should be doing. 
But that's not enough, what I'm going to 

33
00:02:20,261 --> 00:02:26,140
do now is I'm going to add some kind of 
notion of a wrong, or right the estimate 

34
00:02:26,140 --> 00:02:29,605
is to the model. 
And one, one thing to note is the 

35
00:02:29,605 --> 00:02:35,776
actually output is Y, the output I would 
have had if the state was, was exact is 

36
00:02:35,776 --> 00:02:38,522
c*x hat * exact. 
So I'm going to compare y. 

37
00:02:38,522 --> 00:02:43,468
To c*x hat. 
And, in fact, what I do, is, I add the 

38
00:02:43,468 --> 00:02:46,501
piece to my predictor. 
So, x. 

39
00:02:46,501 --> 00:02:50,829
is ax or hat, + this difference. 
y-cx hat. 

40
00:02:50,829 --> 00:02:57,856
which tells me how wrong I am. 
And then I add some game matrix here, l. 

41
00:02:57,856 --> 00:03:01,661
And this. 
Gives me a predictor and a corrector. 

42
00:03:01,661 --> 00:03:06,826
So, this part here is the predictor, and 
this part here is the corrector. 

43
00:03:06,826 --> 00:03:12,598
And this kind of structure is known as a 
Luenberger observer named after David 

44
00:03:12,598 --> 00:03:18,291
Luenberger, but the point is that, when 
you have this predictor correct repair, 

45
00:03:18,291 --> 00:03:23,342
you have some way of hopefully figuring 
out the state, or at least a good 

46
00:03:23,342 --> 00:03:27,942
estimate of the state, from the 
measurements, y, that show up here. 

47
00:03:27,942 --> 00:03:32,267
So the only question now. 
Well, one question is, does it work? The 

48
00:03:32,267 --> 00:03:37,517
other question is, what is this L? So the 
first thing we should ask is, how do I 

49
00:03:37,517 --> 00:03:42,392
actually pick a reasonable L? Well the 
first thing we'll do. 

50
00:03:42,392 --> 00:03:49,475
Is, let's define an estimation error, e, 
as the actual state - my estimated state. 

51
00:03:49,475 --> 00:03:53,215
And I should point out that we don't know 
e. 

52
00:03:53,215 --> 00:03:58,813
Beacuse we don't know x .but we can still 
write down e as x-x hat. 

53
00:03:58,813 --> 00:04:05,452
Well, I would like E to go to 0, right. 
'Cuz, if I can make e go to 0, the x hat 

54
00:04:05,452 --> 00:04:09,467
goes to x. 
Which means that x hat is a good estimate 

55
00:04:09,467 --> 00:04:12,827
of x. 
So what I would like to do is actually 

56
00:04:12,827 --> 00:04:16,357
stabilize e. 
Make e asymptotically stable. 

57
00:04:16,357 --> 00:04:22,648
So, what we need to do first, is, write 
down the dynamics for my error equation. 

58
00:04:22,648 --> 00:04:29,687
So e dot well that's x dot-x hat dot. 
Well x dot is just Ax and x hat dot. 

59
00:04:29,687 --> 00:04:36,783
Well, we have this format the Ax hath+ 
L(y-Cxhath) and then we get the minus 

60
00:04:36,783 --> 00:04:42,375
signs in front of everything. 
so this is my estimation. 

61
00:04:42,375 --> 00:04:48,852
Now y Is equal to c*x, right? 
So what I actually have here is e dot 

62
00:04:48,852 --> 00:04:56,890
being A(x-xhat)-LC(x-xhat). 
But x-xhat is e so e dot is (A-LC)e. 

63
00:04:58,497 --> 00:05:02,712
This is the dynamics of the estimation 
error. 

64
00:05:02,712 --> 00:05:07,762
We don't know e but we know that this is 
the dynamics. 

65
00:05:07,762 --> 00:05:13,138
So what we need to do now, of course. 
Is pick L in such a way that the 

66
00:05:13,138 --> 00:05:18,548
eigenvalues to this matrix, A-LC, have 
negative real parts. 

67
00:05:18,548 --> 00:05:24,092
Because if we've done that, we've 
stabilized the estimation error. 

68
00:05:24,092 --> 00:05:28,545
And I wonder, I wonder how we should go 
about doing that. 

69
00:05:29,942 --> 00:05:32,802
Actually, I don't wonder, we know how to 
do it, pole-placement. 

70
00:05:32,802 --> 00:05:38,862
We know how to do control design this 
looks just like control design but it's 

71
00:05:38,862 --> 00:05:44,532
actually observier design. 
well, we wanted to import the values from 

72
00:05:44,532 --> 00:05:46,993
(A-LC) to be 
the negative. 

73
00:05:46,993 --> 00:05:50,126
So, let's just pole place away. 
Okay. 

74
00:05:50,126 --> 00:05:55,108
So here's an example. 
x dot equal to this, y is equal to that. 

75
00:05:55,108 --> 00:05:58,452
Fine. 
Now, I want my error dynamics to be 

76
00:05:58,452 --> 00:06:02,472
asymptotically stable, so if I write down 
A-LC. 

77
00:06:02,472 --> 00:06:09,337
And I should point out that in this case 
C is a 1x2, that means that L has to be a 

78
00:06:09,337 --> 00:06:13,595
2x1 because these things have to cancel 
out. 

79
00:06:13,595 --> 00:06:19,361
And I get a 2x2 left so L is actually a 
2x1 matrix in this case. 

80
00:06:19,361 --> 00:06:26,653
So, if I write down what A-LC is, it 
becomes this semi-annoying matrix but at 

81
00:06:26,653 --> 00:06:33,367
least we know what this matrix is. 
What do we do now? Well, we compute the 

82
00:06:33,367 --> 00:06:39,242
characteristic equation to A-LC. 
And if we do that, we compute the 

83
00:06:39,242 --> 00:06:44,892
determinant of lambda i. 
So this is the determinant of lambda i. 

84
00:06:44,892 --> 00:06:49,183
Minus A-LC. 
Right, if we compute that, we get the 

85
00:06:49,183 --> 00:06:53,780
following expression. 
Well, now we do what we always do in 

86
00:06:53,780 --> 00:06:58,010
these situations. 
We pick our favorite eigenvalues. 

87
00:06:58,010 --> 00:07:03,330
And it seems like I am very, very fond of 
lambda equal to negative 1. 

88
00:07:03,330 --> 00:07:08,348
If I do that, I get this as the desired. 
Characteristic equation. 

89
00:07:08,348 --> 00:07:12,956
Well, what do we do now? Well, we line up 
coefficients, of course. 

90
00:07:12,956 --> 00:07:18,259
These coefficients have to be the same, 
and these coefficients have to be the 

91
00:07:18,259 --> 00:07:21,383
same. 
And if you actually solve this, I'm not 

92
00:07:21,383 --> 00:07:25,941
going to go through the algebra. 
I encourage you to do it on your own. 

93
00:07:25,941 --> 00:07:29,546
You get that L 1 = -2/3. 
And L2 is a third. 

94
00:07:29,546 --> 00:07:39,790
And if fact, the way this would look my 
observer gain is well, L1 was -2/3, there 

95
00:07:39,790 --> 00:07:44,282
is L1. 
And L2 was the third which is there. 

96
00:07:44,282 --> 00:07:52,027
So my observer dynamics is x dot. 
Well, x hat dot is Ax hat plus this is 

97
00:07:52,027 --> 00:07:56,745
L*Y-CL. 
So this is my observer dynamics. 

98
00:07:56,745 --> 00:08:03,460
What I'm showing here in the plot in 
blue, this is x1, the actual x1 and how 

99
00:08:03,460 --> 00:08:07,367
it's evolving and in red you see my 
xhat1. 

100
00:08:07,367 --> 00:08:13,271
and you see that after a while, they end 
up on top of each other very nicely. 

101
00:08:13,271 --> 00:08:19,542
Similarly, in the right figure, in blue, 
you have x 2, and in red, you have x hat 

102
00:08:19,542 --> 00:08:22,334
2. 
And as we can see, the state, the 

103
00:08:22,334 --> 00:08:26,412
estimated state, x hat, thus, indeed 
converge 2. 

104
00:08:26,412 --> 00:08:30,435
The actual set. 
So here is what's going on right now. 

105
00:08:30,435 --> 00:08:36,317
I have x as Ax, y is Cx out of this thing 
I can suck y right? Because that's what 

106
00:08:36,317 --> 00:08:42,418
I'm seeing, these are the measurements. 
What I'm doing now is I'm feeding this y 

107
00:08:42,418 --> 00:08:48,366
into my server That has a predictor part, 
which is the dynamics, plus a corrector 

108
00:08:48,366 --> 00:08:53,614
part, which looks at the difference 
between the actual output and what the 

109
00:08:53,614 --> 00:08:56,733
output would have been if x hat was my 
state. 

110
00:08:56,733 --> 00:09:01,503
And then out of this comes x hat. 
Which means that we have some way of 

111
00:09:01,503 --> 00:09:04,802
figuring out what the state of the system 
is. 

112
00:09:04,802 --> 00:09:07,330
Now, obvious questions are. 
Well, well. 

113
00:09:07,330 --> 00:09:11,867
There's only 1 question, actually. 
Does this work? And the answer is, no. 

114
00:09:11,867 --> 00:09:15,760
It doesn't always work. 
Just like pole placement doesn't always 

115
00:09:15,760 --> 00:09:20,239
work when you're doing control design. 
For the same reason pole placement 

116
00:09:20,239 --> 00:09:23,144
doesn't always work when we do observer 
design. 

117
00:09:23,144 --> 00:09:27,648
And, what we need is we need something 
that's related to controllability. 

118
00:09:27,648 --> 00:09:32,819
So, controllability tells us. 
Do we have enough control authority, are 

119
00:09:32,819 --> 00:09:37,426
actuater is good enough. 
Well, for observer design, the concept is 

120
00:09:37,426 --> 00:09:42,817
known as observability, which means do i 
have a rich enough y, meaning rich enough 

121
00:09:42,817 --> 00:09:47,532
sensor suite so that I'm able to figure 
out what the system is doing. 

122
00:09:47,532 --> 00:09:54,112
Meaning estimate, estimate x from y. 
And the topic of the next lecture is 

123
00:09:54,112 --> 00:10:00,218
exactly this observability. 
When can we indeed figure out x from y. 