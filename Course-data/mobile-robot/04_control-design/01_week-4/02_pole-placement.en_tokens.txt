so
,
in
the
last
lecture
,
we
saw
that
it
was
possible
to
pick
the
eigenvalues
of
the
closed
loop
system
in
such
a
way
that
they
became
equal
to
some
desired
eigenvalues
.
for
the
particular
case
of
the
point
mass
robot
.
now
,
today
,
i
want
to
be
a
little
bit
more
general
.
in
terms
of
,
how
do
we
go
about
doing
this
for
,
arbitrary
and
linear
systems
.
and
again
,
the
whole
idea
here
is
that
we
pick
our
control
gains
such
that
the
actual
eigenvalues
of
the
closed
loop
system
,
becomes
equal
to
the
desired
eigenvalues
.
so
,
this
is
the
whole
the
whole
idea
of
philosophy
behind
this
,
this
approach
.
so
,
lets
say
that
the
characteristic
equation
associated
with
my
closed
loop
system
.
so
,
this
is
the
,
again
the
determinant
.
of
(
lambda*i-
(
a-bk
)
)
.
that
's
what
this
equation
here
says
.
well
,
let
's
assume
that
if
i
compute
this
i
get
the
following
expression
.
well
,
what
i
now
do
is
i
pick
my
favorite
eigenvalues
.
what
i
would
like
and
in
this
case
the
lambda
i
's
are
my
favorite
eigenvalues
.
so
what
i
have
is
an
actual
characteristic
equation
,
which
is
this
thing
.
and
one
that
i
would
have
had
,
had
indeed
the
eigenvalues
been
equal
to
my
favorite
eigenvalues
.
and
all
i
do
now
is
line
up
the
coefficients
.
so
i
take
bn-1
has
to
be
equal
to
an-1
.
now
,
i
'm
writing
an-1
as
a
function
of
k
because
it
really
is
.
k
is
the
control
knob
or
the
control
gain
that
we
have
to
solve
these
n
equations
for
.
so
this
is
the
general
procedure
and
it
seems
magic
,
it
seems
so
we
can
control
anything
.
so
the
first
question
we
should
ask
is
,
is
this
always
possible
?
the
second
question
is
,
well
.
where
do
these
the
side
eigenvalues
come
from
?
and
the
third
is
,
you
know
what
determinants
are
not
that
fun
to
compute
.
2
by
2
,
fine
.
but
when
we
go
to
higher
order
systems
,
it
becomes
a
pain
.
now
,
the
first
answer
is
,
unfortunately
.
this
is
n't
magic
,
we
ca
n't
always
do
it
.
so
,
what
we
need
to
understand
is
in
fact
when
we
can
do
it
and
when
we
can
not
do
it
.
the
answer
to
the
other
question
is
,
unfortunately
there
is
n't
a
recipe
book
that
says
here
are
the
eigenvalues
you
need
to
use
.
in
fact
,
it
's
a
little
bit
of
an
art
and
science
,
and
the
design
choices
that
we
make
ultimately
boil
down
to
the
choices
of
eigenvalues
.
so
we
have
to
discuss
a
little
bit
about
how
we
pick
our
eigenvalues
.
now
luckily
for
us
,
that
's
the
answer
to
the
third
question
.
we
do
n't
have
to
actually
compute
this
.
in
,
in
math
lab
,
we
can
very
easily
use
comething
,
something
called
the
place
command
.
so
if
i
have
my
a
and
b
matrices
and
i
wrote
down
a
vector
of
my
favorite
eigenvalues
,
then
i
simply
run
k=place
(
a
,
b
,
p
)
to
compute
this
k
matrix
that
gives
us
the
desired
eigenvalues
.
cool
.
okay
,
let
's
do
some
examples
.
here
is
x
dot
is
whatever
x
plus
whatever
u.
these
are
2
arbitrary
a
and
b
matrixes
.
well
,
we
're
going
to
have
to
pick
a
k
and
again
,
k
in
this
case
has
to
be
1x2
.
and
the
reason
we
see
that
is
a
is
2x2
.
b
is
2x1
.
that
means
that
k
has
to
be
1x2
.
because
these
guys
have
to
be
the
same
.
they
cancel
out
and
what
i
end
up
with
has
to
be
of
the
right
.
dimension
.
so
,
that
's
why
k
,
in
this
situation
,
has
to
be
a
1
by
2
matrix
.
so
if
i
compute
this
,
i
get
the
following
matrix
.
well
,
here
is
the
characteristic
equation
,
or
the
,
this
determinant
.
this
should
be
=
to
0.
but
we
're
actually
not
going
to
solve
it
.
all
we
're
going
to
do
is
,
we
're
going
to
compute
this
determinant
.
and
again
.
the
way
compute
the
determinants
is
this
times
this
minus
this
times
this
.
and
if
you
do
that
in
this
particular
case
,
you
get
the
following
equation
.
here
is
one
coefficient
that
we
're
going
to
have
to
mess
with
,
and
here
is
the
other
coefficient
that
we
're
going
to
have
to
.
to
mess
with
.
cool
.
so
,
moving
on
,
this
is
our
characteristic
equation
.
let
's
say
again
for
the
sake
of
argument
that
we
want
to
place
both
our
eigenvalues
in
negative
1
,
then
this
is
what
we
would
have
had
,
had
this
been
indeed
true
.
so
now
i
'm
going
to
have
to
solve
its
.
these
two
being
equal
and
these
being
equal
.
those
are
the
equations
that
we
are
forced
to
solve
.
so
,
you
do
that
,
first
of
all
for
the
coefficient
in
front
of
lambda
then
we
get
that
,
after
a
while
,
k1+k2=5
well
lets
look
at
the
coefficients
in
the
form
of
of
lamba^0
,
which
means
no
lambdas
.
if
we
do
that
we
get
k1+k2=1
.
hey
,
wait
a
second
.
this
is
trouble
is
n't
it
?
k1+k2=5
and
k1+k2=1
this
does
n't
seem
all
that
promising
,
in
fact
it
's
impossible
.
it
ca
n't
be
two
things
at
the
same
time
.
so
here
,
all
of
a
sudden
,
we
failed
.
we
ca
n't
actually
solve
this
.
and
,
what
's
really
at
play
here
is
a
lack
of
something
called
controllability
.
and
controllability
is
this
key
term
that
describes
if
we
have
enough
influence
or
control
is
already
over
our
system
,
and
when
i
said
that
it
is
not
over
responsible
to
do
power
placement
.
this
is
exactly
what
i
mean
.
if
we
do
n't
have
enough
control
as
provided
we
can
do
anything
.
nn
fact
,
you
can
do
nothing
in
that
case
,
you
just
have
to
hope
for
the
best
or
hold
your
nose
.
but
we
'll
,
we
'll
talk
about
that
in
a
little
bit
late
a
little
bit
later
.
so
for
now
,
this
is
what
can
go
wrong
,
lack
of
controllability
.
we
do
n't
know
what
controllability
is
yet
but
that
's
something
to
be
aware
of
.
now
,
let
's
pretend
that
we
could
do
it
though
.
how
do
we
pick
the
eigenvalues
?
well
.
it
's
not
clear
,
like
i
said
.
but
some
things
we
should
keep
in
mind
is
.
well
,
if
the
eigenvalues
have
a
non-zero
imaginary
part
.
alright
,
well
first
of
all
,
let
's
say
that
sigma+jomega
is
an
eigenvalue
.
then
there
has
to
be
another
eigenvalue
.
in
this
case
i
call
it
lambda
j.
there
has
to
be
another
one
that
is
the
complex
conjugate
pair
of
this
because
eigenvalues
have
to
show
up
in
conjugate
complex
pairs
if
indeed
they
are
.
complex
.
so
that
's
the
first
thing
that
we
should
keep
in
mind
,
that
we
ca
n't
just
assign
an
,
one
complex
eigenvalue
.
we
have
to
assign
two
,
if
that
's
the
case
.
the
other
thing
is
,
of
course
,
we
need
the
real
part
of
the
eigenvalues
to
be
strictly
negative
,
because
otherwise
,
we
do
n't
have
asymptotic
stability
.
the
other
thing
to
know
is
that
if
,
indeed
,
we
keep
an
imaginary
part
around
,
we
get
oscillations
.
so
,
oscillations
,
if
that
's
something
we
would
like
,
typically
we
do
n't
,
but
,
so
if
you
do
n't
like
oscillations
the
eigenvalues
we
pick
are
all
real
.
if
for
,
for
some
reason
wanting
oscillations
,
then
we
have
to
introduce
.
imaginary
parts
.
and
the
last
thing
is
that
the
choice
of
eigenvalues
actually
affect
the
rate
of
convergence
,
meaning
how
quickly
the
system
is
stabilized
.
and
in
fact
the
rate
of
convergence
is
dominated
by
the
smallest
eigenvalue
.
so
let
's
say
that
i
've
actually
picked
a
bunch
of
eigenvalues
here
.
i
've
done
poll
placement
,
so
here
are
my
eigenvalues
,
my
lambdas
.
and
they
happen
to
be
here
,
here
,
here
,
here
,
and
here
in
the
complex
plane
.
notice
here
that
here
i
have
a
complex
conjugate
pair
.
well
,
the
eigenvalue
that
's
closest
to
the
imaginary
axis
is
the
smallest
eigenvalue
.
and
this
eigenvalue
actually
dominates
the
performance
,
in
terms
of
how
quickly
the
thing
converges
.
so
what
you
could
do
,
is
if
you
make
all
your
argmin
values
equal
to
minus
a
million
,
then
you
have
a
really
,
really
,
really
,
really
fast
system
.
the
problem
is
that
if
you
make
them
really
,
really
really
fast
you
get
really
large
control
signals
which
means
that
any
physical
actuators
going
to
saturate.so
,
you
do
n't
wanted
to
go
super
fast
because
then
your
saturated
actuators
so
its
that
what
we
need
to
do
is
some
how
play
around
with
these
things
to
balance
a
low
bit
aa
how
fast
or
how
slow
you
want
your
systems
to
be
versus
what
size
the
control
signal
should
be
so
let
's
investigate
these
few
concepts
a
little
bit
and
we
're
going
to
do
it
in
matlab
.
so
i
've
picked
some
matrixes
randomly
,
these
are
my
system
matrixes
and
then
i
picked
some
poles
or
eigenvalues
.
in
this
case
,
i
've
picked
a
complex
conjugate
pair
,
-0.5+-j
,
which
you
have
to
write
as
1i
in
matlab
.
and
then
,
i
run
pole
placement
.
k=place
(
a
,
b
,
p
)
.
and
then
,
all
i
do
is
i
compute
the
solution
.
so
instead
of
me
chitchatting
about
this
,
why
do
n't
we
switch
over
to
it
's
a
matlab
here
,
and
i
actually
see
it
happen
.
so
here
is
the
same
piece
of
code
that
you
just
saw
.
this
is
the
eigenvalues
.
and
if
you
run
this
,
we
see
that
we
have
a
system
that
slowly
,
slowly
,
decays
down
to
0
,
possibly
.
but
,
there
are
oscillations
going
on
there
,
right
?
clearly
,
because
i
have
.
imaginary
eigenvalues
.
now
,
the
real
parts
here
,
-0.1.
they
're
determining
how
quickly
the
system
is
converging
.
so
if
i
,
instead
,
use
this
p
matrix
here
.
same
imaginary
part
.
but
a
larger
negative
,
real
part
.
then
i
should
get
a.
oscillatory
response
but
faster
and
if
i
do
that
we
see
here
what
's
happening
.
this
is
the
new
system
it
's
still
oscillating
but
it
's
quicker
getting
down
to
0
which
is
what
we
would
expect
.
now
let
's
get
rid
of
the
oscillations
altogether
.
so
if
i
now
pick
2
purely
.
real
eigenvalues
.
and
,
in
fact
,
the
smallest
one
is
negative
0.5.
so
that
's
going
to
determine
how
quickly
we
're
moving
.
we
run
this
,
then
,
bam
!
see
here
.
no
oscillations
.
we
're
decaying
down
to
zero
,
quite
nicely
.
but
,
maybe
we
're
thinking
that
this
is
a
little
bit
too
slow
.
so
let
's
pick
some
other
eigenvalues
here
.
in
fact
,
negative
5
and
negative
4.
this
should
be
dramatically
quicker
.
and
if
i
do
that
,
bam
.
i
get
this
.
bam
,
very
quickly
down
to
0
,
tiny
bit
of
overshoot
,
and
then
we
're
stabilizing
.
so
this
is
how
we
're
going
to
have
to
play
around
a
little
bit
with
the
ion
values
to
get
the
system
performance
out
that
we
're
interested
in
.
next
time
,
we
're
going
to
investigate
a
little
bit
more
.
what
exactly
was
it
that
broke
?
when
we
could
n't
place
the
eigenvalues
the
way
we
wanted
.
