sound 
okay 
so as you know, we were just talking to 
martin, and he was telling us a bit about 
rjdj 
weve heard from marko 
markos been telling us about how to use 
sliders 
and weve also done some stuff last week 
on sliders and building them and stuff 
and, you know, matts been doing this 
stuff with you about, playing back sounds 
in rhythm to a sequence 
so, what im doing is im going to show 
you an application that we developed, i 
just briefly touched upon with martin 
im just going to im going to set it 
running again for you 
but i want you to just kind of pay 
attention to the little things i do 
as im doing them, im going to briefly 
explain what they are, then im going to 
go through the whole application in 
detail 
explain how it works 
then were going to discuss it with me 
and marco and matt at the end just so 
that we can make sure weve got 
everything covered 
this is like a fully fledged music 
application 
its sonically quite advanced 
its just bare minimum on the user 
interface, it just has the interaction, 
so you could use quite a lot of the 
techniques that are in this to make your 
own thing 
but lets just see what it sounds like 
again and see where we, we are with it 
music okay, here we are 
so you can hear weve got a drum machine 
lets just turn the two synths down, so 
we can hear these these, these drums 
here 
weve got a bass drum, we got a snare 
drum and you can see, im pointing at a 
snare drum hit 
music that one and that one 
and theres a blue line that tracks 
across telling us where in a drum beat we 
are 
the second line in the drum, in the drum 
machine is this 
you hear that 
thats the 
inaudible 
the clap 
so the claps going on the in between 
beats in between the base and the snares 
you got a classic techno feel 
and as matt was saying all of the sounds 
were using come straight from your 
standard kind of  or  drum machine 
and thereof music so, what else can it 
do 
well, weve got two synthesizers 
we can play these inaudible 
synthesizers individually, and we can 
vary a whole range of parameters for 
them 
theyre fully fledged synthesizers 
we can write waveforms for them 
if youre interested in synthesis and you 
know a little about it i think youll 
find this one interesting 
but if you dont, its still really 
usable and i need you to get your head 
around it 
we can write waveforms, we can add a 
filter, we can change the quality of the 
filter 
now lets just have a listen to the 
filters, im want to turn one of them up 
music so heres one of the synths 
im going to change the filter 
music music ive also got this 
resonance 
and this filter out 
we could also change the release and the 
attack 
so were giving it an envelope 
and it creates that kind of acid techno 
feel 
if i change the attack actually with 
something like this 
music just makes it quieter 
we can transpose any of the channels 
so ill change the key of the entire 
sequence 
and then again 
and then if i want music 
you just go back to where you were, more 
or less 
and also, i can add some delay 
music and ive got a second one here as 
well 
now, the beat that im altering at the 
moment is the actual music inaudible 
sequence of notes that it plays 
now, i can select a sequence of high 
notes, like this, or a sequence of low 
notes 
and just like in the example that matt 
was showing you inaudible music drum 
machine 
theres  steps, so i can change two of 
the notes 
there you go 
ive got the fill trap as well and ill 
do this stuff 
music 
thats quite pleasant 
we have resonance 
music thats distorting quite a lot 
i dont really mind 
i can add some more delay 
music add a few claps 
music and some more snares 
maybe a cymbal 
music 
you gotta take, 
so thats a basic music machine 
music its a common thing that you can 
easily sell on the upstart for, i dont 
know, actually music apps 
lets talk about this for a minute 
music apps go for quite a lot more money 
than other kind of apps 
you can sell an app like this for much 
more than three quid on the inaudible 
on the ios app store 
you can probably sell it for five to six 
pounds or more 
or if youre in america, that would be 
dollars 
i imagine that like  or  out of 
inaudible, what is, what are pounds and 
dollars anyway 
who cares 
anyway, theyre much more expensive and 
theyre much more specialist but theyre 
still theyre still really useful 
and i think something like this, i mean 
as something really famous, well, theres 
a really famous unknown app which is 
built on, based on a and oldfashioned tv 
r synthesizer and a nice inaudible 
drum machine in which still sells in its 
droves 
and all the people do is complain about 
how unusable it is 
so im not that worried that ours is 
knocked out quite quickly 
it is knocked out quite quickly, but it 
is powerful, and you can build on it to 
do more interesting things 
and you could use some of the other stuff 
weve done to play some loops 
by there are some complexities to this 
and i want to show that you know, what 
they are, so im going to quit this 
temporarily and just go back to the basic 
version before i continue with that 
just see you can see in the most simple 
possible way what it is that were doing 
so you go all this stuff for free as i 
was describing before 
as ive said every week, you know, you 
can just go to your lessons 
but this time were in week six 
week six has got a bunch of small tests 
in it 
its got a small drum machine, and ts 
got this thing called synth test 
so, were going to have a quick look at 
this synth test 
just because its a easier code to, to 
look at 
its got the gooey code in it 
it doesnt have the drum machine it just 
has one synthesizer 
and yeah 
there you go 
its just one of the synths 
music music now, cough so you can 
see here its the same, and it basically 
allows me to set the pitch, change the 
filter, change the resonance 
same old same old 
lets have a look at it 
so we start off as we normally start off 
by declaring a maxim context 
if i can just make this a little bigger 
so you can see 
so this is whats happening on the audio 
behind it, as, you know when martin was 
here we were talking about the web audio 
api 
so, behind this is all web audio 
and the maxim js, the maxim js file, 
which is here has got all of this stuff 
in the background 
now, if youre interested in this sort of 
stuff, and you want to learn more about 
how we built max and js 
you can always post questions on the 
forums 
and the tas will manage those and any 
really important questions where we feel 
weve got some material we can really 
help you with we can point you towards a 
good answer 
and also there are lots of other places 
like musicdspcom and other sites like 
that can help you understand what it is 
thats gone into building this 
but you dont really need to if you just 
want to get started 
we just have to have a context, and maxim 
provides the context 
also, weve got an audio file player 
actually, were not using that here, so 
thats not going to matter 
instead of using the audio file player, 
which is what weve been using most of 
the time, were using a synth 
so, maxim can have a synth and ive 
called this synth waveform 
now, the thing about a synth that makes 
it different to an audio file player is 
you can write in an array of values 
between minus  and  
and that will define the texture of the 
sound which youre creating 
now, most synthesizers have a number of 
different wave forms 
and theres lot of different approaches 
to creating wave forms 
um, cough and in one of the other 
examples that weve got in this folder 
theres a really easy way of gyrating 
wave forms but essentially, youre just 
writing numbers between minus  and  
into an array which is of a particular 
length 
so well be talking about how to do that 
in a moment 
so we have our synth 
its called waveform, and were writing a 
waveform into it, which is what makes the 
sound 
weve got a play head 
now, the play head, as matt was 
describing, is, its literally the thing 
which tells us how many, how many frames 
there have been 
and we use that to work out whether we 
should trigger a new beat 
okay 
so weve also got, this array called 
notes, which is an integer array 
and it holds midi notes 
if you know about music, then youll know 
what midi is 
if you dont really know about music and 
music technology, youve probably never 
heard of it 
its called musical instrument digital 
interface 
its a specification 
for a numbering system that relates to 
musical notes and musical information 
so these midi notes normally what they 
represent are all the keys on the 
keyboard 
theyre bit numbers, which means that 
they go for a range of  to  
theres  independent values, the 
lower, the number, the lower, the note 
so, im right down the bottom end of the 
piano, as you can see 
with all these numbers, zero, zero, zero 
, , , whatever 
okay 
so, then weve got some float variables 
fc, which is filter cutoff, resonance, 
attack, and release 
and these are variables which im using 
to control the filter cutoff resonance, 
attack and release of my synth 
this is my wave table 
excuse me 
this is my wave table 
its an array and of float variables 
like i said its going to be between minus 
one and one and its got four five hundred 
and fourteen elements 
now the reason its got  elements its 
kind of complicated but its because of 
something called interpolate 
very briefly what we need to do when we 
create that way, when we create a 
waveform, is we need to make sure that 
that waveform can playback at various 
different frequencies 
so its sound is made up of lots and lots 
of different frequencies and we measure 
those frequencies in repetitions per 
second 
or cycles per second, and the measurement 
value we use for that is hertz 
so for example, if i take a sound, a very 
small snippet of sound and i repeat it 
more than  times a second we actually 
hear it as a pitched note, because its 
repeating so fast 
and thats what we think of, we think of 
music 
most people just think about pitched 
notes 
so, in order to be able to have a, a wav 
form which can be played back at  
hertz, or at the oth  at the other end 
of the scale , hertz, which is about 
the highest, frequency that we can hear 
in fact, i cant hear , hertz 
what  whom i tryin to kid 
as you get older, you cant really hear 
up there 
i probably can hear about , hertz 
or, if im on a good day, with a good 
wind 
so, in order to be able to do that, to go 
between a very low frequency sound and a 
very high frequency sound, we need to 
interpolate 
to make the interpolation work, ie 
to make up the numbers that we need 
because thats what interpolation means 
it means were making up numbers that 
arent there 
what, because we changed the playback 
rate or the waveform, to make up those 
numbers, we need some spare numbers on 
the end 
so its, normally you have a  point 
buffer, its called a  point buffer 
because its, its, thats the number of 
points that you run through to make the 
sound 
but where youve got a couple of extra 
points on the end, and were using those 
for interpolation 
so thats the reason why its  
okay, so there are out setup options 
sorry, theyre not our setup options, 
they, they are basically our 
declarations 
we are declaring all the objects that we 
need in order to make this program work 
and then what im doing is im going into 
the setup function 
im just declaring a size 
im creating a, im calling new on my 
maxim object, and that means im setting 
up my context 
and then ive gone cough done, done the 
same thing to my wave form objects 
im, im creating new synth 
so the synth is got a, a waveform in it, 
which is waiting to be populated with 
something with numbers 
and its also got all the other stuff 
that we need delays, filters and that 
kind of malarkey 
then were setting up my sliders 
this is the same as the way marko showed 
you to do his 
ive got this, which is delayed time 
thats dt, dg, which is delayed amount or 
delayed game 
a, which is attack 
r, which is released 
f, which is the filter cut off 
and q, which is the filter q, which is 
the resonance, which is what makes it 
sound, sort of acidy 
so, there are the sliders that we need 
and then i have another multislider, 
which im using to enter the notes 
so you can see here, mark has explained 
to you how the multislider works 
seq is also, thats a sequence 
its a, basically it takes an array 
it takes the array notes 
and then it, it fills that array whenever 
i interact with the multislider 
okay 
so i then, im loading a file which im 
not using 
so actually sound we dont need that 
frame rate is  
the frame rate is roughly the speed of 
the tick rate 
just like matt explained 
but instead of running through those 
ticks, and using them to trigger drum 
sounds, although we do that in the more 
advanced example 
in this example, were just going to use 
it to select a note from our note array 
and use it to set a frequency for our 
waveform generator 
okay 
so, before we do any of that, were still 
in setup 
and you see the section here that im 
highlighting 
this is me generating a waveform 
so we know that our buffer is  points 
long so 
we want to fill the array, which is  
elements long with a bunch of numbers 
between minus one and one 
cough now, im going for a sorptive 
wave here so, i actually want the 
waveform to be  points, as ive 
explained, but with a couple of extra 
points for good measure 
so, what im doing is im taking the 
value, i, and im dividing it by  to 
make a value between zero and one 
and then im subtracting  to make a 
value between negative  and  
now what actually happens when i do that 
is i, i make a ramp, you know, its as 
if, if you imagine thats my array, the 
ramp goes up like this, so its kind of 
an inverted sawtooth wave 
and as it repeats, it drops down, goes 
back to the beginning, goes up again, and 
this produces a nice harmonic spectrum 
that we can filter 
its a very simple waveform, but it 
creates all these harmonics and, it 
pretty much creates every harmonic that 
we need 
and then, we filter those harmonics out, 
and add the resonance for that acid 
sound 
but the values, the actual amplitude is 
only for minus, naught  to  
thats absolutely fine 
its, its absolutely fine 
we could double it, but then wed get 
more distortion 
and you can hear that you know id have 
to do more work balancing this out so 
its just to keep the sound within a 
reaonable range 
so then i make the, the waveform and then 
i add it to my synth which is called 
ironically enough or confusingly enough 
waveform 
so i can set the wave table size i could 
set it to any amount i like that weve 
already discussed its going to be  
and then i load my wave table 
in 
wave form load wave table wave table 
and then its wave form dot play 
so, that means ive initialized my 
synthesiser 
ive loaded a wave form 
i can change that at any time, any way 
that i like 
so you could have  different wave 
forms 
you could have really long wave forms 
you could take a picture of your face, 
analyze all the pixels, and then use that 
as a the waveform its entirely up to you 
its just an array of numbers 
so you know be creative and then im 
pressing play what that really means is 
its on 
so ready to rock 
in the door method were doing the same 
stuff that marco explained 
we are cough setting up our sliders 
then we get our slider information in the 
draw method 
so, if f get, basically if we get 
something from the frequency slider, we 
set the filter that belongs to the wave 
form object 
and if we get delay time, then we set the 
delay time 
yes unless im munging im dividing it by 
fifty just to get it into a decent range 
the same thing to delay gang get and to 
the huge get 
a get and r get 
lots of good gets 
because we are in the draw method thats 
a good place to set the display 
so we display everything 
and then we do the business end, which is 
ticking through the array, which has the 
notes in, and using that to set the 
frequencies 
so, playhead , every time we enter the 
draw loop, we iterate the playhead 
so the tick rate is different to the rate 
of actual playback 
the tick rate is quite fast, its  
frames a second 
we could have  or  
it can be quite fast 
and a tick rates normally much much 
higher than the rate of the rhythm 
so what ive done is ive just said, 
okay 
well, every four ticks 
well say thats a semi quaver, which is 
a 
small chunk of a beat, its a quarter of 
a beat, so f play had modular four equals 
equals zero just the same way matthews 
already showed you 
wave formramp, we ramped a cough 
knot which is going to be our volume 
given the attack time 
yet 
and what that does is it means that, if 
the attack times long, itll be a slow 
ramp 
and if the attack time, attack time is 
fast, it will be a short ramp 
and then, following a ramp, we set the 
frequency 
wave form set frequency 
now, were using this thing, mf 
now what this does is it takes midi notes 
and turns it into frequency information 
and this is just looking up an array, 
which is a maxim j s here 
so its saying okay, if i get a, a number 
zero, thats going to be a midi note of 
zero 
if i get a number one, a midi note of 
one, thats going to be a frequency of 
, which well never hear 
but i generated this with an algorithm 
and i just pasted it in, because it saves 
you having to worry about it 
okay 
then we access notes 
we get the play head modulo  
sorry, play head divided by , modulo  
thats basically saying, okay 
weve had ticks, thats fine 
but this is the note we actually want 
and then were adding , which is a 
constant, which is just, so if it was 
zero, then it would actually be  
so finally what we do is the next ti, 
tick we release 
so immediately we release before we then 
retriever 
so if player head module inaudible 
equals equals one we trigger the release, 
and then were off 
there are better ways of doing this, but 
not using processing 
okay, so as you can see, weve triggered 
our sound, weve set the note for this 
particular tick and weve released it 
for the following notes, the following 
tig 
so the next thing to do is to sort out 
the interaction 
when mouse pressed, what we do is, we 
just get the user interface stuff, and 
that handles all our mouse pressed gui 
dt mouse pressed, dt mouse pressed, blah 
same thing in mouse drags so thats 
useful for mouse devices 
and in mouse release we we just check one 
thing 
we check to see if the notes have changed 
in the array that holds all the notes 
and if they have, then we just populate 
the sequence sorry, we populate the notes 
array with the new sequence thats in our 
sequence similty slider 
and thats what this does, so notes i, 
which is the current note from  to , 
so theres  different steps, we flaw 
this value basically 
so we get the sequencing value 
and then theres a bit of unknown to 
make sure that its the right value and 
we stick it in there, make, we basically 
convert it from the slider value to a 
mini value 
we could have used the map function to do 
that, which would have been easier to 
read 
but instead of using map, im just doing 
it with standard mathematical operators 
right 
now that actually is that, is that first 
test 
so lets just go back and have a look 
music 
yeah, thats nice 
and heres the delay time again 
music 
sound i wanted to just talk briefly 
about the filter because the filter is 
quite is, i dont know, its nice to 
think about what the filter actually 
does 
ive already explained that we have a 
wave form and it goes at a certain rate 
it give us lots of harmonics 
and then we use the filter to block them 
but how that process occurs is kind of 
interesting 
basically what the filter does sound is 
it, it lets everything through sound 
lets just get a single note sound 
it lets everything through when its wide 
open 
music and as we drop it, what its 
actually doing music is this preventing 
the weight form from moving very quickly 
the filter basically is averaging 
smoothing out the weight formg 
the weight form remember is like that 
and its going really really fast 
lets say its going a thousand times a 
second 
and its producing all of these harmonics 
which are 
two thousand, three thousand, four 
thousand, five thousand, six thousand, 
seven thousand, eight thousand, et 
cetera, times per second, with an 
altitude dropoff 
and thats making a very bright sound 
thats making that buzz, that nice, 
buzzing sound that we, we like 
well, im assuming you like that 
if you dont like that music 
that then tough, cuz thats the sound it 
makes 
but the thing is that when we repeat it 
over and over and over again, were, 
actually, when we get to the end of the 
route, and we drop down again 
thats actually quite a fast move 
and thats what creates all the 
harmonics 
if we smooth that, it prevents the 
harmonics from being generated, and it 
smoothes filters out that sound, so what 
were actually doing is were averaging 
the signal as it goes up, kind of 
and thats fine because its a slow 
increase, but then when we get that 
sudden drop, we smooth it in the same way 
we might blur an image 
and thats more or less how we turn high 
frequencies down 
so, its really simple and if youre 
interested in that process 
theres a number of filters that come 
bundled with the course air package that 
weve put together for you 
and they run nicely on android as well, 
so you want to have a look at those, 
theyre in the android package and 
theres  or  of them 
and you can actually see the algorithms 
if youre interested, you can have a look 
at them 
alright, so thats how the synthesiser 
works 
now, finally, what i want to do is go 
back to our, 
a more complex example that combines all 
the bits together and just talk about how 
that tinal thing wor, works 
just a few little things that make it a 
bit more useable 
so im going to go back to our music 
machine example which is here and im 
going to run it and whats going to 
happen is 
music it started up straight away 
cough and its distorting beautifully 
really not bad 
theres very little i have to do now all 
of it music make music 
lets have some bass drums 
i do like a bit of bass drum, can you 
hear the bass drum 
you can just about, let me knock this one 
out 
okay, thats good 
its quite hard to use that 
you could have a nicer keyboard setting 
or something like that 
music so lets have a look at what 
weve done to put the main application 
together 
so, weve got two synthesizers 
now theres a clever way to do this and 
theres a stupid way of doing this and 
just to make your life easier, ive done 
it the stupid way 
instead of creating an object or a class 
which is a synth although ive already 
done that behind the scenes anyway 
but instead of doing that, just so its 
clear and you can see how its done, ive 
just duplicated all of the codes 
there was actually two sets 
a brighter, cleverer, more engineering 
savvy method is to make another class 
that encapsulates all of the sliders 
and then just to create one of those 
objects and to say where you want where 
to put it, so thats something we should 
have a look at 
theres a good example in all of the 
current examples that weve given you, 
there are good examples of classes, and 
you should have a look at that those 
but i didnt want to do that and find 
that no, that some of you didnt really 
understand that whole process 
so ive just gone through and ive 
duplicated all of that code 
so basic stuff is i thought well i want 
it to look slightly better than it 
currently looks so ive created a brushed 
metal background 
ive positioned all the sliders on the 
screen and then ive created this brushed 
metal background and you see that this is 
a good tip 
if you can avoid havong to draw 
nonanimated information 
via algorithmic methods, ie 
if you can avoid having to apply the 
interface graphics, do avoid it 
make a photoshop image that has your 
interface 
so ive got a slightly embossed area here 
and here which these are the panels that 
hold the information and if i spent more 
time on that i can make them look really 
nice and ive fake knobs and switches 
that i copied and pasted of the internet 
or i could photograph my something from 
my set connection and then put those on 
them instead 
but i guess what im trying to say is you 
can do an awful lot by preparing your 
images in photoshop just like we did last 
week with the instaspan for the overlay 
its the same sort of thing 
put the effort in there if its not 
going to animate 
put the effort in in photoshop, make it 
look sweet, and then draw it 
i must admit ive not really put the 
effort in here, but theres a back, 
theres a basic starting point 
you can see where the panels are theyre 
sort of lined up 
another thing you can do is you can put 
your interactive graphic elements onto 
your screen so that you do that 
problematically then you screenshot it 
the right size and move that into your 
photoshop application and then you can 
draw on top of it 
i guess its what im saying is do the 
work in photoshop is youre not going to 
have to animate it make it look nice 
there 
we did exactly did the same thing with 
angry droids as well we just do a bit of 
support work there 
so thats the basic idea, and you can get 
away with a lot there 
also its nice to add custom graphics to 
your sliders, and you can do that too 
so, weve done that 
and then weve loaded it in here 
and then weve done the same thing, exact 
same thing that matt did for the drum 
track 
we created four boolean arrays 
track, , , , and  
these are for our four drum sounds that 
were in our drum machine, which is a 
kick, a snare, a handclap, and a cymbal 
ideally, id have a hi hat 
there is a hi hat knocking around in one 
of the, folders on the coursera pack that 
youve got 
and you can see here, exactly as i said, 
i just duplicated everything 
so theres the floats that youve already 
seen 
except weve added another function, 
filter attack, which is what gives it 
that sort of tb  baseline sound 
laugh allegedly 
and then weve got, some transpose 
functions as well, which allows us to 
move it around 
weve got a second wave table for the 
second object 
you can see weve got two syns waveform 
and waveform two 
and now these are all basically 
everything that has a two after it is for 
the second waveform 
we create a bunch of secondary slide and 
sliders and multisliders to hold all the 
separate information and then we load in 
some samples 
and then we set up a sliders, so we have 
twice as many sliders 
but they have slightly different numbers 
in to re, to represent the fact that 
theyre going to be drawn somewhere else 
now as i said, you would draw them, 
screen shot it, import it into photoshop, 
do your background, and then just load 
the background 
now so we load the background where do i 
load the background 
into the bottom of this 
thats the wavetable, exactly the same 
way as i described in the first example 
okay the background is loaded, there it 
is, brushed metal, thats my brushed 
metal background 
and then here, what i do is i set up the 
drum tracks in the same way that matts 
already explained 
i just create these boolean arrays, 
theyre either true or false 
and i set them all to false, so theyre 
all off 
okay, and then we get all the information 
in exactly the same way, as we did 
before 
and then we use the same playhead 
information to get the frequency content 
for both synthesizers 
and then we use another variable, current 
b, so we could use playhead if were 
using current b too 
it doesnt really matter, its the same 
to find out whether its if its true 
basically, then what we do is cough we 
play that drum sound back 
the mass press stuff is exactly the same, 
if you click there it sets it and, youve 
set it to play 
in both mouse press and mouse drags 
and other than that, its exactly the 
same as the two examples youve seen 
the basic synth example, and the drum 
example 
and thats how you end up with this 
music 
music 
