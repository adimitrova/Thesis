1
00:00:04,104 --> 00:00:17,503
[SOUND]. 

2
00:00:17,503 --> 00:00:20,292
Okay. 
So as you know, we were just talking to 

3
00:00:20,292 --> 00:00:24,180
Martin, and he was telling us a bit about 
RJDJ. 

4
00:00:24,180 --> 00:00:27,088
We've heard from Marko. 
Marko's been telling us about how to use 

5
00:00:27,088 --> 00:00:30,402
sliders. 
and we've also done some stuff last week 

6
00:00:30,402 --> 00:00:35,427
on sliders and building them and stuff. 
And, you know, Matt's been doing this 

7
00:00:35,427 --> 00:00:39,875
stuff with you about, playing back sounds 
in rhythm to a sequence. 

8
00:00:39,875 --> 00:00:43,657
So, what I'm doing is I'm going to show 
you an application that we developed, I 

9
00:00:43,657 --> 00:00:48,402
just briefly touched upon with Martin. 
I'm just going to I'm going to set it 

10
00:00:48,402 --> 00:00:51,288
running again for you. 
But I want you to just kind of pay 

11
00:00:51,288 --> 00:00:54,640
attention to the little things I do. 
As I'm doing them, I'm going to briefly 

12
00:00:54,640 --> 00:00:56,958
explain what they are, then I'm going to 
go through the whole application in 

13
00:00:56,958 --> 00:00:59,680
detail. 
Explain how it works. 

14
00:00:59,680 --> 00:01:02,500
Then we're going to discuss it with me 
and Marco and Matt at the end just so 

15
00:01:02,500 --> 00:01:06,430
that we can make sure we've got 
everything covered. 

16
00:01:06,430 --> 00:01:08,900
This is like a fully fledged music 
application. 

17
00:01:08,900 --> 00:01:13,904
It's sonically quite advanced. 
It's just bare minimum on the user 

18
00:01:13,904 --> 00:01:16,527
interface, it just has the interaction, 
so you could use quite a lot of the 

19
00:01:16,527 --> 00:01:20,140
techniques that are in this to make your 
own thing. 

20
00:01:20,140 --> 00:01:25,020
But let's just see what it sounds like 
again and see where we, we are with it. 

21
00:01:25,020 --> 00:01:29,030
[MUSIC] Okay, here we are. 
So you can hear we've got a drum machine. 

22
00:01:29,030 --> 00:01:35,014
Let's just turn the two synths down, so 
we can hear these these, these drums 

23
00:01:35,014 --> 00:01:39,786
here. 
We've got a bass drum, we got a snare 

24
00:01:39,786 --> 00:01:46,170
drum and you can see, I'm pointing at a 
snare drum hit. 

25
00:01:46,170 --> 00:01:49,030
[MUSIC] That one and that one. 
And there's a blue line that tracks 

26
00:01:49,030 --> 00:01:52,230
across telling us where in a drum beat we 
are. 

27
00:01:52,230 --> 00:01:55,890
The second line in the drum, in the drum 
machine is this. 

28
00:01:55,890 --> 00:01:58,734
You hear that? 
That's the 

29
00:01:58,734 --> 00:02:01,120
[INAUDIBLE] 

30
00:02:01,120 --> 00:02:06,827
the clap. 
So the claps going on the in between 

31
00:02:06,827 --> 00:02:12,130
beats in between the base and the snares. 
You got a classic techno feel. 

32
00:02:12,130 --> 00:02:16,745
And as Matt was saying all of the sounds 
we're using come straight from your 

33
00:02:16,745 --> 00:02:21,644
standard kind of 808 or 909 drum machine 
and thereof [MUSIC] So, what else can it 

34
00:02:21,644 --> 00:02:26,670
do? 
Well, we've got two synthesizers. 

35
00:02:26,670 --> 00:02:30,513
We can play these [INAUDIBLE] 
synthesizers individually, and we can 

36
00:02:30,513 --> 00:02:33,860
vary a whole range of parameters for 
them. 

37
00:02:33,860 --> 00:02:37,080
They're fully fledged synthesizers. 
We can write waveforms for them. 

38
00:02:37,080 --> 00:02:40,004
If you're interested in synthesis and you 
know a little about it I think you'll 

39
00:02:40,004 --> 00:02:43,077
find this one interesting. 
But if you don't, it's still really 

40
00:02:43,077 --> 00:02:45,500
usable and I need you to get your head 
around it. 

41
00:02:45,500 --> 00:02:49,725
We can write waveforms, we can add a 
filter, we can change the quality of the 

42
00:02:49,725 --> 00:02:52,868
filter. 
Now let's just have a listen to the 

43
00:02:52,868 --> 00:03:00,168
filters, I'm want to turn one of them up. 
[MUSIC] So here's one of the synths. 

44
00:03:00,168 --> 00:03:14,223
I'm going to change the filter. 
[MUSIC] [MUSIC] I've also got this 

45
00:03:14,223 --> 00:03:18,160
resonance. 
And this filter out. 

46
00:03:18,160 --> 00:03:24,400
We could also change the release and the 
attack. 

47
00:03:24,400 --> 00:03:32,656
So we're giving it an envelope. 
And it creates that kind of acid techno 

48
00:03:32,656 --> 00:03:38,280
feel. 
If I change the attack actually with 

49
00:03:38,280 --> 00:03:45,262
something like this. 
[MUSIC] Just makes it quieter. 

50
00:03:45,262 --> 00:03:55,456
We can transpose any of the channels. 
So I'll change the key of the entire 

51
00:03:55,456 --> 00:04:00,382
sequence. 
And then again. 

52
00:04:00,382 --> 00:04:11,381
And then if I want [MUSIC]. 
You just go back to where you were, more 

53
00:04:11,381 --> 00:04:24,511
or less. 
and also, I can add some delay. 

54
00:04:24,511 --> 00:04:30,813
[MUSIC] And I've got a second one here as 
well. 

55
00:04:30,813 --> 00:04:38,865
Now, the beat that I'm altering at the 
moment is the actual [MUSIC] [INAUDIBLE] 

56
00:04:38,865 --> 00:04:47,331
sequence of notes that it plays. 
Now, I can select a sequence of high 

57
00:04:47,331 --> 00:04:53,010
notes, like this, or a sequence of low 
notes. 

58
00:04:53,010 --> 00:04:56,310
And just like in the example that Matt 
was showing you [INAUDIBLE] [MUSIC] Drum 

59
00:04:56,310 --> 00:05:02,130
machine. 
There's 16 steps, so I can change two of 

60
00:05:02,130 --> 00:05:06,826
the notes. 
There you go. 

61
00:05:06,826 --> 00:05:14,844
I've got the fill trap as well and I'll 
do this stuff. 

62
00:05:14,844 --> 00:05:29,396
[MUSIC]. 
That's quite pleasant. 

63
00:05:29,396 --> 00:05:45,296
We have resonance. 
[MUSIC] That's distorting quite a lot. 

64
00:05:45,296 --> 00:05:52,363
I don't really mind. 
I can add some more delay. 

65
00:05:52,363 --> 00:05:57,902
[MUSIC] Add a few claps. 
[MUSIC] And some more snares. 

66
00:05:57,902 --> 00:06:00,215
Maybe a cymbal. 

67
00:06:00,215 --> 00:06:05,843
[MUSIC] 

68
00:06:05,843 --> 00:06:26,740
You gotta take, 
So that's a basic music machine. 

69
00:06:26,740 --> 00:06:30,185
[MUSIC] It's a common thing that you can 
easily sell on the upstart for, I don't 

70
00:06:30,185 --> 00:06:33,510
know, actually music apps. 
Let's talk about this for a minute. 

71
00:06:33,510 --> 00:06:36,340
Music apps go for quite a lot more money 
than other kind of apps. 

72
00:06:36,340 --> 00:06:39,238
You can sell an app like this for much 
more than three quid on the [INAUDIBLE] 

73
00:06:39,238 --> 00:06:42,486
on the IOS app store. 
You can probably sell it for five to six 

74
00:06:42,486 --> 00:06:45,183
pounds or more. 
Or if you're in America, that would be 

75
00:06:45,183 --> 00:06:47,104
dollars. 
I imagine that like $8 or $9 out of 

76
00:06:47,104 --> 00:06:49,970
[INAUDIBLE], what is, what are pounds and 
dollars anyway? 

77
00:06:49,970 --> 00:06:52,586
Who cares? 
Anyway, they're much more expensive and 

78
00:06:52,586 --> 00:06:56,800
they're much more specialist but they're 
still they're still really useful. 

79
00:06:56,800 --> 00:07:00,608
And I think something like this, I mean 
as something really famous, well, there's 

80
00:07:00,608 --> 00:07:04,472
a really famous [UNKNOWN] app which is 
built on, based on a and old-fashioned TV 

81
00:07:04,472 --> 00:07:08,168
R3 synthesizer and a nice [INAUDIBLE] 
drum machine in which still sells in it's 

82
00:07:08,168 --> 00:07:12,250
droves. 
And all the people do is complain about 

83
00:07:12,250 --> 00:07:16,116
how unusable it is. 
So I'm not that worried that ours is 

84
00:07:16,116 --> 00:07:20,068
knocked out quite quickly. 
It is knocked out quite quickly, but it 

85
00:07:20,068 --> 00:07:23,020
is powerful, and you can build on it to 
do more interesting things. 

86
00:07:23,020 --> 00:07:25,850
And you could use some of the other stuff 
we've done to play some loops. 

87
00:07:25,850 --> 00:07:28,839
By there are some complexities to this 
and I want to show that you know, what 

88
00:07:28,839 --> 00:07:31,779
they are, so I'm going to quit this 
temporarily and just go back to the basic 

89
00:07:31,779 --> 00:07:38,089
version before I continue with that. 
Just see you can see in the most simple 

90
00:07:38,089 --> 00:07:43,439
possible way what it is that we're doing. 
So you go all this stuff for free as I 

91
00:07:43,439 --> 00:07:47,398
was describing before. 
as I've said every week, you know, you 

92
00:07:47,398 --> 00:07:54,000
can just go to your lessons. 
but this time we're in week six. 

93
00:07:54,000 --> 00:07:59,640
Week six has got a bunch of small tests 
in it. 

94
00:07:59,640 --> 00:08:02,870
It's got a small drum machine, and t's 
got this thing called synth test. 

95
00:08:02,870 --> 00:08:04,789
So, we're going to have a quick look at 
this synth test. 

96
00:08:06,130 --> 00:08:08,900
Just because it's a easier code to, to 
look at. 

97
00:08:08,900 --> 00:08:11,896
It's got the gooey code in it. 
it doesn't have the drum machine it just 

98
00:08:11,896 --> 00:08:14,794
has one synthesizer. 
and yeah. 

99
00:08:14,794 --> 00:08:19,639
There you go. 
It's just one of the synths. 

100
00:08:19,639 --> 00:08:24,325
[MUSIC] [MUSIC] Now, [COUGH] so you can 
see here it's the same, and it basically 

101
00:08:24,325 --> 00:08:30,220
allows me to set the pitch, change the 
filter, change the resonance. 

102
00:08:30,220 --> 00:08:33,590
Same old same old. 
Let's have a look at it. 

103
00:08:33,590 --> 00:08:41,730
So we start off as we normally start off 
by declaring a maxim context. 

104
00:08:41,730 --> 00:08:44,580
If I can just make this a little bigger 
so you can see. 

105
00:08:44,580 --> 00:08:50,326
so this is what's happening on the audio. 
Behind it, as, you know when Martin was 

106
00:08:50,326 --> 00:08:52,640
here we were talking about the web audio 
api. 

107
00:08:52,640 --> 00:08:56,767
So, behind this is all web audio. 
And the maxim js, the maxim js file, 

108
00:08:56,767 --> 00:09:02,150
which is here has got all of this stuff 
in the background. 

109
00:09:02,150 --> 00:09:04,922
Now, if you're interested in this sort of 
stuff, and you want to learn more about 

110
00:09:04,922 --> 00:09:08,140
how we built Max and JS. 
You can always post questions on the 

111
00:09:08,140 --> 00:09:10,090
forums. 
And the TAs will manage those and any 

112
00:09:10,090 --> 00:09:12,796
really important questions where we feel 
we've got some material we can really 

113
00:09:12,796 --> 00:09:15,850
help you with we can point you towards a 
good answer. 

114
00:09:15,850 --> 00:09:20,010
And also there are lots of other places 
like musicdsp.com and other sites like 

115
00:09:20,010 --> 00:09:25,875
that can help you understand what it is 
that's gone into building this. 

116
00:09:25,875 --> 00:09:30,080
But you don't really need to if you just 
want to get started. 

117
00:09:30,080 --> 00:09:33,310
We just have to have a context, and Maxim 
provides the context. 

118
00:09:33,310 --> 00:09:36,460
Also, we've got an audio file player. 
Actually, we're not using that here, so 

119
00:09:36,460 --> 00:09:39,501
that's not going to matter. 
Instead of using the audio file player, 

120
00:09:39,501 --> 00:09:43,130
which is what we've been using most of 
the time, we're using a synth. 

121
00:09:43,130 --> 00:09:48,879
So, Maxim can have a synth and I've 
called this Synth waveform. 

122
00:09:48,879 --> 00:09:54,038
Now, the thing about a synth that makes 
it different to an audio file player is 

123
00:09:54,038 --> 00:09:59,840
you can write in an array of values 
between minus 1 and 1. 

124
00:09:59,840 --> 00:10:05,250
And that will define the texture of the 
sound which you're creating. 

125
00:10:06,560 --> 00:10:09,976
Now, most synthesizers have a number of 
different wave forms. 

126
00:10:09,976 --> 00:10:13,716
And there's lot of different approaches 
to creating wave forms. 

127
00:10:13,716 --> 00:10:17,412
Um, [COUGH] and in one of the other 
examples that we've got in this folder 

128
00:10:17,412 --> 00:10:21,052
there's a really easy way of gyrating 
wave forms but essentially, you're just 

129
00:10:21,052 --> 00:10:24,524
writing numbers between minus 1 and 1 
into an array which is of a particular 

130
00:10:24,524 --> 00:10:30,380
length. 
So we'll be talking about how to do that 

131
00:10:30,380 --> 00:10:32,517
in a moment. 
So we have our synth. 

132
00:10:32,517 --> 00:10:35,622
It's called waveform, and we're writing a 
waveform into it, which is what makes the 

133
00:10:35,622 --> 00:10:39,700
sound. 
we've got a play head. 

134
00:10:39,700 --> 00:10:42,760
Now, the play head, as Matt was 
describing, is, it's literally the thing 

135
00:10:42,760 --> 00:10:46,370
which tells us how many, how many frames 
there have been. 

136
00:10:46,370 --> 00:10:48,800
And we use that to work out whether we 
should trigger a new beat. 

137
00:10:49,900 --> 00:10:52,698
Okay. 
So we've also got, this array called 

138
00:10:52,698 --> 00:10:58,360
notes, which is an integer array. 
And it holds MIDI notes. 

139
00:10:58,360 --> 00:11:02,130
If you know about music, then you'll know 
what MIDI is. 

140
00:11:02,130 --> 00:11:04,578
If you don't really know about music and 
music technology, you've probably never 

141
00:11:04,578 --> 00:11:06,808
heard of it. 
It's called Musical Instrument Digital 

142
00:11:06,808 --> 00:11:08,675
Interface. 
It's a specification. 

143
00:11:08,675 --> 00:11:13,615
For a numbering system that relates to 
musical notes and musical information. 

144
00:11:13,615 --> 00:11:17,459
So these MIDI notes normally what they 
represent are all the keys on the 

145
00:11:17,459 --> 00:11:21,605
keyboard. 
they're 7-bit numbers, which means that 

146
00:11:21,605 --> 00:11:26,889
they go for a range of 0 to 127. 
There's 128 independent values, the 

147
00:11:26,889 --> 00:11:32,830
lower, the number, the lower, The note. 
So, I'm right down the bottom end of the 

148
00:11:32,830 --> 00:11:36,544
piano, as you can see. 
With all these numbers, zero, zero, zero. 

149
00:11:36,544 --> 00:11:40,482
12, 12, 12, whatever. 
okay. 

150
00:11:40,482 --> 00:11:46,132
So, then we've got some float variables. 
Fc, which is filter cutoff, resonance, 

151
00:11:46,132 --> 00:11:49,685
attack, and release. 
And these are variables which I'm using 

152
00:11:49,685 --> 00:11:53,200
to control the filter cutoff resonance, 
attack and release of my synth. 

153
00:11:54,320 --> 00:11:56,710
This is my wave table. 
Excuse me. 

154
00:11:56,710 --> 00:12:02,200
This is my wave table. 
Its an array and of float variables. 

155
00:12:02,200 --> 00:12:06,160
Like I said its going to be between minus 
one and one and its got four five hundred 

156
00:12:06,160 --> 00:12:10,156
and fourteen elements. 
Now the reason its got 514 elements its 

157
00:12:10,156 --> 00:12:13,899
kind of complicated but its because of 
something called interpolate. 

158
00:12:15,090 --> 00:12:18,996
Very briefly what we need to do when we 
create that way-, when we create a 

159
00:12:18,996 --> 00:12:22,965
waveform, is we need to make sure that 
that waveform can playback at various 

160
00:12:22,965 --> 00:12:28,458
different frequencies. 
So it's sound is made up of lots and lots 

161
00:12:28,458 --> 00:12:31,692
of different frequencies and we measure 
those frequencies in repetitions per 

162
00:12:31,692 --> 00:12:35,720
second. 
Or cycles per second, and the measurement 

163
00:12:35,720 --> 00:12:40,486
value we use for that is Hertz. 
So for example, if I take a sound, a very 

164
00:12:40,486 --> 00:12:44,455
small snippet of sound and I repeat it 
more than 20 times a second we actually 

165
00:12:44,455 --> 00:12:50,160
hear it as a pitched note, because it's 
repeating so fast. 

166
00:12:50,160 --> 00:12:52,670
And that's what we think of, we think of 
music. 

167
00:12:52,670 --> 00:12:54,292
Most people just think about pitched 
notes. 

168
00:12:54,292 --> 00:12:58,501
So, in order to be able to have a, a wav 
form which can be played back at 20 

169
00:12:58,501 --> 00:13:03,055
hertz, or at the oth- -- at the other end 
of the scale 20,000 hertz, which is about 

170
00:13:03,055 --> 00:13:11,346
the highest, frequency that we can hear; 
in fact, I can't hear 20,000 hertz. 

171
00:13:11,346 --> 00:13:14,382
What -- who'm I tryin' to kid? 
As you get older, you can't really hear 

172
00:13:14,382 --> 00:13:17,488
up there. 
I probably can hear about 18,000 hertz 

173
00:13:17,488 --> 00:13:21,650
or, if I'm on a good day, with a good 
wind. 

174
00:13:21,650 --> 00:13:24,732
So, in order to be able to do that, to go 
between a very low frequency sound and a 

175
00:13:24,732 --> 00:13:28,470
very high frequency sound, we need to 
interpolate. 

176
00:13:28,470 --> 00:13:32,650
To make the interpolation work, i.e. 
to make up the numbers that we need. 

177
00:13:32,650 --> 00:13:35,711
because that's what interpolation means. 
It means we're making up numbers that 

178
00:13:35,711 --> 00:13:38,214
aren't there. 
What, because we changed the playback 

179
00:13:38,214 --> 00:13:40,545
rate or the waveform, to make up those 
numbers, we need some spare numbers on 

180
00:13:40,545 --> 00:13:43,694
the end. 
So it's, normally you have a 512 point 

181
00:13:43,694 --> 00:13:48,110
buffer, it's called a 512 point buffer 
because it's, it's, that's the number of 

182
00:13:48,110 --> 00:13:53,090
points that you run through to make the 
sound. 

183
00:13:53,090 --> 00:13:55,778
But where you've got a couple of extra 
points on the end, and we're using those 

184
00:13:55,778 --> 00:13:59,215
for interpolation. 
So that's the reason why it's 514. 

185
00:13:59,215 --> 00:14:04,480
Okay, so there are out setup options 
sorry, they're not our setup options, 

186
00:14:04,480 --> 00:14:09,090
they, they are basically our 
declarations. 

187
00:14:09,090 --> 00:14:12,865
We are declaring all the objects that we 
need in order to make this program work. 

188
00:14:12,865 --> 00:14:17,400
and then what I'm doing is I'm going into 
the setup function. 

189
00:14:17,400 --> 00:14:21,480
I'm just declaring a size. 
I'm creating a, I'm calling new on my 

190
00:14:21,480 --> 00:14:25,880
maxim object, and that means I'm setting 
up my context. 

191
00:14:25,880 --> 00:14:29,940
and then I've gone [COUGH] done, done the 
same thing to my wave form objects. 

192
00:14:29,940 --> 00:14:32,894
I'm, I'm creating new synth. 
So the synth is got a, a waveform in it, 

193
00:14:32,894 --> 00:14:37,700
which is waiting to be populated with 
something with numbers. 

194
00:14:37,700 --> 00:14:41,156
And it's also got all the other stuff 
that we need delays, filters and that 

195
00:14:41,156 --> 00:14:45,620
kind of malarkey. 
Then we're setting up my sliders. 

196
00:14:45,620 --> 00:14:48,890
This is the same as the way Marko showed 
you to do his. 

197
00:14:48,890 --> 00:14:53,714
I've got this, which is delayed time 
that's dt, dg, which is delayed amount or 

198
00:14:53,714 --> 00:14:58,250
delayed game. 
A, which is attack. 

199
00:14:58,250 --> 00:15:01,600
R, which is released. 
F, which is the filter cut off. 

200
00:15:01,600 --> 00:15:04,772
And q, which is the filter q, which is 
the resonance, which is what makes it 

201
00:15:04,772 --> 00:15:09,203
sound, sort of acidy. 
so, there are the sliders that we need. 

202
00:15:09,203 --> 00:15:13,961
And then I have another multi-slider, 
which I'm using to enter the notes. 

203
00:15:13,961 --> 00:15:18,785
So you can see here, Mark has explained 
to you how the multi-slider works. 

204
00:15:18,785 --> 00:15:24,340
SEQ is also, that's a sequence. 
It's a, basically it takes an array. 

205
00:15:24,340 --> 00:15:28,467
It takes the array notes. 
And then it, it fills that array whenever 

206
00:15:28,467 --> 00:15:31,170
I interact with the multislider. 
Okay. 

207
00:15:31,170 --> 00:15:36,279
So I then, I'm loading a file which I'm 
not using. 

208
00:15:36,279 --> 00:15:42,070
So actually [SOUND] we don't need that. 
Frame rate is 30. 

209
00:15:42,070 --> 00:15:47,130
the frame rate is roughly the speed of 
the tick rate. 

210
00:15:47,130 --> 00:15:50,641
Just like Matt explained. 
But instead of running through those 

211
00:15:50,641 --> 00:15:53,854
ticks, and using them to trigger drum 
sounds, although we do that in the more 

212
00:15:53,854 --> 00:15:57,947
advanced example. 
In this example, we're just going to use 

213
00:15:57,947 --> 00:16:01,967
it to select A note from our note array 
and use it to set a frequency for our 

214
00:16:01,967 --> 00:16:05,380
waveform generator. 
Okay. 

215
00:16:05,380 --> 00:16:08,990
So, before we do any of that, we're still 
in Setup. 

216
00:16:08,990 --> 00:16:11,170
And you see the section here that I'm 
highlighting? 

217
00:16:11,170 --> 00:16:17,104
This is me generating a waveform. 
So we know that our buffer is 414 points 

218
00:16:17,104 --> 00:16:21,050
long so. 
We want to fill the array, which is 414 

219
00:16:21,050 --> 00:16:25,440
elements long with a bunch of numbers 
between minus one and one. 

220
00:16:25,440 --> 00:16:29,984
[COUGH] Now, I'm going for a sorptive 
wave here so, I actually want the 

221
00:16:29,984 --> 00:16:34,173
waveform to be 512 points, as I've 
explained, but with a couple of extra 

222
00:16:34,173 --> 00:16:41,552
points for good measure. 
So, what I'm doing is I'm taking the 

223
00:16:41,552 --> 00:16:48,310
value, I, and I'm dividing it by 512 to 
make a value between zero and one. 

224
00:16:49,530 --> 00:16:56,530
And then I'm subtracting 0.5 to make a 
value between negative 0.5 and 0.5. 

225
00:16:56,530 --> 00:16:59,382
Now what actually happens when I do that 
is I, I make a ramp, you know, it's as 

226
00:16:59,382 --> 00:17:02,280
if, if you imagine that's my array, the 
ramp goes up like this, so it's kind of 

227
00:17:02,280 --> 00:17:06,606
an inverted sawtooth wave. 
And as it repeats, it drops down, goes 

228
00:17:06,606 --> 00:17:09,688
back to the beginning, goes up again, and 
this produces a nice harmonic spectrum 

229
00:17:09,688 --> 00:17:13,738
that we can filter. 
It's a very simple waveform, but it 

230
00:17:13,738 --> 00:17:17,222
creates all these harmonics And, it 
pretty much creates every harmonic that 

231
00:17:17,222 --> 00:17:20,500
we need. 
And then, we filter those harmonics out, 

232
00:17:20,500 --> 00:17:23,010
and add the resonance for that acid 
sound. 

233
00:17:23,010 --> 00:17:28,910
but the values, the actual amplitude is 
only for minus, naught .5 to 5. 

234
00:17:28,910 --> 00:17:31,500
That's absolutely fine. 
It's, it's absolutely fine. 

235
00:17:31,500 --> 00:17:33,550
We could double it, but then we'd get 
more distortion. 

236
00:17:33,550 --> 00:17:36,356
And you can hear that You know I'd have 
to do more work balancing this out so 

237
00:17:36,356 --> 00:17:39,650
it's just to keep the sound within a 
reaonable range. 

238
00:17:41,240 --> 00:17:44,900
So then I make the, the waveform and then 
I add it to my synth which is called 

239
00:17:44,900 --> 00:17:48,990
ironically enough or confusingly enough 
waveform. 

240
00:17:48,990 --> 00:17:52,650
So I can set the wave table size I could 
set it to any amount I like that we've 

241
00:17:52,650 --> 00:17:58,430
already discussed it's going to be 514. 
And then I load my wave table. 

242
00:17:58,430 --> 00:18:01,820
In. 
Wave form load wave table wave table. 

243
00:18:01,820 --> 00:18:06,395
And then it's wave form dot play. 
So, that means I've initialized my 

244
00:18:06,395 --> 00:18:09,330
synthesiser. 
I've loaded a wave form. 

245
00:18:09,330 --> 00:18:12,740
I can change that at any time, any way 
that I like. 

246
00:18:12,740 --> 00:18:14,880
So you could have 10 different wave 
forms. 

247
00:18:14,880 --> 00:18:17,567
You could have really long wave forms. 
You could take a picture of your face, 

248
00:18:17,567 --> 00:18:20,046
analyze all the pixels, and then use that 
as a The waveform it's entirely up to you 

249
00:18:20,046 --> 00:18:25,485
it's just an array of numbers. 
So you know be creative and then I'm 

250
00:18:25,485 --> 00:18:29,170
pressing play what that really means is 
it's on. 

251
00:18:30,240 --> 00:18:33,924
So ready to rock. 
In the door method we're doing the same 

252
00:18:33,924 --> 00:18:38,308
stuff that Marco explained. 
We are [COUGH] setting up our sliders 

253
00:18:38,308 --> 00:18:43,072
Then we get our slider information in the 
draw method. 

254
00:18:43,072 --> 00:18:49,072
So, if f get, basically if we get 
something from the frequency slider, we 

255
00:18:49,072 --> 00:18:55,804
set the filter that belongs to the wave 
form object. 

256
00:18:55,804 --> 00:19:00,019
and if we get delay time, then we set the 
delay time. 

257
00:19:01,020 --> 00:19:07,000
Yes unless I'm munging I'm dividing it by 
fifty just to get it into a decent range. 

258
00:19:08,740 --> 00:19:12,250
The same thing to delay gang get and to 
the huge get. 

259
00:19:13,980 --> 00:19:17,020
A get and R get. 
Lot's of good gets. 

260
00:19:17,020 --> 00:19:19,730
Because we are in the draw method that's 
a good place to set the display. 

261
00:19:19,730 --> 00:19:23,735
So we display everything. 
And then we do the business end, which is 

262
00:19:23,735 --> 00:19:27,145
ticking through the array, which has the 
notes in, and using that to set the 

263
00:19:27,145 --> 00:19:32,133
frequencies. 
So, playhead ++, every time we enter the 

264
00:19:32,133 --> 00:19:38,473
draw loop, we iterate the playhead. 
So the tick rate is different to the rate 

265
00:19:38,473 --> 00:19:42,801
of actual playback. 
The tick rate Is quite fast, it's 30 

266
00:19:42,801 --> 00:19:46,514
frames a second. 
We could have 60 or 120. 

267
00:19:46,514 --> 00:19:50,550
it can be quite fast. 
And a tick rate's normally much much 

268
00:19:50,550 --> 00:19:55,674
higher than the rate of the rhythm. 
So what I've done is I've just said, 

269
00:19:55,674 --> 00:19:58,530
okay. 
Well, every four ticks. 

270
00:19:58,530 --> 00:20:00,870
We'll say that's a semi quaver, which is 
a. 

271
00:20:00,870 --> 00:20:05,225
Small chunk of a beat, it's a quarter of 
a beat, so f play had modular four equals 

272
00:20:05,225 --> 00:20:10,384
equals zero just the same way Matthews 
already showed you. 

273
00:20:10,384 --> 00:20:15,281
Wave form.ramp, we ramped a [COUGH] 
knot.5 which is going to be our volume 

274
00:20:15,281 --> 00:20:19,950
given the attack time... 
Yet. 

275
00:20:19,950 --> 00:20:23,415
And what that does is it means that, if 
the attack time's long, it'll be a slow 

276
00:20:23,415 --> 00:20:26,096
ramp. 
And if the attack time, attack time is 

277
00:20:26,096 --> 00:20:29,729
fast, it will be a short ramp. 
And then, following a ramp, we set the 

278
00:20:29,729 --> 00:20:33,090
frequency. 
Wave form set frequency. 

279
00:20:33,090 --> 00:20:37,293
Now, we're using this thing, m2f. 
Now what this does is it takes midi notes 

280
00:20:37,293 --> 00:20:41,460
and turns it into frequency information. 
And this is just looking up an array, 

281
00:20:41,460 --> 00:20:45,080
which is a maxim j s here. 
So it's saying okay, if I get a, a number 

282
00:20:45,080 --> 00:20:48,770
zero, that's going to be a midi note of 
zero. 

283
00:20:48,770 --> 00:20:52,970
if I get a number one, a midi note of 
one, that's going to be a frequency of 

284
00:20:52,970 --> 00:20:58,710
8.661957, which we'll never hear. 
But I generated this with an algorithm. 

285
00:20:58,710 --> 00:21:01,946
And I just pasted it in, because it saves 
you having to worry about it. 

286
00:21:01,946 --> 00:21:03,920
Okay? 
Then we access notes. 

287
00:21:03,920 --> 00:21:07,280
We get the play head modulo 4. 
Sorry, play head divided by 4, modulo 16. 

288
00:21:07,280 --> 00:21:11,700
That's basically saying, okay. 
We've had ticks, that's fine. 

289
00:21:11,700 --> 00:21:19,698
But this is the note we actually want. 
And then we're adding 30, which is a 

290
00:21:19,698 --> 00:21:25,614
constant, which is just, so if it was 
zero, then it would actually be 30. 

291
00:21:25,614 --> 00:21:34,150
So finally what we do is the next ti, 
tick we release. 

292
00:21:34,150 --> 00:21:38,620
So immediately we release before we then 
Retriever. 

293
00:21:38,620 --> 00:21:41,392
So if player head module [INAUDIBLE] 
equals equals one we trigger the release, 

294
00:21:41,392 --> 00:21:43,991
and then we're off. 
There are better ways of doing this, but 

295
00:21:43,991 --> 00:21:49,046
not using processing. 
Okay, so as you can see, we've triggered 

296
00:21:49,046 --> 00:21:57,410
our sound, we've set the note for this 
particular tick and we've released it. 

297
00:21:57,410 --> 00:22:00,150
For the following notes, the following 
tig. 

298
00:22:01,690 --> 00:22:03,850
So the next thing to do is to sort out 
the interaction. 

299
00:22:03,850 --> 00:22:08,075
When mouse pressed, what we do is, we 
just get the user interface stuff, and 

300
00:22:08,075 --> 00:22:15,930
that handles all our mouse pressed GUI. 
Dt mouse pressed, dt mouse pressed, blah. 

301
00:22:15,930 --> 00:22:20,130
Same thing in mouse drags so that's 
useful for mouse devices. 

302
00:22:21,150 --> 00:22:25,300
And in mouse release we we just check one 
thing. 

303
00:22:25,300 --> 00:22:29,790
We check to see if the notes have changed 
in the array that holds all the notes. 

304
00:22:29,790 --> 00:22:35,338
And if they have, then we just populate 
the sequence sorry, we populate the notes 

305
00:22:35,338 --> 00:22:41,780
array with the new sequence that's in our 
sequence similty slider. 

306
00:22:41,780 --> 00:22:47,370
And that's what this does, so notes I, 
which is the current note from 0 to 15, 

307
00:22:47,370 --> 00:22:54,110
so there's 16 different steps, we flaw 
this value basically. 

308
00:22:54,110 --> 00:22:57,563
So we get the sequencing value. 
And then there's a bit of [UNKNOWN] to 

309
00:22:57,563 --> 00:23:00,358
make sure that it's the right value and 
we stick it in there, make, we basically 

310
00:23:00,358 --> 00:23:03,570
convert it from the slider value to a 
mini value. 

311
00:23:03,570 --> 00:23:05,874
We could have used the map function to do 
that, which would have been easier to 

312
00:23:05,874 --> 00:23:08,833
read. 
But instead of using map, I'm just doing 

313
00:23:08,833 --> 00:23:12,689
it with standard mathematical operators. 
Right. 

314
00:23:12,689 --> 00:23:16,930
Now that actually is that, is that first 
test. 

315
00:23:16,930 --> 00:23:19,930
So let's just go back and have a look. 
[MUSIC]. 

316
00:23:19,930 --> 00:23:28,230
Yeah, that's nice. 
And here's the delay time again. 

317
00:23:28,230 --> 00:23:36,748
[MUSIC]. 
[SOUND] I wanted to just talk briefly 

318
00:23:36,748 --> 00:23:39,820
about the filter because the filter is 
quite is, I don't know, it's nice to 

319
00:23:39,820 --> 00:23:43,020
think about what the filter actually 
does. 

320
00:23:43,020 --> 00:23:46,040
I've already explained that we have a 
wave form and it goes at a certain rate. 

321
00:23:46,040 --> 00:23:51,140
It give us lots of harmonics. 
And then we use the filter to block them. 

322
00:23:51,140 --> 00:23:54,830
But how that process occurs is kind of 
interesting. 

323
00:23:56,150 --> 00:24:05,880
Basically what the filter does [SOUND] is 
it, it lets everything through [SOUND]. 

324
00:24:05,880 --> 00:24:10,380
Let's just get a single note [SOUND]. 
It lets everything through when it's wide 

325
00:24:10,380 --> 00:24:15,008
open. 
[MUSIC] And as we drop it, what it's 

326
00:24:15,008 --> 00:24:27,977
actually doing [MUSIC] Is this preventing 
the weight form from moving very quickly? 

327
00:24:27,977 --> 00:24:33,783
The filter basically is averaging 
smoothing out the weight form/g. 

328
00:24:33,783 --> 00:24:37,490
The weight form remember is like that. 
And it's going really really fast. 

329
00:24:37,490 --> 00:24:41,090
Lets say it's going a thousand times a 
second. 

330
00:24:41,090 --> 00:24:43,610
And it's producing all of these harmonics 
which are. 

331
00:24:45,130 --> 00:24:47,562
Two thousand, three thousand, four 
thousand, five thousand, six thousand, 

332
00:24:47,562 --> 00:24:49,766
seven thousand, eight thousand, et 
cetera, times per second, with an 

333
00:24:49,766 --> 00:24:52,980
altitude drop-off. 
And that's making a very bright sound. 

334
00:24:52,980 --> 00:24:57,690
That's making that buzz, that nice, 
buzzing sound that we, we like. 

335
00:24:57,690 --> 00:25:00,672
Well, I'm assuming you like that. 
If you don't like that [MUSIC]. 

336
00:25:00,672 --> 00:25:05,600
That then tough, 'cuz that's the sound it 
makes. 

337
00:25:05,600 --> 00:25:08,785
but the thing is that when we repeat it 
over and over and over again., we're, 

338
00:25:08,785 --> 00:25:13,140
actually, when we get to the end of the 
route, and we drop down again. 

339
00:25:13,140 --> 00:25:16,046
That's actually quite a fast move. 
And that's what creates all the 

340
00:25:16,046 --> 00:25:18,576
harmonics. 
If we smooth that, it prevents the 

341
00:25:18,576 --> 00:25:22,730
harmonics from being generated, and it 
smoothes Filters out that sound, so what 

342
00:25:22,730 --> 00:25:28,710
we're actually doing is we're averaging 
the signal as it goes up, kind of. 

343
00:25:28,710 --> 00:25:31,577
and that's fine because it's a slow 
increase, but then when we get that 

344
00:25:31,577 --> 00:25:36,100
sudden drop, we smooth it in the same way 
we might blur an image. 

345
00:25:36,100 --> 00:25:39,310
And that's more or less how we turn high 
frequencies down. 

346
00:25:39,310 --> 00:25:42,420
So, it's really simple and if you're 
interested in that process. 

347
00:25:42,420 --> 00:25:46,060
There's a number of filters that come 
bundled with the course air package that 

348
00:25:46,060 --> 00:25:49,560
we've put together for you. 
and they run nicely on Android as well, 

349
00:25:49,560 --> 00:25:51,464
so you want to have a look at those, 
they're in the Android package and 

350
00:25:51,464 --> 00:25:54,542
there's 4 or 5 of them. 
And you can actually see the algorithms 

351
00:25:54,542 --> 00:25:57,060
if you're interested, you can have a look 
at them. 

352
00:25:57,060 --> 00:26:00,456
Alright, so that's how the synthesiser 
works. 

353
00:26:00,456 --> 00:26:03,255
Now, finally, what I want to do is go 
back to our, 

354
00:26:03,255 --> 00:26:06,791
A more complex example that combines all 
the bits together and just talk about how 

355
00:26:06,791 --> 00:26:11,238
that tinal thing wor, works. 
Just a few little things that make it a 

356
00:26:11,238 --> 00:26:16,159
bit more useable. 
so I'm going to go back to our music 

357
00:26:16,159 --> 00:26:22,486
machine example which is here and I'm 
going to run it and what's going to 

358
00:26:22,486 --> 00:26:28,101
happen is. 
[MUSIC] It started up straight away 

359
00:26:28,101 --> 00:26:31,689
[COUGH] and it's distorting beautifully 
really not bad. 

360
00:26:31,689 --> 00:26:36,944
There's very little I have to do now all 
of it [MUSIC] Make music. 

361
00:26:36,944 --> 00:26:44,178
Let's have some bass drums. 
I do like a bit of bass drum, can you 

362
00:26:44,178 --> 00:26:51,892
hear the bass drum? 
You can just about, let me knock this one 

363
00:26:51,892 --> 00:26:56,034
out. 
Okay, that's good. 

364
00:26:56,034 --> 00:27:01,733
It's quite hard to use that. 
You could have a nicer keyboard setting 

365
00:27:01,733 --> 00:27:05,993
or something like that. 
[MUSIC] So let's have a look at what 

366
00:27:05,993 --> 00:27:08,070
we've done to put the main application 
together. 

367
00:27:08,070 --> 00:27:11,594
So, we've got two synthesizers. 
now there's a clever way to do this and 

368
00:27:11,594 --> 00:27:14,026
there's a stupid way of doing this and 
just to make your life easier, I've done 

369
00:27:14,026 --> 00:27:18,439
it the stupid way. 
instead of creating an object or a class 

370
00:27:18,439 --> 00:27:25,130
which is a synth although I've already 
done that behind the scenes anyway. 

371
00:27:25,130 --> 00:27:28,120
But instead of doing that, just so it's 
clear and you can see how it's done, I've 

372
00:27:28,120 --> 00:27:31,338
just duplicated all of the codes. 
There was actually two sets. 

373
00:27:31,338 --> 00:27:35,563
A brighter, cleverer, more engineering 
savvy method is to make another class 

374
00:27:35,563 --> 00:27:40,088
that encapsulates all of the sliders. 
And then just to create one of those 

375
00:27:40,088 --> 00:27:42,818
objects and to say where you want Where 
to put it, so that's something we should 

376
00:27:42,818 --> 00:27:45,690
have a look at. 
There's a good example in all of the 

377
00:27:45,690 --> 00:27:48,330
current examples that we've given you, 
there are good examples of classes, and 

378
00:27:48,330 --> 00:27:51,772
you should have a look at that those. 
But I didn't want to do that and find 

379
00:27:51,772 --> 00:27:54,920
that no-, that some of you didn't really 
understand that whole process. 

380
00:27:54,920 --> 00:27:59,189
So I've just gone through and I've 
duplicated all of that code. 

381
00:28:00,640 --> 00:28:04,357
So basic stuff is I thought well I want 
it to look slightly better than it 

382
00:28:04,357 --> 00:28:10,080
currently looks so I've created a brushed 
metal background. 

383
00:28:10,080 --> 00:28:13,162
I've positioned all the sliders on the 
screen and then I've created this brushed 

384
00:28:13,162 --> 00:28:16,490
metal background and you see that this is 
a good tip. 

385
00:28:17,700 --> 00:28:23,196
If you can avoid havong to draw 
Non-animated information. 

386
00:28:23,196 --> 00:28:29,408
via algorithmic methods, i.e. 
if you can avoid having to apply the 

387
00:28:29,408 --> 00:28:34,140
interface graphics, do avoid it. 
Make a Photoshop image that has your 

388
00:28:34,140 --> 00:28:36,816
interface. 
So I've got a slightly embossed area here 

389
00:28:36,816 --> 00:28:40,050
and here which these are the panels that 
hold the information and if I spent more 

390
00:28:40,050 --> 00:28:43,137
time on that I can make them look really 
nice and I've fake knobs and switches 

391
00:28:43,137 --> 00:28:49,912
that I copied and pasted of the Internet. 
Or I could photograph my something from 

392
00:28:49,912 --> 00:28:54,130
my set connection and then put those on 
them instead. 

393
00:28:54,130 --> 00:28:58,420
but I guess what I'm trying to say is you 
can do an awful lot by preparing your 

394
00:28:58,420 --> 00:29:05,242
images in Photoshop just like we did last 
week with the instaspan for the overlay. 

395
00:29:05,242 --> 00:29:08,770
It's the same sort of thing. 
put the effort in there if it's not 

396
00:29:08,770 --> 00:29:11,518
going to animate. 
Put the effort in in Photoshop, make it 

397
00:29:11,518 --> 00:29:14,470
look sweet, and then draw it. 
I must admit I've not really put the 

398
00:29:14,470 --> 00:29:17,460
effort in here, but there's a back, 
there's a basic starting point. 

399
00:29:17,460 --> 00:29:20,180
You can see where the panels are; they're 
sort of lined up. 

400
00:29:20,180 --> 00:29:24,470
Another thing you can do is you can put 
your interactive graphic elements Onto 

401
00:29:24,470 --> 00:29:28,364
your screen so that you do that 
problematically then you screenshot it 

402
00:29:28,364 --> 00:29:32,786
the right size and move that into your 
Photoshop application and then you can 

403
00:29:32,786 --> 00:29:38,700
draw on top of it. 
I guess it's what I'm saying is do the 

404
00:29:38,700 --> 00:29:41,056
work in Photoshop is you're not going to 
have to animate it make it look nice 

405
00:29:41,056 --> 00:29:44,129
there. 
We did exactly did the same thing with 

406
00:29:44,129 --> 00:29:48,450
angry droids as well we just Do a bit of 
support work there. 

407
00:29:48,450 --> 00:29:51,610
So that's the basic idea, and you can get 
away with a lot there. 

408
00:29:51,610 --> 00:29:57,940
also it's nice to add custom graphics to 
your sliders, and you can do that too. 

409
00:29:57,940 --> 00:30:02,820
So, we've done that. 
And then we've loaded it in here. 

410
00:30:02,820 --> 00:30:05,316
And then we've done the same thing, exact 
same thing that Matt did for the drum 

411
00:30:05,316 --> 00:30:08,920
track. 
We created four Boolean arrays. 

412
00:30:08,920 --> 00:30:12,056
Track, 1, 2, 3, and 4. 
These are for our four drum sounds that 

413
00:30:12,056 --> 00:30:16,990
were in our drum machine, which is a 
kick, a snare, a handclap, and a cymbal. 

414
00:30:16,990 --> 00:30:20,798
Ideally, I'd have a hi hat. 
There is a hi hat knocking around in one 

415
00:30:20,798 --> 00:30:25,704
of the, folders on the Coursera pack that 
you've got. 

416
00:30:25,704 --> 00:30:29,640
And you can see here, exactly as I said, 
I just duplicated everything. 

417
00:30:29,640 --> 00:30:32,080
So there's the floats that you've already 
seen. 

418
00:30:32,080 --> 00:30:36,238
Except we've added another function, 
filter attack, which is what gives it 

419
00:30:36,238 --> 00:30:41,500
that sort of TB 303 baseline sound. 
[LAUGH] allegedly. 

420
00:30:41,500 --> 00:30:45,154
And then we've got, some transpose 
functions as well, which allows us to 

421
00:30:45,154 --> 00:30:48,930
move it around. 
We've got a second wave table for the 

422
00:30:48,930 --> 00:30:51,652
second object. 
You can see we've got two syns waveform 

423
00:30:51,652 --> 00:30:54,119
and waveform two. 
And now these are all basically 

424
00:30:54,119 --> 00:30:57,210
everything that has a two after it is for 
the second waveform. 

425
00:30:57,210 --> 00:31:01,426
We create a bunch of secondary slide and 
sliders and multi-sliders to hold all the 

426
00:31:01,426 --> 00:31:06,380
separate information and then we load in 
some samples. 

427
00:31:06,380 --> 00:31:09,490
And then we set up a sliders, so we have 
twice as many sliders. 

428
00:31:09,490 --> 00:31:12,114
But they have slightly different numbers 
in to re, to represent the fact that 

429
00:31:12,114 --> 00:31:15,554
they're going to be drawn somewhere else. 
Now as I said, you would draw them, 

430
00:31:15,554 --> 00:31:18,435
screen shot it, import it into Photoshop, 
do your background, and then just load 

431
00:31:18,435 --> 00:31:23,468
the background. 
Now so we load the background where do I 

432
00:31:23,468 --> 00:31:27,470
load the background. 
Into the bottom of this. 

433
00:31:28,540 --> 00:31:32,335
that's the wavetable, exactly the same 
way as I described in the first example. 

434
00:31:32,335 --> 00:31:35,953
Okay the background is loaded, there it 
is, brushed metal, that's my brushed 

435
00:31:35,953 --> 00:31:39,838
metal background. 
and then here, what I do is I set up the 

436
00:31:39,838 --> 00:31:43,090
drum tracks in the same way that Matt's 
already explained. 

437
00:31:43,090 --> 00:31:47,925
I just create these boolean arrays, 
they're either true or false. 

438
00:31:47,925 --> 00:31:51,548
And I set them all to false, so they're 
all off. 

439
00:31:51,548 --> 00:31:55,025
Okay, and then we get all the information 
in exactly the same way, as we did 

440
00:31:55,025 --> 00:32:00,500
before. 
And then we use the same playHead 

441
00:32:00,500 --> 00:32:08,880
information to get the frequency content 
for both synthesizers. 

442
00:32:08,880 --> 00:32:11,888
And then we use another variable, current 
b, so we could use playHead if we're 

443
00:32:11,888 --> 00:32:15,990
using current b too. 
It doesn't really matter, it's the same. 

444
00:32:15,990 --> 00:32:21,006
To find out whether it's if it's true 
basically, then what we do is [COUGH] we 

445
00:32:21,006 --> 00:32:26,655
play that drum sound back. 
the mass press stuff is exactly the same, 

446
00:32:26,655 --> 00:32:31,890
if you click there it sets it And, you've 
set it to play. 

447
00:32:31,890 --> 00:32:35,480
in both mouse press and mouse drags. 
And other than that, it's exactly the 

448
00:32:35,480 --> 00:32:38,727
same as the two examples you've seen. 
The basic synth example, and the drum 

449
00:32:38,727 --> 00:32:41,420
example. 
And that's how you end up with this. 

450
00:32:41,420 --> 00:32:41,420
[MUSIC]. 

451
00:32:48,432 --> 00:32:52,176
[MUSIC] 