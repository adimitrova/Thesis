1
00:00:04,741 --> 00:00:17,617
[SOUND]. 

2
00:00:17,617 --> 00:00:23,965
In the next section I am going to talk 
about how to use audio in analysis to get 

3
00:00:23,965 --> 00:00:31,202
some information about the sound that's 
currently playing. 

4
00:00:31,202 --> 00:00:35,947
Now, you can see in this code here, that 
I've got a player and I'm telling the 

5
00:00:35,947 --> 00:00:42,120
player to do, to start analyzing by 
calling the set analysis. 

6
00:00:42,120 --> 00:00:45,170
Set analyzing method and setting it to 
true. 

7
00:00:45,170 --> 00:00:48,446
What that will do is that will cause the 
player to, to begin, not just playing 

8
00:00:48,446 --> 00:00:53,330
back, but also listening to itself 
playing and doing some analysis on there. 

9
00:00:53,330 --> 00:00:58,022
But the type of analysis we're going to 
do, is, is called extracting in the, 

10
00:00:58,022 --> 00:01:01,140
spectrum. 
So we're going to extract from the power 

11
00:01:01,140 --> 00:01:03,690
spectrum of the sound. 
Now what does that mean? 

12
00:01:03,690 --> 00:01:07,596
Well, the basic idea is that when you 
listen to a sound, there are different 

13
00:01:07,596 --> 00:01:12,420
components in that sound. 
For example, if you listen to very heavy, 

14
00:01:12,420 --> 00:01:15,910
bass-y music like Reggae or something 
like that. 

15
00:01:15,910 --> 00:01:20,040
There's a lot of really low frequency 
sound in there, a lot of bass. 

16
00:01:20,040 --> 00:01:23,215
So maybe bass is a more familiar term 
than low frequency, right? 

17
00:01:23,215 --> 00:01:27,555
So if we talk about base that's in the 
low frequencies we can also talk about 

18
00:01:27,555 --> 00:01:32,105
treble which is what makes a sound bright 
and treble the opposite end to bass in 

19
00:01:32,105 --> 00:01:38,384
the description of the sound. 
So we talk about treble and midrange is 

20
00:01:38,384 --> 00:01:42,662
more, things, so speech happens a lot in, 
in the mid-range and hmm, but it has lot 

21
00:01:42,662 --> 00:01:47,296
of trouble bits as well. 
For example, if I go [SOUND] that's a lot 

22
00:01:47,296 --> 00:01:51,066
of, there is a lot of trouble in that. 
Okay, so the idea is that with this 

23
00:01:51,066 --> 00:01:55,035
analysis we can actually get some 
information about what, how much basis in 

24
00:01:55,035 --> 00:01:59,130
that, how much trouble is in there and so 
on and also we know what is the average, 

25
00:01:59,130 --> 00:02:06,094
of, of the level of the sound. 
And as I said the method we said to do 

26
00:02:06,094 --> 00:02:09,187
this is the fast Fourier transform, the 
FFT. 

27
00:02:09,187 --> 00:02:12,323
And we can get the data out of that and 
turn it into what we call a power 

28
00:02:12,323 --> 00:02:16,187
spectrum, which really is just telling us 
how much power this is in those different 

29
00:02:16,187 --> 00:02:20,492
frequency bands. 
So is there, how much bass is there, but 

30
00:02:20,492 --> 00:02:23,252
not just how much bass and how much 
different bands of bass so low bass and 

31
00:02:23,252 --> 00:02:26,240
medium bass. 
Okay. 

32
00:02:26,240 --> 00:02:28,805
And so what we're going to do first is 
just take an average of all of those 

33
00:02:28,805 --> 00:02:32,719
difference frequencies. 
And see if we can use that to, plot a 

34
00:02:32,719 --> 00:02:38,550
signal meter, which will show us what's 
going on in the sound currently. 

35
00:02:38,550 --> 00:02:41,930
So you can see here, I'm pulling out this 
float called Pow, which is the average 

36
00:02:41,930 --> 00:02:46,348
power in, in the spectrum. 
So that's looking at all of those bands, 

37
00:02:46,348 --> 00:02:50,418
bass, treble, mid, and taking an average 
of all that. 

38
00:02:50,418 --> 00:02:54,708
And then I'm going to set a color using 
that, and following that I'm going to 

39
00:02:54,708 --> 00:03:01,440
draw a rectangle where the size is set by 
the, by the power as well. 

40
00:03:01,440 --> 00:03:03,530
So let's just code that up and see what 
it looks like. 

41
00:03:04,800 --> 00:03:11,278
So I'm going to have to first deactivate 
a bit of this accelerometer code. 

42
00:03:11,278 --> 00:03:16,446
So I'm going to add another float up 
here. 

43
00:03:16,446 --> 00:03:20,868
Float power okay. 
Remember I have to say player.set 

44
00:03:20,868 --> 00:03:26,538
analyzing so apologies if you're used to 
American English spelling, and you're 

45
00:03:26,538 --> 00:03:32,370
used to S's instead of zed zeds instead 
of S's. 

46
00:03:32,370 --> 00:03:39,660
But for obvious reasons, we're using Ss. 
okay now. 

47
00:03:39,660 --> 00:03:41,850
So that will tell it to start doing that 
analysis. 

48
00:03:41,850 --> 00:03:46,090
So extracting that, that, that spectrum. 
So that I can then ask for it later. 

49
00:03:46,090 --> 00:03:52,258
So, let's do that. 
We'll leave this speed and in fact I'm 

50
00:03:52,258 --> 00:03:59,651
going to delete all of that code, okay. 
So, lets pull out the power. 

51
00:03:59,651 --> 00:04:07,870
Power equal player get average power. 
Okay, that's what I need to do to pull 

52
00:04:07,870 --> 00:04:10,836
out the average power. 
The player calculates it all for me and 

53
00:04:10,836 --> 00:04:14,050
then I'm going to set a fill color using 
that. 

54
00:04:14,050 --> 00:04:17,956
So I'm going to use the red now and the 
power value actually has been set up so 

55
00:04:17,956 --> 00:04:24,710
it comes in the range zero to one. 
Which makes it a little bit easier to 

56
00:04:24,710 --> 00:04:26,990
deal with in the accelorameter data we 
looked at. 

57
00:04:26,990 --> 00:04:30,790
So its in the range zero to one so I 
could just use it directly at that. 

58
00:04:30,790 --> 00:04:34,522
So that's the red component. 
OK so its just going to set the red and 

59
00:04:34,522 --> 00:04:40,740
then I'm going to draw a rectangle with a 
width which is set by the power. 

60
00:04:41,920 --> 00:04:44,180
So again, I just use it as a ratio if you 
like. 

61
00:04:44,180 --> 00:04:47,554
Power times width. 
So if it's full power, the bar should go 

62
00:04:47,554 --> 00:04:50,125
all the way across. 
If it's, if it's, as it, as it gets 

63
00:04:50,125 --> 00:04:53,790
lower, it goes less and less across. 
You'll see what that does in a minute. 

64
00:04:53,790 --> 00:04:56,730
The basic idea is that it will be like a 
bouncing bar. 

65
00:04:56,730 --> 00:04:58,910
And height will be the complete height of 
the screen. 

66
00:05:00,340 --> 00:05:09,059
Right. 
So now let's run this on the device and 

67
00:05:09,059 --> 00:05:23,761
see what our new volume or power meter 
looks like. 

68
00:05:23,761 --> 00:05:31,210
[MUSIC] [MUSIC]. 
Okay. 

69
00:05:31,210 --> 00:05:33,696
So, it's a bit difficult to see. 
Because the red, maybe, is a little bit, 

70
00:05:33,696 --> 00:05:35,130
dim. 
So what I'm going to do. 

71
00:05:35,130 --> 00:05:42,090
And also, I'm not filling in the 
background color as I go. 

72
00:05:42,090 --> 00:05:46,553
Let's just fill in the background color. 
because it wipes out, wipes the 

73
00:05:46,553 --> 00:05:51,861
background. 
[MUSIC] So I made a few edits to the code 

74
00:05:51,861 --> 00:05:59,097
just to make it so that the background is 
set at, is, is clear every time and the 

75
00:05:59,097 --> 00:06:08,270
power, it should be clearer now. 
[MUSIC] Okay. 

76
00:06:08,270 --> 00:06:26,862
So that's, okay, that's a bit better. 
[mmm] So there's quite a lot going on in 

77
00:06:26,862 --> 00:06:32,575
that sound. 
So it's not necessarily very clear what, 

78
00:06:32,575 --> 00:06:39,663
what's going on from power there. 
You can see when there are stronger, 

79
00:06:39,663 --> 00:06:43,300
bursts in sound. 
You can see the power bouncing. 

80
00:06:43,300 --> 00:06:50,833
Let's just try it with a different sound. 
So you can, you can see from that there 

81
00:06:50,833 --> 00:06:56,197
are the volume meter bounces. 
The power meter bounces, but maybe we can 

82
00:06:56,197 --> 00:07:02,525
use a better sound to illustrate it. 
So we actually have this sound we created 

83
00:07:02,525 --> 00:07:10,150
previously. 
called ping, as I remember. 

84
00:07:10,150 --> 00:07:12,420
And so let's just run it with the ping 
sound. 

85
00:07:13,930 --> 00:07:15,370
And it might be a bit clearer what's 
going on. 

86
00:07:15,370 --> 00:07:17,400
[SOUND] 

87
00:07:17,400 --> 00:07:30,935
Perhaps that's a bit clearer. 
You can see that hmm, the parameter is 

88
00:07:30,935 --> 00:07:41,142
bouncing every time the ping happens. 
So we have covered how you can extract 

89
00:07:41,142 --> 00:07:46,882
some information about the spectrum, but 
it's quite, it's quite low-resolution if 

90
00:07:46,882 --> 00:07:50,802
you like. 
It's not telling us a lot of information 

91
00:07:50,802 --> 00:07:54,082
about what's going on. 
We just looked at the average power which 

92
00:07:54,082 --> 00:07:56,834
was looking at all the frequency bands 
and taking the average power, which is 

93
00:07:56,834 --> 00:08:00,950
basic, kind of like, you know, how loud 
is it right now? 

94
00:08:00,950 --> 00:08:03,530
if you like, which allowed us to draw a 
volume meter. 

95
00:08:03,530 --> 00:08:06,336
Now, if you want to get into more detail 
You can actually access not just the 

96
00:08:06,336 --> 00:08:09,372
average power, but you can look at each, 
individual band so you can tell how much 

97
00:08:09,372 --> 00:08:15,100
bass there is, how much mid range there 
is, and how much treble there is. 

98
00:08:15,100 --> 00:08:18,108
So I've got some code on the next slide 
which just shows you the basics of how to 

99
00:08:18,108 --> 00:08:19,939
do that. 
But I'm going to do a more interesting 

100
00:08:19,939 --> 00:08:23,806
example in the editor. 
So let's just look at that code first So 

101
00:08:23,806 --> 00:08:31,500
at the top of your code you can create a 
float array called spec. 

102
00:08:33,240 --> 00:08:36,468
Now what's a float array? 
Well remember that float is just a single 

103
00:08:36,468 --> 00:08:40,823
variable which can store a number, which 
is something like 1.7 or you has a has a 

104
00:08:40,823 --> 00:08:46,320
decimal place if you like. 
Its an accurate number think of it that 

105
00:08:46,320 --> 00:08:51,325
way and float away, you can see we've got 
those square brackets can basically store 

106
00:08:51,325 --> 00:08:55,850
lots of floats. 
Now, that makes sense because we don't, 

107
00:08:55,850 --> 00:08:58,370
we want to, we don't just want to store, 
so the average power, we want to store 

108
00:08:58,370 --> 00:09:02,270
the power in every band. 
So we need some place where we can store, 

109
00:09:02,270 --> 00:09:07,160
lots of numbers so that's why we've got 
an array there. 

110
00:09:07,160 --> 00:09:10,228
Markers covered arrays in a previous 
lesson and also you can look in his 

111
00:09:10,228 --> 00:09:13,555
additional programming lectures to find 
out more. 

112
00:09:13,555 --> 00:09:18,157
Now in the code below so we asked the 
player, we're assuming you've got a 

113
00:09:18,157 --> 00:09:23,227
player created and we ask it to do the 
analysis and then In a draw method, we, 

114
00:09:23,227 --> 00:09:30,180
exp-, We, we ask for the power spectrum 
from the player. 

115
00:09:30,180 --> 00:09:34,450
Which will give us the current snapshot 
of whatever the power spectrum is. 

116
00:09:34,450 --> 00:09:38,095
And then, if we get something valid. 
So we check if it's null. 

117
00:09:38,095 --> 00:09:40,790
So we check if we get something valid 
back. 

118
00:09:40,790 --> 00:09:45,970
and then, if we do, we iterate that 
spectrum using a four loop. 

119
00:09:45,970 --> 00:09:48,490
Again, four loops are covered in more 
detail in. 

120
00:09:48,490 --> 00:09:52,690
Markers additional programming lectures. 
So we've basically stepped through every 

121
00:09:52,690 --> 00:09:56,274
number in that spectrum and we set a fill 
color using that and draw a rectangle 

122
00:09:56,274 --> 00:09:59,514
based on it. 
Now as I said earlier that's a basic 

123
00:09:59,514 --> 00:10:02,504
example I want to do a more interesting 
works example where what we're going to 

124
00:10:02,504 --> 00:10:06,580
do is plot that spectrum over time. 
So you can kind of see a map of these 

125
00:10:06,580 --> 00:10:14,530
sounds you've been hearing over time. 
So how we do that is like this. 

126
00:10:14,530 --> 00:10:17,607
So we've got an audio player and in draw 
method, we can play as usual. 

127
00:10:17,607 --> 00:10:24,073
And that will, that won't effect it, 
it'll only cause it to play if it's not 

128
00:10:24,073 --> 00:10:31,568
playing already. 
So it's okay to just keep calling it And, 

129
00:10:31,568 --> 00:10:38,246
we going to try to extract the spectrum 
so first of all we add the float spectrum 

130
00:10:38,246 --> 00:10:49,930
we'll expect so I can target slightly 
more rapidly and here we going to say if. 

131
00:10:49,930 --> 00:10:56,400
So spec equals. 
Player get power spectrum, like that. 

132
00:10:56,400 --> 00:11:02,786
And if spec is not input is no so we got 
a valid got something plot, the we type 

133
00:11:02,786 --> 00:11:10,000
in a for loop. 
So we set a variable i to not. 

134
00:11:10,000 --> 00:11:13,172
I has to be smaller than spec dot link so 
and i plus plus so that's going to go 

135
00:11:13,172 --> 00:11:16,396
from zero up to whatever, how many 
numbers there are in that spectrum we've 

136
00:11:16,396 --> 00:11:20,696
just been given. 
Okay, and what I'm going to do is I'm 

137
00:11:20,696 --> 00:11:24,360
going plot the spectrum using differently 
colored dots. 

138
00:11:24,360 --> 00:11:29,526
So if the If that, if the power band is, 
is powerful, then it will do a brightly 

139
00:11:29,526 --> 00:11:34,035
colored dot. 
So I'm going to do that using the stroke, 

140
00:11:34,035 --> 00:11:37,870
and I'm going to stroke color is 255, 
which if, if it's just 255 it will give 

141
00:11:37,870 --> 00:11:41,770
us a white color, but 255 times the value 
of the spectrum at I, so As it goes 

142
00:11:41,770 --> 00:11:49,600
through, it will start with the base at 
the, the, the top end of the spectrum. 

143
00:11:49,600 --> 00:11:52,665
That is, the top end of the array. 
And work through the array, and get to 

144
00:11:52,665 --> 00:11:56,070
the treble at the other end. 
Okay? 

145
00:11:56,070 --> 00:12:00,870
And then I'm going to draw a point. 
now, the x and y position, the point. 

146
00:12:02,000 --> 00:12:07,539
Well, the x position, I'm going to just, 
I'm going to use a variable actually, 

147
00:12:07,539 --> 00:12:10,984
because what I want to do is, I want to, 
each time I plot this, this spectrum, I'm 

148
00:12:10,984 --> 00:12:16,350
going to move along so that I can plot it 
slightly further along the next time. 

149
00:12:16,350 --> 00:12:19,930
Which will allow me to, if you like, draw 
a map of that spectrum over time. 

150
00:12:19,930 --> 00:12:23,810
So I'm going to create an integer called 
xPos. 

151
00:12:23,810 --> 00:12:28,470
And set it to naught, in set up so it 
starts at zero. 

152
00:12:28,470 --> 00:12:32,335
My x position is just going to be x 
pause, and my y position will be just i. 

153
00:12:32,335 --> 00:12:36,820
So, as i increases it draws, it will draw 
a line, it will draw these dots down the 

154
00:12:36,820 --> 00:12:44,460
screen where each dot has a different 
color based on the power of that element. 

155
00:12:44,460 --> 00:12:49,800
So next time I'm going to draw, I want x 
pause to go up by four. 

156
00:12:49,800 --> 00:12:52,530
So it moves along by four. 
And since I'm moving along four. 

157
00:12:52,530 --> 00:12:55,110
So imagine I'm drawing these kind of 
dotted lines down-screen. 

158
00:12:55,110 --> 00:12:59,630
I want to, I can also make my stroke 
weight to four. 

159
00:12:59,630 --> 00:13:03,730
So that the dots are drawing, also, are 
four pixels wide. 

160
00:13:03,730 --> 00:13:06,240
Okay? 
So that should plot my, my sound over 

161
00:13:06,240 --> 00:13:09,790
time across the screen. 
So let's just. 

162
00:13:09,790 --> 00:13:15,040
Let's run that on the device now. 
[SOUND] [MUSIC] Okay, so you can see 

163
00:13:15,040 --> 00:13:22,784
it's, it's drawn, let's just stop that 
and I'll explain it, so you can see what 

164
00:13:22,784 --> 00:13:31,375
it's drawn there is But looks like a kind 
of, a bunch of white plotting gray scale 

165
00:13:31,375 --> 00:13:39,536
plot of some sort. 
Now the top of that screen wherever the 

166
00:13:39,536 --> 00:13:41,300
bass frequencies and the lower down the 
screen it gets the higher pitches so 

167
00:13:41,300 --> 00:13:46,950
that's how that works. 
And you'll notice there are if you like 

168
00:13:46,950 --> 00:13:54,260
bands, looks like there was more going 
on. 

169
00:13:54,260 --> 00:13:58,210
And those bits were signifying when there 
was a bass drum playing, or a snare drum. 

170
00:13:58,210 --> 00:14:02,750
So that the, the, the break beat kind of 
has a bass, snare, bass, snare sound. 

171
00:14:02,750 --> 00:14:05,310
And you can see that pattern in, in the 
spectrum. 

172
00:14:05,310 --> 00:14:08,564
Now, what I want to do is just. 
The problem is that x pause eventually 

173
00:14:08,564 --> 00:14:12,308
gets higher than the width of the screen. 
So it starts plotting off of the edge of 

174
00:14:12,308 --> 00:14:14,225
the screen. 
So you can't see it anymore. 

175
00:14:14,225 --> 00:14:18,365
So what I'll do just to make a final 
change is if X pos is greater than width 

176
00:14:18,365 --> 00:14:23,930
in other words if I've moved off the edge 
of the screen. 

177
00:14:23,930 --> 00:14:28,106
So go back to the other side of the 
screen and wipe it ready to re draw the 

178
00:14:28,106 --> 00:14:33,865
new spectrum okay so set X so it will 
move across the screen. 

179
00:14:33,865 --> 00:14:37,815
Drawing the spectrum and when you get to 
the end we go back to the beginning. 

180
00:14:37,815 --> 00:14:46,168
So let's run that on a device now. 
We should see when it gets to the edge of 

181
00:14:46,168 --> 00:14:49,168
the screen it, it returns to the other 
side and starts plotting there again. 

182
00:14:49,168 --> 00:14:51,254
[SOUND] 

183
00:14:51,254 --> 00:15:04,070
So you can see the double base drum 
there. 

184
00:15:04,070 --> 00:15:11,860
Dun, dun, dun, that sound. 
[MUSIC] Right. 

185
00:15:11,860 --> 00:15:13,990
So that's the spectrum. 
So you can see it's quite dense at the 

186
00:15:13,990 --> 00:15:15,140
top. 
Quite dense. 

187
00:15:15,140 --> 00:15:17,240
That means there's plenty of bass going 
on in it. 

188
00:15:17,240 --> 00:15:21,011
And there's, and it sort thins out 
towards the top end. 

189
00:15:21,011 --> 00:15:27,743
So you can definitely see the bass drums 
having a kind of denser sound [MUSIC] so 

190
00:15:27,743 --> 00:15:32,551
let's stop that. 
Now, I encourage you try and load some 

191
00:15:32,551 --> 00:15:35,815
different sounds into there and record 
yourself and load back into there and 

192
00:15:35,815 --> 00:15:38,977
just trying plotting some different 
sounds and you see what's going on and 

193
00:15:38,977 --> 00:15:42,292
also the layer in the spectrum is perhaps 
more interesting so, you might want to 

194
00:15:42,292 --> 00:15:47,660
plot the first. 
So 50 things in that array and just plot 

195
00:15:47,660 --> 00:15:51,244
them across the whole screen so you can 
really explore what's going on in that 

196
00:15:51,244 --> 00:15:54,884
spectrum so try some different sounds 
explore the spectrum have fun and if you 

197
00:15:54,884 --> 00:16:00,932
can make something more interesting. 
You can also add interactivity so that 

198
00:16:00,932 --> 00:16:04,572
they can slow down the sound speed up and 
see how the spectrum changes so that's 

199
00:16:04,572 --> 00:16:10,530
what I would advise you to go and do. 
And to, to explore this topic further.  [MUSIC]