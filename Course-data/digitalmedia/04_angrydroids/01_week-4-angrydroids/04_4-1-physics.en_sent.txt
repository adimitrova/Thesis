[sound].
this week i'm going to talk about physics  engines.
now, physics engines have a really  powerful tool to get animation into  action in in, in interactive programs.
the great things about physics engines is  that they use mathematics, physics, to  simulate the movement of objects.
so you can get objects that move just  like they do in the real world.
and really if you've got a physic sense  you don't have to write much of the code  at all for that animation, because the  physics engine will handle a lot of it  for you.
they're very hard code to write yourself,  but once you've got all that mass  encapsulated.
you can just create objects and they will  behave much as they would in the real  world.
you're going to work with a physics  engine called box2d, which does  everything in two dimensions.
so, it's just slightly simpler than a  three dimensional physics engine.
and it suits our, our needs very well  because it's, we're all writing 2d 2d  programs, in this course.
it's been used very extensively.
probably most famously in the game angry  birds which, you've probably heard of.
considering it's one of the most  successful video games of all time, by  now, i expect.
so, what is a physics engine?
a physics engine works with objects, and  it moves objects around.
so here we have a circle and rectangle,  and these objects are moved by forces.
so as in the physical world, forces are  types of objects and that causes them to  move around.
we'll talk in detail about both of these  things in this lecture.
but first i need to sort of talk a bit  about how the whole world is represented.
now, you actually need to have an  explicit representation of the physics  world as well as the objects in it.
and i'll come back to how you create it.
but before i say that there's something a  little different about how the physics  world is represented than what we've done  up until now.
up to now we've upcentered everything in  terms of pixels on the screen, and that's  fine.
that's, we're dealing with the screen.
we can work all our distances can be our  pixels.
but this is the real world isn't broken  up into squares.
and if you really want to simulate the  real world properly.
you have to seem like there's a  continuous world, things don't change  that much.
you just get rid of the grid.
but you're still using x and y position.
these are no longer whole numbers., they  can be fractional.
but the x and y are still our fundamental  representation of positions and  directions to the work.
but i'll talk a little bit about how to  discuss x and y but deeper  mathematically.
because that will help a little bit when  discussing physics engines.
i won't get heavily mathematical, i'll  just prepare you with a few things.
x and y aren't really separate things.
they, they were just a way of  representing a position of an object on  the screen.
and we can combine them together into a  single thing we call a vector represented  by this line in this diagram.
so here we have a vector.
well it's showing now like v.  we can think of it as an x and a y,  that's our position.
and we can also think of it has having  direction and a length.
it looks like an arrow, it has it's  pointing in a certain direction and it  looks align, it has a certain length.
we called the length align filled with  two hallow bars, across it, we might need  that notation for much.
and once we've got vectors, they're not  just the representations the x and y's.
mathematically vectors also include a  bunch mathematical operations we can do  with them, some of which are quite  powerful.
so, for example if we negate a vector, do  minus v, which is just minus x minus y,  it points in the opposite direction.
if we multiple the vector by a number,  say the vector multipled by 1.5 is 1.5  times x, 1.5 times y.  we change the length of the vector gets  longer in this case and then we can go  further now.
if we've got a vector representing a  position, we've got another vector.
and we put that vector at starting at the  end points of the end point of the  original one p, except v starts at the  end point of p.  we can take it, it can take us to a new  position.
and that position is actually the  resulting of taking p, taking v and  adding them together.
so we can add a vector v to vector p and  get a new vector p2, and if we do that,  we can do the opposite and subtract it  off.
so if p is px, py, p2 is p2x, p2y and we  know from what we just done that p2 is  equal to p plus v.  well that means that v is equal to p2  minus v.  and so we can subtract off p, p for p2  again, by subtracting p2, p2 from p2x.
and that, if you look at the diagram  here, v is the vector that goes from  point p to point p2.
so by subtracting one, the vector of one  point from the vector of another point we  get the vector that goes between those  two.
and i use that in a couple of slides to  do a calculation.
so back to our physics engine, [cough],  as i said, we've got objects.
we've got forces applied to them, and  they exist in world.
let's look first at the objects.
so we've got a physics object and this is  a simplified representation of an object.
it has a shape, a simple shape.
or say that we mostly deal with circles  and rectangle and occasionally we'll deal  with some more complex objects.
but i think for the example i think just  in circles and rectangles.
it's got a position, it's got an angle,  it's going to take [unknown].
and it's got a mass, which is a physical  quantity which is how much it resists  forces.
so you need for, if it's got a high mass,  you'll need more force to push it.
so these are the things that define  physics objects.
physics object exist within a world.
so, this is how you create a world.
create a new physics world by, it's an  object, you have available physics equals  new physics.
and you give it the size of the world,  which is the width and height of the, of  the, the window normally.
and we use this, which, basically this is  a representation of your program.
so by passing, putting, passing this into  your physics world, you're linking it to  your program.
then, the, the next thing we do to the  physics world is set the density.
that's quite important because it's used  to set the mass of objects, so.
you don't need to set the mass of an  object explicitly.
it will just calculate from how big the  object is based on the density, so the  bigger an object, the more mass it's  going to be.
but the density is going to control how  how massive each of your objects is.
so if you increase the density, then  objects are going to resist movement  more, you're going to need bigger forces,  they're going to move a bit less.
the exception to that is if you set  density to zero.
if you set density to zero, then you're  obviously not going to get affected by  any forces.
so they'r not going to move, they're  going to be static and in the physics  implementation.
you automatically it creates for you  static objects at the sides of the  screen, so things bounce off the sides of  the screen.
so now we've seen created that physics  world, we can start creating objects.
and that's a little bit like drawing  objects in, in processing.
we've got a function of physics  .createrect, so it's the physics object  that's creating the rectangle.
we're creating a rectangular object.
and just as in processing, to create a  rectangle we need four numbers, but it's  a little bit different, like in placing  the first two numbers at the top left.
but the next two numbers are the bottom  right of the rectangle, not the height  and width, so that' something to  remember.
is that it's the top left and bottom  right rather than the top left weidth and  height.
we can also create circule objects.
again a different function creates  circle.
that's three parameters, x and y  positioned at the center of the circle.
and the radius of the circle, how big the  circle is.
and the great thing is, once we've  created these physics objects, they will  just be part of the simulation.
the physics world will just carry on  simulating and you don't really need to  do much at all.
and you'll already get some quiet  compelling interaction.
the only problem is, it's just the  physics world, there's nothing graphical  on screen.
so, for, for your physics objects you  also need to create a graphical object.
now a graphics objects is much what we,  is what we're used to.
they've complex shapes, they've got  colors.
they could be images, so this is exactly  what we're drawing.
now, we're not necessarily going to have  a representation of an object in there.
but we're just going to use all the same  drawing trechniques that we've been using  up to now.
and i'll show you an example of how to do  that.
the most important thing you need to do  is link your physics to your graphics.
so you need to get the precision and  rotation of your of your physics bodies.
and then apply that to whatever graphics  you're going to do.
so, first we get the object's position,  body.getworldcenter.
so that's the center of the object in  world's coordinates.
so if you remember i went back we've got  the pixel coordinates that we use on  screen.
and we've got a set of vector coordinates  that we're using behind the scenes in the  physics engine.
and sometimes you want those to be  different.
in fact, most of the time you're likely  to want it you're having one unit per  pixel is a bit small.
roughly the physics world works in meter.
so one unit is a meter in terms of  physical simulation.
so having one meter per pixel seems  really small, so you might want 10 or  even 100.  so, to get those coordinates back into  pixels, you call physics.worldtoscreen,  so world coordinates to screen  coordinates, screen coordinates to  pixels.
the result of that is a vector, of the  vec2 type, so it's a variable of vec2,  which is a vector, and it has a position.
you can also get the angle of the object,  physics.getangle, and you pass in the  object itself.
and then you can use these for translate  and rotate, just as we saw last week.
so, you need to get out the x and y  positions of the vector, plus .x, plus  .y, and put them in the translate, and  then you rotate by the angle.
i've converted that in to radiance, again  as we saw last week.
so we don't, as the original angles and  degrees, and i've putting in a minus sign  because the directions.
in the physics world, it's different from  directions in the, in the screen worlds.
but just put that in, and then we can do  whatever we like to do.
in this case, i'm drawing an image.
and you must remember to put pressure pot  matrix around those to make sure that  your objects move independently.
[music].
