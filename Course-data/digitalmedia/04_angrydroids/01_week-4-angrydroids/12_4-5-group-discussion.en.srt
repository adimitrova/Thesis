1
00:00:00,080 --> 00:00:17,414
[SOUND]. 

2
00:00:17,414 --> 00:00:23,310
Hi so we've heard Matt explain to you the 
wonders of audio recording and sound 

3
00:00:23,310 --> 00:00:31,657
effects and how to synchronize it with 
collisions generated by physics engine. 

4
00:00:31,657 --> 00:00:36,871
We've had Marco explain the physic engine 
in which we're using that works in iOS 

5
00:00:36,871 --> 00:00:42,085
devices and also Android and on the desk 
what we've done is we've tried to create 

6
00:00:42,085 --> 00:00:48,256
a framework app. 
Which is a basic physics game, 2D physics 

7
00:00:48,256 --> 00:00:50,756
game. 
And they're really, really popular on 

8
00:00:50,756 --> 00:00:55,190
handheld devices. 
Really popular amongst casual gamers. 

9
00:00:55,190 --> 00:00:58,300
So our template just gives you the bare 
bones for it you want to make a game. 

10
00:00:58,300 --> 00:01:01,230
It gives you a physics engine. 
It gives you a mechanism for loading 

11
00:01:01,230 --> 00:01:03,525
sound effects, and a mechanism for 
loading artwork. 

12
00:01:03,525 --> 00:01:08,113
And you can easily make a game that, you 
can easily make a game with those 

13
00:01:08,113 --> 00:01:13,145
components which is somewhat like Angry 
Birds, Angry Birds being the most famous 

14
00:01:13,145 --> 00:01:20,165
physics-based 2D platformer on mobile 
devices, I should think. 

15
00:01:20,165 --> 00:01:24,970
 >> Which actually uses Box2D, which is 
the same library we've been using. 

16
00:01:24,970 --> 00:01:26,439
 >> Yeah. 
 >> So you're using exactly the same 

17
00:01:26,439 --> 00:01:29,682
physics engine, almost exactly the same 
physics engine that Edward Burns is using 

18
00:01:29,682 --> 00:01:32,512
Yeah. 
Except you're using the one that we've 

19
00:01:32,512 --> 00:01:35,342
hacked together, which may or may not be 
a good thing. 

20
00:01:35,342 --> 00:01:39,338
with certain improvements. 
 >> Yes, there's been some improvements 

21
00:01:39,338 --> 00:01:43,770
made Cross-platform and it should be 
relatively easy for you to use. 

22
00:01:43,770 --> 00:01:46,065
So we've got this example. 
We're want to talk you through it. 

23
00:01:46,065 --> 00:01:52,312
so you see it when [INAUDIBLE]. 
This is it running on an iOS device. 

24
00:01:52,312 --> 00:01:58,220
So you can see it's basically the same. 
You've got our little hero here. 

25
00:01:58,220 --> 00:02:03,404
Who is a he's basically tux, he's what 
Linux users refer to as Tux who is the 

26
00:02:03,404 --> 00:02:07,050
symbol of Linux. 
He's a penguin. 

27
00:02:07,050 --> 00:02:11,746
He's not normally a really ugly penguin 
which does reveal a lot about Linux. 

28
00:02:11,746 --> 00:02:16,346
And he's wearing a little android head. 
And he's fighting [LAUGH] I can see 

29
00:02:16,346 --> 00:02:21,229
[UNKNOWN] he's fighting these little 
boxes, he's trying to hit the boxes 

30
00:02:21,229 --> 00:02:26,022
inside the crate with a bunch of apples, 
you can't see those that's more of a 

31
00:02:26,022 --> 00:02:33,037
[UNKNOWN] thing. 
so it runs fine on the ipad device and it 

32
00:02:33,037 --> 00:02:38,077
runs fine on your iphone. 
So Let's have a look at this desktop 

33
00:02:38,077 --> 00:02:42,950
version, this is it running on the 
desktop, it's basically the same. 

34
00:02:44,580 --> 00:02:51,086
we hit the boxes, and we're off. 
So, we've got some artwork assets here, 

35
00:02:51,086 --> 00:02:55,178
and then we've got a physics engine 
that's implemented that has a lot of 

36
00:02:55,178 --> 00:02:59,402
complicated stuff that I'm going to talk 
about and also were going to talk about 

37
00:02:59,402 --> 00:03:03,626
you know how the whole thing's put 
together so lets start with the art work 

38
00:03:03,626 --> 00:03:11,070
assets. 
That will just take a small amount of 

39
00:03:11,070 --> 00:03:14,552
time. 
You'll find in your coursera folder in 

40
00:03:14,552 --> 00:03:18,187
week 4. 
 >> The basis of our game it's called 

41
00:03:18,187 --> 00:03:22,570
Angry Drawings which we thought was 
funny. 

42
00:03:22,570 --> 00:03:26,185
 >> [COUGH] At the time. 
 >> At the time. 

43
00:03:26,185 --> 00:03:30,085
So yeah, basically, you can see in the 
data folder there's a bunch of different 

44
00:03:30,085 --> 00:03:33,236
aspects. 
We have a ball which we're not currently 

45
00:03:33,236 --> 00:03:36,662
using, we have a crate which is our 
mythical apple crate. 

46
00:03:36,662 --> 00:03:42,918
and then we have this, these scrapyard 
backgrounds. 

47
00:03:42,918 --> 00:03:47,210
And then we have our tux droid. 
And you'll notice he's a PNG file, so 

48
00:03:47,210 --> 00:03:51,562
he's got transparent background, and that 
means that although he's a rectangle, 

49
00:03:51,562 --> 00:03:55,722
when we draw him on the screen as you can 
see here, he's just the shape of a fluffy 

50
00:03:55,722 --> 00:04:00,890
penguin. 
With an Android [INAUDIBLE]. 

51
00:04:00,890 --> 00:04:04,610
So we don't have any of those nasty 
rectangular issues, that's why he is a 

52
00:04:04,610 --> 00:04:07,800
PNG. 
The background isn't a PNG, the 

53
00:04:07,800 --> 00:04:12,570
background is just a JPEG so it's a 
compressed image. 

54
00:04:12,570 --> 00:04:15,425
We've got two backgrounds, we've got this 
one which is nice and bleak. 

55
00:04:15,425 --> 00:04:19,788
I don't know if you can see that. 
The bleak background, which you might 

56
00:04:19,788 --> 00:04:24,670
want to throw in if you feel depressive. 
And then we've got the scrap yard. 

57
00:04:24,670 --> 00:04:29,785
Now in order to produce the kind of align 
the way you can place all of the objects. 

58
00:04:29,785 --> 00:04:33,872
Part of the scrap yard image has been 
grayed out and has been made a bit more 

59
00:04:33,872 --> 00:04:38,364
muted in color. 
And then we've got a more colorful kind 

60
00:04:38,364 --> 00:04:42,215
of ground area where we would place all 
the objects ideally. 

61
00:04:42,215 --> 00:04:45,490
so we haven't actually got that many 
assets. 

62
00:04:45,490 --> 00:04:49,558
We could easily introduce more assets. 
But that's enough for us to have a basic 

63
00:04:49,558 --> 00:04:52,094
level. 
And you know, the dynamics of the game 

64
00:04:52,094 --> 00:04:55,988
are you spring back, tucked, and you fire 
them at the boxes and then every time it 

65
00:04:55,988 --> 00:05:01,308
hits a box, you score a point. 
[COUGH] That's a long way from a complete 

66
00:05:01,308 --> 00:05:03,710
game. 
It's just to get you started. 

67
00:05:04,990 --> 00:05:09,620
So in order to understand what's going on 
here let me talk you through this code. 

68
00:05:09,620 --> 00:05:11,780
I'm going to ask some questions and 
Marco's going to fill us in and then 

69
00:05:11,780 --> 00:05:14,630
Matt's going to fill us in on some other 
bits, too. 

70
00:05:14,630 --> 00:05:19,598
Fundamentally we've got a a base of code 
which works the same way on Android as it 

71
00:05:19,598 --> 00:05:24,632
does on iOS desktop. 
So, we've got some stuff in here that's 

72
00:05:24,632 --> 00:05:29,655
specific to one or the other platform. 
So here you can see we've got a bunch of 

73
00:05:29,655 --> 00:05:32,535
import statements, and what these are 
doing is importing Box2D, which is the 

74
00:05:32,535 --> 00:05:36,368
library you were talking about before, 
Marco, is that right? 

75
00:05:36,368 --> 00:05:40,592
 >> Yeah, that's right, so we're using 
an external library in order to implement 

76
00:05:40,592 --> 00:05:45,014
physics engine and on Java and Android we 
need to import that live v using that 

77
00:05:45,014 --> 00:05:49,730
code there. 
And with code you're running on 

78
00:05:49,730 --> 00:05:54,163
Javascript, that code just gets ignored. 
Instead what happens is you'll see that 

79
00:05:54,163 --> 00:05:57,220
on the other tabs we have a copy of ox 
td. 

80
00:05:57,220 --> 00:06:01,075
We have a copy pf physics.js, which is my 
little wraparound /q ox td. 

81
00:06:01,075 --> 00:06:05,427
 >> And the collision doctor detected 
objects which handles collisions and 

82
00:06:05,427 --> 00:06:09,915
gives you a nice interface to create just 
a simple collision function that gets 

83
00:06:09,915 --> 00:06:16,467
called whenever something collides. 
 >> So that's entirely running all of 

84
00:06:16,467 --> 00:06:21,320
the physics that we see on the. 
 >> [INAUDIBLE] Yeah, okay. 

85
00:06:21,320 --> 00:06:25,536
All right, so as usual, what we've got 
here is a maxim audio context and then 

86
00:06:25,536 --> 00:06:29,292
some audio players. 
These audio players are for the sound 

87
00:06:29,292 --> 00:06:31,198
effects. 
Right, Matt? 

88
00:06:31,198 --> 00:06:35,810
 >> That's right. 
So, we have one audio player for Tux. 

89
00:06:35,810 --> 00:06:38,010
So if Tux hits anything he has his own 
sound. 

90
00:06:38,010 --> 00:06:41,070
and then we have another sound for the 
wall. 

91
00:06:41,070 --> 00:06:44,370
 >> So, if Anything hits a wall, then we 
trigger a wall. 

92
00:06:44,370 --> 00:06:47,718
It's kind of a metallic sound. 
The Tux sound's a kind of ee sound, so I 

93
00:06:47,718 --> 00:06:50,640
thought that was appropriate. 
 >> So, did you do that yourself? 

94
00:06:50,640 --> 00:06:52,976
 >> I did it myself, and. 
 >> Very good. 

95
00:06:52,976 --> 00:06:55,599
 >> And, finally we've actually got 
something a bit more complicated for the 

96
00:06:55,599 --> 00:06:58,358
crates. 
Now when we're, we're playing around 

97
00:06:58,358 --> 00:07:02,040
with, with one audio player just for, for 
all the crates. 

98
00:07:02,040 --> 00:07:05,290
So we never have Crate collided with 
something. 

99
00:07:05,290 --> 00:07:08,490
We triggered the audio file but we found 
it was a problem because if there were 

100
00:07:08,490 --> 00:07:11,740
several crates colliding at the same 
time, then they would keep retriggering 

101
00:07:11,740 --> 00:07:15,660
the sound so you would only ever hear one 
sound. 

102
00:07:15,660 --> 00:07:19,110
So I decided to create an array of 
players. 

103
00:07:19,110 --> 00:07:22,220
One for each crate instead. 
 >> So what happens now is depending 

104
00:07:22,220 --> 00:07:25,530
which crates collide though. 
They have their own sound player per 

105
00:07:25,530 --> 00:07:27,782
crate. 
And I'll trigger it individually. 

106
00:07:27,782 --> 00:07:32,359
 >> Cool. 
And then, we also have a new object, 

107
00:07:32,359 --> 00:07:35,480
which is called physics. 
And it's of type physics. 

108
00:07:35,480 --> 00:07:38,932
So this is the main physics handler. 
 >> and this is basically what we're 

109
00:07:38,932 --> 00:07:42,767
using to control well, what's making all 
of the physics This controls work, is 

110
00:07:42,767 --> 00:07:45,680
that right? 
This is doing all the work. 

111
00:07:45,680 --> 00:07:48,432
 >> Yeah, that's right as I explained in 
my lecture the physics object is 

112
00:07:48,432 --> 00:07:51,632
[INAUDIBLE] the whole physics world and 
it contains things like gravity and all 

113
00:07:51,632 --> 00:07:53,880
that. 
You need to create it. 

114
00:07:53,880 --> 00:07:56,310
You're going to need to create one 
physics world. 

115
00:07:56,310 --> 00:07:58,770
A bit like you only need to create one 
maxim. 

116
00:07:58,770 --> 00:08:01,496
 >> But you can create several bodies 
[CROSSTALK] So we call a body called 

117
00:08:01,496 --> 00:08:05,035
boid, who's our droid. 
Our angry droid, in fact. 

118
00:08:05,035 --> 00:08:08,547
 >> Yes, our [CROSSTALK] droid Yep. 
 >> And, it's the [INAUDIBLE] and then 

119
00:08:08,547 --> 00:08:14,655
we got a whole, array of other bodies 
which crates will [UNKNOWN] interacts. 

120
00:08:14,655 --> 00:08:18,785
 >> So having an array you could just 
have lights with crates and crate hole. 

121
00:08:18,785 --> 00:08:25,847
 >> And then we have a vector which is 
the start point, which we use to, set 

122
00:08:25,847 --> 00:08:32,135
with a catapult is. 
 >> so that's the start point for when 

123
00:08:32,135 --> 00:08:36,640
s, bring back, talks in the guy room, is 
that right. 

124
00:08:36,640 --> 00:08:38,220
 >> Yeah, that's right, that's where the 
catapult is. 

125
00:08:38,220 --> 00:08:40,929
 >> Okay, and then we have a collision 
detector, called detector, in which the, 

126
00:08:40,929 --> 00:08:44,879
a, detection responds to collisions. 
 >> So that's basically what, a, detects 

127
00:08:44,879 --> 00:08:48,104
the collisions and then calls the 
collision method. 

128
00:08:48,104 --> 00:08:51,320
 >> that we'll see later. 
 >> Right, then we have some 

129
00:08:51,320 --> 00:08:55,106
initializers for these variables. 
Crate size, which you can change if you 

130
00:08:55,106 --> 00:08:59,510
want a massive crate bolt size. 
and then we have a bunch of images which 

131
00:08:59,510 --> 00:09:03,746
we then pass into the physics engine and 
it then draws. 

132
00:09:03,746 --> 00:09:05,692
we'll explain about how that works in a 
second. 

133
00:09:05,692 --> 00:09:09,970
 >> Score is initialized to zero and 
then we're currently not dragging What is 

134
00:09:09,970 --> 00:09:13,058
that marker? 
 >> Can you [CROSSTALK] That's just I 

135
00:09:13,058 --> 00:09:15,414
need to keep track of when you're 
dragging the mouse because it's drawing a 

136
00:09:15,414 --> 00:09:19,858
line that's sent to the catapult elastic. 
So whenever you're actually dragging with 

137
00:09:19,858 --> 00:09:22,395
the mouse, you're dragging the 
[INAUDIBLE] will follow you around and 

138
00:09:22,395 --> 00:09:25,862
you're pulling on the elastic and you 
need to see that elastic. 

139
00:09:25,862 --> 00:09:28,575
That's all that's doing. 
 >> There are some really terrible jokes 

140
00:09:28,575 --> 00:09:30,950
in this. 
I think, yeah, we'll just have to 

141
00:09:30,950 --> 00:09:33,370
pretend. 
That they're funny. 

142
00:09:33,370 --> 00:09:36,340
So you can see here that we have a size 
command. 

143
00:09:36,340 --> 00:09:40,050
Because this is the one that we're using 
for the iPad predominantly at the moment. 

144
00:09:40,050 --> 00:09:43,046
This is 1024 by 768. 
But what we can do is set this to the 

145
00:09:43,046 --> 00:09:48,320
size of an iPhone screen. 
Which would be 480 by 320. 

146
00:09:48,320 --> 00:09:50,040
Or if it's on Android it we just comment 
it out. 

147
00:09:50,040 --> 00:09:52,800
We're at 60 frames a second. 
And we load our images. 

148
00:09:52,800 --> 00:09:56,150
The scrap yard is the background. 
The crate is the grate. 

149
00:09:56,150 --> 00:09:59,314
The tux droid is our hero. 
Image mode center, you know what that 

150
00:09:59,314 --> 00:10:02,159
means. 
Now, we get our physics objects and we 

151
00:10:02,159 --> 00:10:06,920
initialize it with a width and a height, 
which basically says what the bounds of 

152
00:10:06,920 --> 00:10:11,149
the world are. 
 >> So in this case, it's the same as 

153
00:10:11,149 --> 00:10:15,680
the bounds of the actual screen. 
 >> I'd like to just say that I've put 

154
00:10:15,680 --> 00:10:19,964
some comments after it, which gives 
another example of how you might want to 

155
00:10:19,964 --> 00:10:24,520
do a more complex initialization where 
you can pass in values for gravity and 

156
00:10:24,520 --> 00:10:30,770
here width over width times 2 height 
times 2. 

157
00:10:30,770 --> 00:10:34,078
That's the overall world size. 
It's going to be bigger than the size of 

158
00:10:34,078 --> 00:10:38,620
the, of the screen. 
and so you could have this more complex 

159
00:10:38,620 --> 00:10:43,730
initialization which sets more values. 
Most of the time you're not going to need 

160
00:10:43,730 --> 00:10:45,896
that. 
 >> Most of the time you should do This 

161
00:10:45,896 --> 00:10:48,396
version. 
 >> So if you have a world size which is 

162
00:10:48,396 --> 00:10:51,798
greater than the size of the screen you 
can have off screen objects which can 

163
00:10:51,798 --> 00:10:54,950
float into the screen? 
 >> Exactly. 

164
00:10:54,950 --> 00:10:58,730
So objects can go off screen and not 
instantly sort of stop being stimulated. 

165
00:10:58,730 --> 00:11:02,147
The world size, if something goes outside 
of the world size it stops being part of 

166
00:11:02,147 --> 00:11:05,406
the physics simulation. 
 >> And then also you can have custom 

167
00:11:05,406 --> 00:11:07,258
gravitiy so that you can. 
 >> Yeah. 

168
00:11:07,258 --> 00:11:09,398
 >> 
 >> Have high gravity or have gravity 

169
00:11:09,398 --> 00:11:12,086
that goes upwards [CROSSTALK] So the 
things can suddenly go up or suddenly go 

170
00:11:12,086 --> 00:11:13,604
down. 
 >> Yeah. 

171
00:11:13,604 --> 00:11:17,378
 >> I always love it when that happens. 
Well that's actually what happens in that 

172
00:11:17,378 --> 00:11:21,800
kind of space version of that very famous 
physics game that we already mentioned 

173
00:11:21,800 --> 00:11:24,496
far too much. 
Okay. 

174
00:11:24,496 --> 00:11:28,843
 >> So we've got a custom rendering 
method which I'll talk a little bit about 

175
00:11:28,843 --> 00:11:31,525
this. 
This is something special about this sort 

176
00:11:31,525 --> 00:11:35,360
of the way the physics engine works. 
Now you can actually, if you don't do 

177
00:11:35,360 --> 00:11:40,710
that, if you comment that line out, it 
will draw itself. 

178
00:11:40,710 --> 00:11:43,590
It had it's own sort of renderer which 
will draw boxes for all the boxes and all 

179
00:11:43,590 --> 00:11:46,342
that. 
Which is quite useful when you’re 

180
00:11:46,342 --> 00:11:50,100
debugging or if you don’t, haven’t got 
your graphics in yet. 

181
00:11:50,100 --> 00:11:52,713
But once you’ve got your graphics in, you 
want to be able to control the rendering 

182
00:11:52,713 --> 00:11:57,777
of all the physics objects. 
And rather than calling that in the draw 

183
00:11:57,777 --> 00:12:01,612
method, the physics engine sets up a 
custom rendering method, which is the 

184
00:12:01,612 --> 00:12:06,274
function myCustomRenderer. 
which we'll see later on, [UNKNOWN] does 

185
00:12:06,274 --> 00:12:09,397
all the drawing of the [UNKNOWN]. 
 >> And that basically draws tucks, and 

186
00:12:09,397 --> 00:12:11,902
it draws all the cranes. 
 >> Yeah, that's right. 

187
00:12:11,902 --> 00:12:13,964
 >> Right, okay. 
So instead of having to draw methods, 

188
00:12:13,964 --> 00:12:18,300
we've just got our own method, which is a 
wearable and a physical object. 

189
00:12:18,300 --> 00:12:20,904
Okay, great. 
And then we've got set density, which is 

190
00:12:20,904 --> 00:12:23,378
how stupid I've. 
 >> [INAUDIBLE] No. 

191
00:12:23,378 --> 00:12:25,275
 >> Okay. 
How, what is that [INAUDIBLE]? 

192
00:12:25,275 --> 00:12:29,739
 >> [LAUGH] It's it's basically, ti 
controls the mass of the object, so the 

193
00:12:29,739 --> 00:12:35,395
density is mass divided by area, and that 
will, so the, the mass of an object, 

194
00:12:35,395 --> 00:12:39,250
[INAUDIBLE]. 
how much it resists forces, how much 

195
00:12:39,250 --> 00:12:42,460
force you need to actually push an 
object. 

196
00:12:42,460 --> 00:12:45,300
Is determined by how big it is but also 
the density. 

197
00:12:45,300 --> 00:12:48,225
So if you set really high density, with 
quite a high density then the objects on 

198
00:12:48,225 --> 00:12:50,950
is going to, are going to be quite 
massive. 

199
00:12:50,950 --> 00:12:53,670
It's going to be a bit hard for me to 
move them around. 

200
00:12:53,670 --> 00:12:56,795
If you set a really low density they're 
going to be floating around more. 

201
00:12:56,795 --> 00:13:01,310
If you set the density to zero, can 
create objects that don't move. 

202
00:13:01,310 --> 00:13:03,588
And that's quite useful. 
So if you want objects that don't, that 

203
00:13:03,588 --> 00:13:06,536
don't move, set density equals zero, and 
then after that set density equals one, 

204
00:13:06,536 --> 00:13:10,744
and you can create objects that do move. 
So you can change the density as you go, 

205
00:13:10,744 --> 00:13:14,504
as you create different objects. 
 >> All right, so then we create seven 

206
00:13:14,504 --> 00:13:19,264
new bodies, which are all our crates and 
then these are accessed as arrays, And 

207
00:13:19,264 --> 00:13:24,110
then we create a [COUGH] rectangular 
body. 

208
00:13:24,110 --> 00:13:26,750
and it has a position, which is its start 
position. 

209
00:13:26,750 --> 00:13:30,670
A height a width. 
And what's this last one? 

210
00:13:30,670 --> 00:13:32,903
 >> So that's, that is the, that's the y 
position. 

211
00:13:32,903 --> 00:13:35,381
X position, y position. 
 >> Y position. 

212
00:13:35,381 --> 00:13:37,767
 >> Width and height. 
 >> And I'm just using height Because. 

213
00:13:37,767 --> 00:13:39,489
 >> Oh yeah, x1. 
 >> It's at the bottom of the screen, so 

214
00:13:39,489 --> 00:13:41,577
it's just moving up from the height 
[INAUDIBLE] from the bottom of the 

215
00:13:41,577 --> 00:13:43,692
screen. 
 >> Okay. 

216
00:13:43,692 --> 00:13:46,057
 >> So it's actually x position, y 
poition, the top left, x position, y 

217
00:13:46,057 --> 00:13:50,317
position the bottom right. 
Not width and height like like a 

218
00:13:50,317 --> 00:13:53,417
rectangle. 
 >> Yeah, so fundamentally, it would be 

219
00:13:53,417 --> 00:13:56,143
much better if this was all done 
relatively to the screen width and the 

220
00:13:56,143 --> 00:13:59,377
screen height in as in our week two 
example. 

221
00:13:59,377 --> 00:13:59,925
 >> Yeah. 
Yeah. 

222
00:13:59,925 --> 00:14:04,080
 >> That, we'll leave that up to you. 
so, yeah. 

223
00:14:04,080 --> 00:14:07,920
So this basically sets up where the, all 
the boxes are at the beginning. 

224
00:14:07,920 --> 00:14:12,088
It gives them an initial position. 
And then the start point, which is where, 

225
00:14:12,088 --> 00:14:16,620
that's where The tux is connected to 
[INAUDIBLE] stuff. 

226
00:14:16,620 --> 00:14:19,290
See I [INAUDIBLE] [INAUDIBLE] .And this 
is just where we put it. 

227
00:14:19,290 --> 00:14:21,274
And then we just put that in a physics 
word. 

228
00:14:21,274 --> 00:14:32,100
Yeah so I'm converting to a physics 
coordinates. 

229
00:14:32,100 --> 00:14:35,227
As I said in my lecture, we've got a 
different set of coordinates for the 

230
00:14:35,227 --> 00:14:38,778
world, the simulation than you would for 
the screen and we want the start point in 

231
00:14:38,778 --> 00:14:43,315
physics coordinates. 
So, the boid is circle rather than a 

232
00:14:43,315 --> 00:14:46,725
rectangle. 
When we created the [UNKNOWN], those 

233
00:14:46,725 --> 00:14:51,825
bodies, we used this rect, but for the 
Android for the kind of angry droid we're 

234
00:14:51,825 --> 00:14:55,488
using a circle. 
Why's that? 

235
00:14:55,488 --> 00:14:58,968
 >> Well, because, well, first to say 
this is the example of the fact that you 

236
00:14:58,968 --> 00:15:03,800
use simpler shapes for your physics than 
you would for drawings. 

237
00:15:03,800 --> 00:15:07,396
So [INAUDIBLE] is quite a complex object. 
For the crates, the crated boxes, it's 

238
00:15:07,396 --> 00:15:10,760
fine to use a box for the physics and for 
the graphics. 

239
00:15:10,760 --> 00:15:13,055
But for [INAUDIBLE] it's a fairly complex 
object. 

240
00:15:13,055 --> 00:15:16,589
 >> But you wouldn't want to simulate 
all the physics of his exact shape, 

241
00:15:16,589 --> 00:15:19,408
because that would be. 
 >> Yeah. 

242
00:15:19,408 --> 00:15:21,470
 >> Very [UNKNOWN] expensive. 
It would take a lot of time. 

243
00:15:21,470 --> 00:15:24,250
So you have a simplified object, and you 
take the physics in that. 

244
00:15:24,250 --> 00:15:27,242
So we're simplifying him down, he's quite 
rounds, we're simplifying him down to a 

245
00:15:27,242 --> 00:15:29,838
circle from the point of view physics, 
and you see him as something a bit 

246
00:15:29,838 --> 00:15:36,330
different from, in the actual graphics. 
So then we set up our collision detector. 

247
00:15:36,330 --> 00:15:39,661
Which is standard. 
We pass it to the phy, the physics word 

248
00:15:39,661 --> 00:15:44,549
basically gets the collision detector. 
Then we have our maxim context, which 

249
00:15:44,549 --> 00:15:47,636
we've seen before. 
We load in our boid sounds, which is the 

250
00:15:47,636 --> 00:15:51,510
sounds of Tux hitting something. 
The wall sound. 

251
00:15:51,510 --> 00:15:54,490
then we set them looping, all the stuff 
you've seen before. 

252
00:15:54,490 --> 00:15:58,180
And then we have this for loop which 
loads over create sounds in. 

253
00:15:58,180 --> 00:16:00,160
And that's the big array full of sounds, 
right? 

254
00:16:00,160 --> 00:16:01,650
Let you describe the array now. 
 >> That's correct. 

255
00:16:01,650 --> 00:16:02,870
Yes. 
 >> Okay. 

256
00:16:02,870 --> 00:16:05,770
And then we're moving to the draw method. 
 >> So whoo, we start our game, our 

257
00:16:05,770 --> 00:16:10,320
first level of our game, That was quite 
intense, now. 

258
00:16:10,320 --> 00:16:13,200
 >> Just a second, great thing about 
using a physics engine is once you set it 

259
00:16:13,200 --> 00:16:15,890
up, it will just run. 
 >> Yeah, that is true. 

260
00:16:15,890 --> 00:16:18,152
 >> And actually the biggest thing is 
you just set up the world, and it just 

261
00:16:18,152 --> 00:16:21,060
does everything for you. 
 >> Yep, that is good. 

262
00:16:21,060 --> 00:16:23,920
And so you don't actually have to process 
any of your own collisions, you don't 

263
00:16:23,920 --> 00:16:26,692
actually have to know what the velocity 
of any of your objects are or compute 

264
00:16:26,692 --> 00:16:29,820
them. 
The physics engine does it all for you. 

265
00:16:29,820 --> 00:16:31,911
This is what most people who are 
developing games do. 

266
00:16:31,911 --> 00:16:34,970
Then we learn from search engine in order 
to do those those calculations. 

267
00:16:34,970 --> 00:16:37,430
Some people insist on watching learn from 
search engines from scratch. 

268
00:16:37,430 --> 00:16:40,370
[COUGH] I think that's actually a good 
idea if you like doing that sort of 

269
00:16:40,370 --> 00:16:43,855
thing, but if you don't you should 
probably [INAUDIBLE]. 

270
00:16:43,855 --> 00:16:48,277
so, the draw method is surprisingly 
small, in this case, because as Mark has 

271
00:16:48,277 --> 00:16:52,823
already mentioned. 
The physics engine is doing the drawing 

272
00:16:52,823 --> 00:16:55,790
for the foreground objects that are 
moving around. 

273
00:16:55,790 --> 00:16:59,130
This is because it knows where everything 
is because it's calculating the velocity. 

274
00:16:59,130 --> 00:17:01,790
In other words it's calculating all the x 
and y positions. 

275
00:17:01,790 --> 00:17:04,456
but we still need to have the image of 
the tip, which is the backdrop, which I 

276
00:17:04,456 --> 00:17:08,930
already explained. 
And we also have to have the score. 

277
00:17:08,930 --> 00:17:12,030
Which, at the moment, There's no 
objective. 

278
00:17:13,490 --> 00:17:16,325
One thing you might do for an objective 
is say, you know what, let's have each 

279
00:17:16,325 --> 00:17:19,543
session last 20 seconds. 
And get the highest score you can in 20 

280
00:17:19,543 --> 00:17:22,144
seconds. 
And then have a second, in other words, 

281
00:17:22,144 --> 00:17:25,640
each session lasts, each game level lasts 
15 seconds. 

282
00:17:25,640 --> 00:17:28,174
And then the next level lasts 10 seconds. 
And you just have to get the highest 

283
00:17:28,174 --> 00:17:30,590
score that you can. 
This provides an objective. 

284
00:17:30,590 --> 00:17:32,190
It's up to you to kind of think of an 
objective. 

285
00:17:32,190 --> 00:17:34,765
The whole point of designing a game is to 
have something people want to do. 

286
00:17:34,765 --> 00:17:39,062
we're just giving you a framework. 
So it'll be great to see what you come up 

287
00:17:39,062 --> 00:17:40,460
with. 
All right. 

288
00:17:40,460 --> 00:17:44,486
Now, [COUGH], as a few of the standard 
methods mouse-dragged, which basically 

289
00:17:44,486 --> 00:17:49,230
sets the position of tucks. 
Who is basically the boid object. 

290
00:17:49,230 --> 00:17:51,760
And we've got these 'screenToWorld' 
coordinates. 

291
00:17:51,760 --> 00:17:55,472
We parse in the Mousex and the Mousey 
values, add a two-dimensional vector to 

292
00:17:55,472 --> 00:17:58,952
our physics world, and that sets the 
position so that when we click on the 

293
00:17:58,952 --> 00:18:04,700
screen we can make sure that that's where 
our [UNKNOWN] is going to be. 

294
00:18:04,700 --> 00:18:07,472
And then we just demo that. 
 >> That's why when I click on the 

295
00:18:07,472 --> 00:18:13,786
screen Turks appears more or less where I 
leave him, and I can just fly him around. 

296
00:18:13,786 --> 00:18:16,529
Okay. 
mouse release there's a bit more stuff 

297
00:18:16,529 --> 00:18:18,770
going on. 
Dragging is set to false. 

298
00:18:18,770 --> 00:18:22,995
So this means that we're no longer fixing 
the position of Turks and we have this 

299
00:18:22,995 --> 00:18:29,098
thing called an impulse and now that's 
probably best if Marco explains this. 

300
00:18:29,098 --> 00:18:33,252
 >> So basically, when you release the 
catapults touch will start flying off, 

301
00:18:33,252 --> 00:18:37,978
the reason is that force is instantly 
applied to touch. 

302
00:18:37,978 --> 00:18:41,300
It's an impulse; I talked about this in 
my lecture. 

303
00:18:41,300 --> 00:18:44,851
So what we're doing is we're calculating 
the appropriate impulse direction and 

304
00:18:44,851 --> 00:18:48,678
magnitude of the impulse based on where 
you're pulling back. 

305
00:18:48,678 --> 00:18:54,141
The elastic catapult. 
I've gone through the details of this 

306
00:18:54,141 --> 00:18:59,040
calculation in my lecture, but it's using 
vector subtraction and multiplying the 

307
00:18:59,040 --> 00:19:03,726
impulse by a certain constant to get it 
at about the right value, just as Matthew 

308
00:19:03,726 --> 00:19:07,986
was saying a bit about the audio 
sometimes you just need to play around to 

309
00:19:07,986 --> 00:19:12,530
get the right number, to get the right 
feel for it and then we apply the impulse 

310
00:19:12,530 --> 00:19:21,634
to tux and from then on the physics just 
handle how it moves. 

311
00:19:21,634 --> 00:19:24,395
 >> So that constant in this case is 
5000. 

312
00:19:24,395 --> 00:19:27,359
 >> And then, yeah, we apply the impulse 
to, to him and then he's given the 

313
00:19:27,359 --> 00:19:31,785
impulse just as if you've smacked him in 
the face with a big stick. 

314
00:19:31,785 --> 00:19:37,960
which yeah, I think penguins, you know, 
they're probably used to that. 

315
00:19:37,960 --> 00:19:41,200
Okay, so the last thing we want to talk 
about in the terms of this demo app is 

316
00:19:41,200 --> 00:19:45,672
the my custom rendered. 
Which is I'll substitute for the draw 

317
00:19:45,672 --> 00:19:50,280
function where all the drawing and the 
physics end and so the first thing to 

318
00:19:50,280 --> 00:19:54,528
note here is that we set the stoke to 0 
and we get the start point and use it 

319
00:19:54,528 --> 00:20:02,885
draw to a line and that's as you can see 
in the example this line is. 

320
00:20:02,885 --> 00:20:08,960
 >> The pole that Tux is suspended from 
and that we use to fire him off. 

321
00:20:08,960 --> 00:20:12,386
That's his kind of starting point in the 
world. 

322
00:20:12,386 --> 00:20:14,856
Boing. 
Okay, and then following that we have to 

323
00:20:14,856 --> 00:20:18,511
draw all the other stuff. 
So Marco, do you just want to talk us 

324
00:20:18,511 --> 00:20:20,250
through that? 
 >> Yeah, sure. 

325
00:20:20,250 --> 00:20:23,830
Just to make a note this is, this is what 
I described in my lecture. 

326
00:20:23,830 --> 00:20:28,445
We're getting into position of and the 
angle of the each of our physics objects 

327
00:20:28,445 --> 00:20:35,426
in this case void we have to convert from 
world coordinates to screen coordinates. 

328
00:20:35,426 --> 00:20:40,290
Just as we did we have to do up here. 
And then we can use whatever processing 

329
00:20:40,290 --> 00:20:44,470
drawing code we like using those 
coordinates. 

330
00:20:44,470 --> 00:20:47,710
They're just values they're just numbers 
we can do whatever we like with them. 

331
00:20:47,710 --> 00:20:51,182
I'm doing a fairly obvious thing, I'm 
translating, imitating by those two 

332
00:20:51,182 --> 00:20:55,356
values and then drawing an image. 
 >> So most of the time you are going to 

333
00:20:55,356 --> 00:20:59,061
want to get the positions and the angle 
translate by position take by the angle 

334
00:20:59,061 --> 00:21:02,709
and then draw whatever you want, in this 
case we're going to draw the images we 

335
00:21:02,709 --> 00:21:06,642
got and the code for crate is exactly the 
same where we've got a four loop over all 

336
00:21:06,642 --> 00:21:10,062
the crates but we're just doing pretty 
much the same thing just drawing a 

337
00:21:10,062 --> 00:21:17,234
different image. 
 >> And it's just because it's an array 

338
00:21:17,234 --> 00:21:18,570
of crates. 
 >> Yeah. 

339
00:21:18,570 --> 00:21:21,126
 >> So doing each one at a time. 
Okay so the final, final thing in 

340
00:21:21,126 --> 00:21:24,094
addition to the other final thing we 
going to talk about is just how the 

341
00:21:24,094 --> 00:21:28,604
collisions work. 
 >> Now, the main the method for doing 

342
00:21:28,604 --> 00:21:33,660
collisions is, it's all in collision 
detector dot JS. 

343
00:21:33,660 --> 00:21:36,585
So we just have to use that collision 
detector, pass in the positions and it 

344
00:21:36,585 --> 00:21:40,290
will work out where a collision has 
happened and will let us know. 

345
00:21:40,290 --> 00:21:47,160
so the main method for that, well this is 
basically here boid collision. 

346
00:21:47,160 --> 00:21:50,541
So the collision dysfunction is caused by 
the collision detector, and you've got, 

347
00:21:50,541 --> 00:21:55,440
as I said in my lecture, two bodies that 
are colliding in the impulse. 

348
00:21:55,440 --> 00:21:59,600
So you can use that, for example, I'm 
checking here if the impulse is more than 

349
00:21:59,600 --> 00:22:04,258
one, so it's a proper impulse. 
I'm increasing the score, so the score's 

350
00:22:04,258 --> 00:22:06,980
going up. 
That's how we did in scoring. 

351
00:22:06,980 --> 00:22:09,880
But we're going to do a few things so we 
can, we can, because we got the bodies we 

352
00:22:09,880 --> 00:22:15,056
can check which particular body it is. 
And we need to make sure that there's two 

353
00:22:15,056 --> 00:22:17,951
things. 
There's, we need ju-, the, it's the 

354
00:22:17,951 --> 00:22:21,668
actual tux that's colliding so we're 
checking if one of the bodies, b1 or b2, 

355
00:22:21,668 --> 00:22:25,728
is, is void. 
And the other thing we're doing here is 

356
00:22:25,728 --> 00:22:27,580
we're checking the mass of the other 
objects. 

357
00:22:27,580 --> 00:22:31,042
Why are we doing that? 
Because you might notice that cut 

358
00:22:31,042 --> 00:22:36,256
bouncing off the screen that's because 
they're physics objects at the edges of 

359
00:22:36,256 --> 00:22:42,828
the screen that automically created. 
Those have 0 mass which means they don't 

360
00:22:42,828 --> 00:22:47,665
move they're static objects. 
but we don't want to get [UNKNOWN] when 

361
00:22:47,665 --> 00:22:50,673
we bounce off the walls so we'er just 
checking that the objects have more than 

362
00:22:50,673 --> 00:22:53,587
0 mass which means they're not one of the 
static objects, they're one of the 

363
00:22:53,587 --> 00:22:58,155
crates. 
so we can do that test similarly 

364
00:22:58,155 --> 00:23:03,185
[UNKNOWN] whether you talk through a 
bunch of code is easiest to crate the 

365
00:23:03,185 --> 00:23:07,162
audio. 
 >> And to create audio to respond to 

366
00:23:07,162 --> 00:23:09,492
collisions. 
And that stuff's just here, and it's the 

367
00:23:09,492 --> 00:23:11,328
same. 
 >> That's right. 

368
00:23:11,328 --> 00:23:14,272
 >> Okay, great. 
So fundamentally that's the basic set 

369
00:23:14,272 --> 00:23:16,458
example. 
 >> It shows you how to create a 

370
00:23:16,458 --> 00:23:20,130
physical world, how to put objects in 
that world, and then how to Interact with 

371
00:23:20,130 --> 00:23:23,586
them, and have them interact with each 
other, it also shows you how to draw the 

372
00:23:23,586 --> 00:23:27,312
different artwork that you need, the best 
way of preparing the artwork, and it's up 

373
00:23:27,312 --> 00:23:30,822
to you to put in for example decent 
artwork, game play, mechanics that sort 

374
00:23:30,822 --> 00:23:38,910
of thing, or the kinds of scoring 
mechanisms and different kind of ideas. 

375
00:23:38,910 --> 00:23:41,838
So you can use it as a starting point, 
and you can develop it and try to build 

376
00:23:41,838 --> 00:23:45,205
on something that's a much more developed 
project. 

377
00:23:45,205 --> 00:23:58,699
 >> And, and that's it. 
 >> Have fun. 

378
00:23:58,699 --> 00:23:58,699
[MUSIC]. 