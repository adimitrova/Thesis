1
00:00:00,005 --> 00:00:03,484
[NOISE] 

2
00:00:03,484 --> 00:00:21,004
So, we've talked about objects. 
The, the things that affect objects may 

3
00:00:21,004 --> 00:00:23,575
move other forces. 
I'm going to talk about a couple forces 

4
00:00:23,575 --> 00:00:28,945
that we'll work with. 
The first force is the pervasive gravity. 

5
00:00:28,945 --> 00:00:32,740
Basically we're always going to have 
force downwards that pulls objects down. 

6
00:00:32,740 --> 00:00:36,205
Doesn't have to be downwards you can 
actually set gravity to move to the left 

7
00:00:36,205 --> 00:00:40,260
or even 0 if you want a space world. 
But most of the time you're going to have 

8
00:00:40,260 --> 00:00:44,878
a force pulling things downwards. 
And that's automatically built into the 

9
00:00:44,878 --> 00:00:46,944
worlds. 
So, you don't have to do anything to get 

10
00:00:46,944 --> 00:00:50,090
gravity. 
You can use the Set Gravity commands to 

11
00:00:50,090 --> 00:00:53,880
change the gravity force. 
It's a vector. 

12
00:00:53,880 --> 00:00:59,078
So you can have, at the moment, gravity 
is something like 0, minus 10. 

13
00:00:59,078 --> 00:01:04,858
0x minus 10y so it's, vertical, but you 
can have horizontal gravity if you give 

14
00:01:04,858 --> 00:01:13,630
it a, an x value. 
Another kind of force is an impulse. 

15
00:01:13,630 --> 00:01:17,605
That's basically a force that's applied 
at a particular moment in time. 

16
00:01:17,605 --> 00:01:21,387
So, sometimes you just want to push an 
object in a certain direction to get it 

17
00:01:21,387 --> 00:01:26,630
moving and applying impulses is a good 
way of doing it. 

18
00:01:26,630 --> 00:01:30,550
It's just applied for one moment, just 
like kicking an object. 

19
00:01:30,550 --> 00:01:32,650
This is how you do it. 
An impulse is a vector. 

20
00:01:33,790 --> 00:01:38,440
You create a new vector with whatever 
values you want so that you'd call new 

21
00:01:38,440 --> 00:01:42,140
Vec2. 
That's a vector type. 

22
00:01:42,140 --> 00:01:46,470
And you pass in the x and y coordinates 
of that vector. 

23
00:01:46,470 --> 00:01:50,179
It's actually a direction. 
Say 2, 4 where we mostly vertical, we 

24
00:01:50,179 --> 00:01:57,796
mostly downwards with a bit across. 
And then you call the Apply impulse 

25
00:01:57,796 --> 00:02:01,360
command on the box. 
So you do box.applyimpluse and that 

26
00:02:01,360 --> 00:02:04,616
applies impluse to that box. 
You pass in you have to say where the 

27
00:02:04,616 --> 00:02:08,680
impulse is acting on. 
So you can apply an impulse to different 

28
00:02:08,680 --> 00:02:12,385
bits of the box. 
Often you just want to apply to the 

29
00:02:12,385 --> 00:02:16,840
center of the box so it's not going to 
spin around. 

30
00:02:16,840 --> 00:02:19,900
But if you apply it to the edge of the 
box, you, bo-, box won't just move, it 

31
00:02:19,900 --> 00:02:25,526
will also spin around. 
And then you obviously have to apply past 

32
00:02:25,526 --> 00:02:29,882
the impulse into that function. 
I'm going to show a bit more of a complex 

33
00:02:29,882 --> 00:02:33,466
example that Mick will be following up 
later and in, in, in the code he's going 

34
00:02:33,466 --> 00:02:39,590
to show you. 
[COUGH] Of how to implement a catapult. 

35
00:02:39,590 --> 00:02:43,622
So we've got a ball that's on a piece of 
elastic and when we pull that ball, the 

36
00:02:43,622 --> 00:02:47,654
further back we pull it, when we release 
it, it will fly in the direction that 

37
00:02:47,654 --> 00:02:53,090
we've been pulling back. 
So the two things we need to know will 

38
00:02:53,090 --> 00:02:57,554
fly in the direction of the elastic. 
But, the more we pull the elastic back 

39
00:02:57,554 --> 00:03:02,982
the further it will fly. 
So, it depends on both the distance and 

40
00:03:02,982 --> 00:03:07,206
the direction from the catapult to the 
ball and what it produces is an impulse 

41
00:03:07,206 --> 00:03:14,242
that's applied to the ball. 
So that impulse, if you remember what I 

42
00:03:14,242 --> 00:03:19,041
was saying about vectors earlier. 
Is based on the vector that goes from the 

43
00:03:19,041 --> 00:03:23,191
ball to the catapult. 
It's in that direction, then the more 

44
00:03:23,191 --> 00:03:27,770
that the growth of distance is, the 
bigger the force is going to be. 

45
00:03:27,770 --> 00:03:30,090
That's fine, because that vector includes 
that. 

46
00:03:30,090 --> 00:03:36,510
So the vector from the ball to the 
catapult is simply catapult minus ball. 

47
00:03:36,510 --> 00:03:38,523
The catapult is the vector position of 
the catapult. 

48
00:03:38,523 --> 00:03:44,284
Ball is the vector position of the ball 
and we multiply that by constant c. 

49
00:03:44,284 --> 00:03:48,500
just so, you know, just so we've got a 
bit more control about how big that 

50
00:03:48,500 --> 00:03:52,050
impulse is. 
So we can vary that to make it a bigger 

51
00:03:52,050 --> 00:03:55,450
force or, or a lesser force and just 
tweak it again. 

52
00:03:55,450 --> 00:03:58,984
When you, when you're working with 
physics again there's a lot of tweaking 

53
00:03:58,984 --> 00:04:04,540
to do to make sure that all the densities 
and the, the, these constants are right. 

54
00:04:04,540 --> 00:04:07,756
Just get the right feel that it's moving 
at the right dynamically enough without 

55
00:04:07,756 --> 00:04:13,810
things going all over the place. 
So, if we look here how we do the 

56
00:04:13,810 --> 00:04:18,370
calculation we create first an impulse 
vector. 

57
00:04:18,370 --> 00:04:21,139
That's a vector. 
We set its value to be equal to the 

58
00:04:21,139 --> 00:04:27,002
position of the catapult. 
Then we subtract off the position of the 

59
00:04:27,002 --> 00:04:32,650
ball. 
And finally, we multiply by a constant, 

60
00:04:32,650 --> 00:04:37,190
in this case, 200, quite a big number to 
get a quite a dynamic move. 

61
00:04:37,190 --> 00:04:43,710
And we'll see that later in the example 
that Mick's going to show you. 

62
00:04:43,710 --> 00:04:47,090
The final kind of force, and maybe the 
most important one for physics engine is 

63
00:04:47,090 --> 00:04:49,990
collisions. 
A lot of what a physics engine does is 

64
00:04:49,990 --> 00:04:53,195
handle when objects collide at each other 
and bounce off. 

65
00:04:53,195 --> 00:04:56,455
And gets that, those collisions 
absolutely physically correct. 

66
00:04:56,455 --> 00:05:01,180
And, you see in example, we've got 
objects bouncing off crates, and then 

67
00:05:01,180 --> 00:05:05,980
objects bouncing off the sides of the 
screen, stuff bouncing everywhere and 

68
00:05:05,980 --> 00:05:12,989
that's all handled by the physics engine. 
Um, [COUGH] in a, in a sense, you don't 

69
00:05:12,989 --> 00:05:17,773
really need to do anything. 
to handle collisions the physics engine 

70
00:05:17,773 --> 00:05:20,710
will do everything for you. 
But sometimes you want to know when a 

71
00:05:20,710 --> 00:05:26,005
collision's happening. 
so, for example, you might want to, 

72
00:05:26,005 --> 00:05:30,322
increase your score whenever a collision 
happens. 

73
00:05:30,322 --> 00:05:35,977
And as, as Matthew would show you, you 
may want to you may want to play a sound 

74
00:05:35,977 --> 00:05:43,256
whenever you have a collision. 
So you need to know when there's a 

75
00:05:43,256 --> 00:05:46,050
collision. 
In the first extension we're using, we do 

76
00:05:46,050 --> 00:05:49,486
this in a very simple way. 
You just create a function in your 

77
00:05:49,486 --> 00:05:54,770
program called collision. 
That has to look exactly like this. 

78
00:05:54,770 --> 00:05:57,985
It has to have collision. 
Takes three parameters. 

79
00:05:57,985 --> 00:06:02,368
body 1 body 2 and the impulse. 
So the body 1 and body 2 are the 2 

80
00:06:02,368 --> 00:06:06,328
objects that are colliding with each 
other. 

81
00:06:06,328 --> 00:06:11,064
And the impulse parameter is how big the 
force or the impulse of the collision 

82
00:06:11,064 --> 00:06:15,500
was. 
So that's really useful. 

83
00:06:15,500 --> 00:06:18,620
You can find out which objects are 
colliding. 

84
00:06:18,620 --> 00:06:22,420
So, depending on which objects there are, 
you can make different sounds. 

85
00:06:24,720 --> 00:06:26,890
And you can make use of how big the 
collision was. 

86
00:06:26,890 --> 00:06:30,540
So maybe if the collision was very small, 
you don't make a sound. 

87
00:06:30,540 --> 00:06:33,332
Maybe with a bigger collision, you make a 
bigger sound. 

88
00:06:33,332 --> 00:06:38,840
So, 
With those three parameters you can 

89
00:06:38,840 --> 00:06:42,860
really control exactly what happens in 
your program when different collisions 

90
00:06:42,860 --> 00:06:46,789
happen. 
And the next, Matthew will talk about how 

91
00:06:46,789 --> 00:06:51,339
to create a sound engine which can 
produce different results, based on 

92
00:06:51,339 --> 00:06:56,379
different objects and with, varying 
parameters of the sound, which is exactly 

93
00:06:56,379 --> 00:07:03,830
what we need to change the sound whenever 
an impulse is played. 

94
00:07:03,830 --> 00:07:09,142
Once he's done that, Mick will show you 
full example that has physics objects 

95
00:07:09,142 --> 00:07:17,000
colliding all over the place and audio 
being triggered by those physics objects. 

96
00:07:17,000 --> 00:07:19,775
[MUSIC] 

97
00:07:19,775 --> 00:07:22,554
[MUSIC] 