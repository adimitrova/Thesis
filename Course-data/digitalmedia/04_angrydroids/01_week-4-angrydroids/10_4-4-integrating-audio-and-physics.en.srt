2
00:00:04,579 --> 00:00:17,656
[SOUND]. 

3
00:00:17,656 --> 00:00:20,056
Hello. 
So you just heard about how you can use a 

4
00:00:20,056 --> 00:00:23,473
physics engine to control the movement 
and collisions of a variety of objects on 

5
00:00:23,473 --> 00:00:27,485
the screen. 
What we're going to do now is, is look 

6
00:00:27,485 --> 00:00:32,668
into a real example where we develop that 
into a game with, with nice graphics and 

7
00:00:32,668 --> 00:00:37,324
sound. 
And I'm going to begin that inspection by 

8
00:00:37,324 --> 00:00:41,484
figuring out how we can connect sound 
events up to this collision events that 

9
00:00:41,484 --> 00:00:48,123
we've seen before. 
Let's look into the code of the, the, the 

10
00:00:48,123 --> 00:00:56,706
example here. 
[BLANK_AUDIO] So we're modeling this as a 

11
00:00:56,706 --> 00:01:00,034
little droid character that can be 
bounced around the screen, and it smashes 

12
00:01:00,034 --> 00:01:05,061
into crates. 
So, we got [SOUND] an array of crate uh, 

13
00:01:05,061 --> 00:01:12,610
[INAUDIBLE] crates, which is an array of 
physics engine body objects. 

14
00:01:12,610 --> 00:01:15,760
So these represent all the crates that 
move around the screen. 

15
00:01:18,210 --> 00:01:21,902
We've also got another entity which is a 
physics engine circle called Droid which 

16
00:01:21,902 --> 00:01:26,285
represents a little character that's 
going to bounce around the screen. 

17
00:01:26,285 --> 00:01:31,712
Finally, we've got these walls which the 
Droid might bounce into and also the 

18
00:01:31,712 --> 00:01:35,756
crates. 
So what we're going to try and do is hook 

19
00:01:35,756 --> 00:01:39,294
up the audio engine so that every time a 
collision happens, it triggers an 

20
00:01:39,294 --> 00:01:46,568
appropriate sounds. 
First of all, in here, you can see we 

21
00:01:46,568 --> 00:01:51,860
create maxim as usual. 
and then, we've got two audio players, so 

22
00:01:51,860 --> 00:01:56,470
let's just look at the variables up at 
the top there. 

23
00:01:56,470 --> 00:01:58,905
So these are all the audio variables. 
It's all we need. 

24
00:01:58,905 --> 00:02:02,985
[SOUND] We've got no maxim, we've got two 
single audio players, and then we have an 

25
00:02:02,985 --> 00:02:07,848
array of audio players. 
As I said earlier, we had this array of 

26
00:02:07,848 --> 00:02:12,351
crate and body objects. 
so for each of those crates, I'm going to 

27
00:02:12,351 --> 00:02:15,796
have an individual audio player, so that 
will allow me to simultaneously play 

28
00:02:15,796 --> 00:02:19,577
sounds for all of the creates. 
So you can hear all of those creates 

29
00:02:19,577 --> 00:02:23,455
hitting each other at the same time. 
then we need a single sound for the, for 

30
00:02:23,455 --> 00:02:26,078
the droid, because there's only one of 
those in the screen, and then a sound for 

31
00:02:26,078 --> 00:02:31,548
the walls. 
Okay. 

32
00:02:31,548 --> 00:02:38,520
[BLANK_AUDIO] Here, we basically load, 
load a file, which I prepared earlier. 

33
00:02:38,520 --> 00:02:44,048
And then, another files. 
I've got droid sound and a wall sound. 

34
00:02:44,048 --> 00:02:49,341
The droid sound is kind of funny vocal 
sound that I made and the, the wall sound 

35
00:02:49,341 --> 00:02:54,808
is a clanging metallic sound. 
You'll hear them shortly. 

36
00:02:54,808 --> 00:02:58,714
And then I tell them both not to loop 
[SOUND] because their one shot sample, 

37
00:02:58,714 --> 00:03:02,809
the [INAUDIBLE], the 20 play all the way 
through once and then stop when, when, 

38
00:03:02,809 --> 00:03:09,770
when a collision happens. 
Next, I create the array of crate sounds. 

39
00:03:09,770 --> 00:03:13,455
So, they're, they're again, they're just 
all audio players, but they're stored 

40
00:03:13,455 --> 00:03:17,335
into an array, so it's more convenient to 
work with them. 

41
00:03:17,335 --> 00:03:21,830
And we use the same method and we load a 
[UNKNOWN] file into each one. 

42
00:03:21,830 --> 00:03:25,535
Now, it's worth noting here that, that 
we're actually going to store that copies 

43
00:03:25,535 --> 00:03:29,012
about [INAUDIBLE] file data but we need 
to do that, so that we can playback 

44
00:03:29,012 --> 00:03:35,209
easily and with several the same time. 
So we load that file up and got all those 

45
00:03:35,209 --> 00:03:37,610
[INAUDIBLE]. 
We tell them up to mute either. 

46
00:03:38,900 --> 00:03:42,186
The next thing is we hook up the 
collision function, which Marco mentioned 

47
00:03:42,186 --> 00:03:45,472
earlier, which cool every time a 
collision happens between two of the, two 

48
00:03:45,472 --> 00:03:50,351
of the objects in the physics world. 
So collision is called. 

49
00:03:50,351 --> 00:03:54,133
It tells us that two objects have 
collided and it tells us how hard they 

50
00:03:54,133 --> 00:03:58,344
hit each other if you like. 
So let's just have a look at that 

51
00:03:58,344 --> 00:04:01,646
function down here. 
So here. 

52
00:04:01,646 --> 00:04:05,286
[SOUND] we've got the, the [INAUDIBLE] 
two bodies coming in, which are the two 

53
00:04:05,286 --> 00:04:09,925
colliding bodies, and then we've got the 
strength of that collision. 

54
00:04:09,925 --> 00:04:13,819
And we've got some logic here, which 
basically decides whether there should be 

55
00:04:13,819 --> 00:04:17,337
a score or not. 
And Mick's going to talk a little bit 

56
00:04:17,337 --> 00:04:21,203
more about that later. 
But then, here's the logic that decides 

57
00:04:21,203 --> 00:04:26,586
when to play sounds. 
[SOUND] So, first of all, the first trick 

58
00:04:26,586 --> 00:04:30,500
is that we know that the walls have a 
zero mass. 

59
00:04:30,500 --> 00:04:34,283
The walls are set up having a zero mass. 
So in order [INAUDIBLE] to figure out 

60
00:04:34,283 --> 00:04:38,080
whether one of the bodies that's been hit 
is a wall, we just test the two bodies. 

61
00:04:38,080 --> 00:04:41,410
So we say b1.getMass, that will tell us 
the mass. 

62
00:04:41,410 --> 00:04:44,822
And we test if it's equal to zero. 
So if b1 is equal to 0 mass, that means 

63
00:04:44,822 --> 00:04:50,080
it, it's wall, because the walls are the 
only things with zero mass. 

64
00:04:50,080 --> 00:04:53,557
And then if b4, we got this double bar 
side here, which means all, so if b1 or 

65
00:04:53,557 --> 00:04:57,319
b2 have zero mass, it means at least one 
of those things that's just collided is a 

66
00:04:57,319 --> 00:05:01,490
wall. 
And that means we're going to trigger the 

67
00:05:01,490 --> 00:05:04,692
wall sound. 
So you can see we cue the sound up and 

68
00:05:04,692 --> 00:05:09,248
rewind it to the beginning. 
And then, we set the speed on the sound. 

69
00:05:09,248 --> 00:05:12,852
So we're actually going to make the sound 
more dynamic by assigning a speed based 

70
00:05:12,852 --> 00:05:15,955
on how hard that, that thing hit the 
wall. 

71
00:05:15,955 --> 00:05:20,424
So if it hits the wall really hard, it 
will play the sound faster. 

72
00:05:20,424 --> 00:05:24,433
So it will be a high pitch sound. 
If it hits it slower it's, it's, it's a 

73
00:05:24,433 --> 00:05:27,056
low pitched sound, which kind of makes 
sense because it, it's this idea that the 

74
00:05:27,056 --> 00:05:30,252
sound plays more slowly with a slower 
collision. 

75
00:05:30,252 --> 00:05:34,979
And, finally, we play. 
Notice I'm scaling the, the impulse into 

76
00:05:34,979 --> 00:05:40,032
a range of zero to one there. 
because that, the impulse comes in, can 

77
00:05:40,032 --> 00:05:43,437
be quite high value. 
So it's, I, I, I did a lot of tests and 

78
00:05:43,437 --> 00:05:50,820
they come in the range of 100,000. 
So I'm just scaling it down with that. 

79
00:05:50,820 --> 00:05:53,828
So again we, we, we've got this thing 
where you've got different types of data 

80
00:05:53,828 --> 00:05:56,836
coming into your, your code and you need 
to know what kind of range that data is 

81
00:05:56,836 --> 00:05:59,891
in, and then you can scale it into a 
range that's appropriate for parametizing 

82
00:05:59,891 --> 00:06:05,654
audio and parametezing graphics. 
So lot of the tricks and how to make 

83
00:06:05,654 --> 00:06:09,258
things work properly is all about knowing 
what range or numbers you're dealing so 

84
00:06:09,258 --> 00:06:13,760
with the accleratometer what range of 
numbers do it generate. 

85
00:06:13,760 --> 00:06:17,335
With the physics engine what range of 
number does that generate and being able 

86
00:06:17,335 --> 00:06:20,745
to correctly scale the numbers to map to 
other things okay so the next bit of 

87
00:06:20,745 --> 00:06:26,326
logic. 
there's a quick test to see if either the 

88
00:06:26,326 --> 00:06:29,743
things are the actual drawing object, so 
if we've [UNKNOWN] the droid that means 

89
00:06:29,743 --> 00:06:34,350
we've triggered the droid sound. 
So we queue it up and again set the speed 

90
00:06:34,350 --> 00:06:39,165
in the same way and then hit play. 
And then find with that logic is which of 

91
00:06:39,165 --> 00:06:43,450
the crate sounds need to be played. 
Okay. 

92
00:06:43,450 --> 00:06:48,330
So, this loop here is the same four loop 
we've seen a few times now. 

93
00:06:48,330 --> 00:06:52,994
which loops through the array of crates. 
And tests each of the, the bodies that 

94
00:06:52,994 --> 00:06:55,826
have come in. 
So the, b1 and b2 are the two bodies that 

95
00:06:55,826 --> 00:06:58,510
have collided. 
We want to check if either of those is 

96
00:06:58,510 --> 00:07:02,397
one of this, is one of those crates. 
If it is, then we cue it up, and trigger 

97
00:07:02,397 --> 00:07:05,400
it. 
And I've done a bit of fine tuning here. 

98
00:07:05,400 --> 00:07:08,455
I've got 10,000 here instead of 100,000 
because I found that the crates in this 

99
00:07:08,455 --> 00:07:11,680
game tended to collide more slowly than 
other things. 

100
00:07:11,680 --> 00:07:16,430
So I've kind of scaled down the, the, the 
number there a bit to reflect that. 

101
00:07:16,430 --> 00:07:20,200
So again, it's a bit of tweaking. 
It's not always super precise. 

102
00:07:20,200 --> 00:07:24,120
It's about playing around with it and 
tweaking it so it works how you want. 

103
00:07:24,120 --> 00:07:27,454
Okay, so the speed is set like that. 
So a slightly different way of setting 

104
00:07:27,454 --> 00:07:30,500
the speed. 
Finally I'll play it, okay, so now what 

105
00:07:30,500 --> 00:07:35,470
we're going to do is just run this on the 
Android device. 

106
00:07:35,470 --> 00:07:48,000
And, you'll be able to see and hear it. 
That's just building now. 

107
00:07:55,850 --> 00:08:00,021
So I just lift it up so everybody takes 
the screen, because this one works in 

108
00:08:00,021 --> 00:08:03,615
Okay, so there's my boyd. 
Mick is going to talk to you more about 

109
00:08:03,615 --> 00:08:06,288
the graphics and how to make those really 
good. 

110
00:08:06,288 --> 00:08:09,090
but at the moment, I'm just, just worried 
about the sound. 

111
00:08:09,090 --> 00:08:16,080
So, if he, if he hits the walls, [SOUND] 
[INAUDIBLE] that's the crates colliding. 

112
00:08:16,080 --> 00:08:18,970
So that metallic sound is, is, is the, 
the wall sound. 

113
00:08:18,970 --> 00:08:24,010
And then the tappy sound is the crates 
colliding. 

114
00:08:24,010 --> 00:08:35,634
So you can see if he hits the wall really 
fast, if I fling him against the wall, 

115
00:08:35,634 --> 00:08:37,249
[SOUND] 

116
00:08:37,249 --> 00:08:40,156
[INAUDIBLE] 

117
00:08:40,156 --> 00:08:42,852
[SOUND]. 
Okay. 

118
00:08:42,852 --> 00:08:46,090
One more into the wall, just to 
demonstrate that. 

119
00:08:46,090 --> 00:08:52,335
[SOUND] 

120
00:08:52,335 --> 00:08:58,580
[SOUND]. 

121
00:08:58,580 --> 00:09:11,038
 >> Sounds pretty good. 
[MUSIC] 