1
00:00:00,590 --> 00:00:18,104
[SOUND]. 

2
00:00:18,104 --> 00:00:20,956
This week I'm going to talk about Physics 
Engines. 

3
00:00:20,956 --> 00:00:26,030
Now, physics engines have a really 
powerful tool to get animation into 

4
00:00:26,030 --> 00:00:33,195
action in in, in interactive programs. 
The great things about physics engines is 

5
00:00:33,195 --> 00:00:39,070
that they use mathematics, physics, to 
simulate the movement of objects. 

6
00:00:39,070 --> 00:00:43,025
So you can get objects that move just 
like they do in the real world. 

7
00:00:43,025 --> 00:00:46,609
And really if you've got a physic sense 
you don't have to write much of the code 

8
00:00:46,609 --> 00:00:50,137
at all for that animation, because the 
physics engine will handle a lot of it 

9
00:00:50,137 --> 00:00:55,080
for you. 
They're very hard code to write yourself, 

10
00:00:55,080 --> 00:00:57,593
but once you've got all that mass 
encapsulated. 

11
00:00:57,593 --> 00:01:00,601
You can just create objects and they will 
behave much as they would in the real 

12
00:01:00,601 --> 00:01:04,754
world. 
You're going to work with a physics 

13
00:01:04,754 --> 00:01:08,310
engine called Box2D, which does 
everything in two dimensions. 

14
00:01:08,310 --> 00:01:12,097
So, it's just slightly simpler than a 
three dimensional physics engine. 

15
00:01:12,097 --> 00:01:18,497
And it suits our, our needs very well 
because it's, we're all writing 2D 2D 

16
00:01:18,497 --> 00:01:25,600
programs, in this course. 
It's been used very extensively. 

17
00:01:25,600 --> 00:01:30,990
Probably most famously in the game Angry 
Birds which, you've probably heard of. 

18
00:01:30,990 --> 00:01:34,058
Considering it's one of the most 
successful video games of all time, by 

19
00:01:34,058 --> 00:01:39,170
now, I expect. 
so, what is a physics engine? 

20
00:01:39,170 --> 00:01:44,520
A physics engine works with objects, and 
it moves objects around. 

21
00:01:44,520 --> 00:01:53,060
So here we have a circle and rectangle, 
and these objects are moved by forces. 

22
00:01:53,060 --> 00:01:58,325
So as in the physical world, forces are 
types of objects and that causes them to 

23
00:01:58,325 --> 00:02:02,112
move around. 
We'll talk in detail about both of these 

24
00:02:02,112 --> 00:02:06,760
things in this lecture. 
But first I need to sort of talk a bit 

25
00:02:06,760 --> 00:02:12,236
about how the whole world is represented. 
Now, you actually need to have an 

26
00:02:12,236 --> 00:02:17,030
explicit representation of the physics 
world as well as the objects in it. 

27
00:02:17,030 --> 00:02:21,414
And I'll come back to how you create it. 
But before I say that there's something a 

28
00:02:21,414 --> 00:02:24,202
little different about how the physics 
world is represented than what we've done 

29
00:02:24,202 --> 00:02:28,318
up until now. 
Up to now we've upcentered everything in 

30
00:02:28,318 --> 00:02:31,440
terms of pixels on the screen, and that's 
fine. 

31
00:02:31,440 --> 00:02:34,706
That's, we're dealing with the screen. 
We can work all our distances can be our 

32
00:02:34,706 --> 00:02:37,114
pixels. 
But this is the real world isn't broken 

33
00:02:37,114 --> 00:02:42,135
up into squares. 
And if you really want to simulate the 

34
00:02:42,135 --> 00:02:47,925
real world properly. 
You have to seem like there's a 

35
00:02:47,925 --> 00:02:51,850
continuous world, things don't change 
that much. 

36
00:02:51,850 --> 00:02:56,250
You just get rid of the grid. 
But you're still using x and y position. 

37
00:02:57,550 --> 00:03:00,988
these are no longer whole numbers., they 
can be fractional. 

38
00:03:00,988 --> 00:03:06,616
but the x and y are still our fundamental 
representation of positions and 

39
00:03:06,616 --> 00:03:12,170
directions to the work. 
But I'll talk a little bit about how to 

40
00:03:12,170 --> 00:03:15,950
discuss x and y but deeper 
mathematically. 

41
00:03:15,950 --> 00:03:20,737
Because that will help a little bit when 
discussing physics engines. 

42
00:03:20,737 --> 00:03:25,900
I won't get heavily mathematical, I'll 
just prepare you with a few things. 

43
00:03:25,900 --> 00:03:29,425
X and y aren't really separate things. 
They, they were just a way of 

44
00:03:29,425 --> 00:03:33,530
representing a position of an object on 
the screen. 

45
00:03:33,530 --> 00:03:36,411
And we can combine them together into a 
single thing we call a vector represented 

46
00:03:36,411 --> 00:03:41,390
by this line in this diagram. 
So here we have a vector. 

47
00:03:41,390 --> 00:03:45,065
Well it's showing now like v. 
We can think of it as an x and a y, 

48
00:03:45,065 --> 00:03:48,135
that's our position. 
And we can also think of it has having 

49
00:03:48,135 --> 00:03:51,455
direction and a length. 
It looks like an arrow, it has it's 

50
00:03:51,455 --> 00:03:56,770
pointing in a certain direction and it 
looks align, it has a certain length. 

51
00:03:56,770 --> 00:04:02,386
We called the length align filled with 
two hallow bars, across it, we might need 

52
00:04:02,386 --> 00:04:08,389
that notation for much. 
And once we've got vectors, they're not 

53
00:04:08,389 --> 00:04:14,256
just the representations the x and y's. 
Mathematically vectors also include a 

54
00:04:14,256 --> 00:04:18,286
bunch mathematical operations we can do 
with them, some of which are quite 

55
00:04:18,286 --> 00:04:22,528
powerful. 
So, for example if we negate a vector, do 

56
00:04:22,528 --> 00:04:28,869
minus v, which is just minus x minus y, 
it points in the opposite direction. 

57
00:04:32,010 --> 00:04:38,768
If we multiple the vector by a number, 
say the vector multipled by 1.5 is 1.5 

58
00:04:38,768 --> 00:04:45,198
times x, 1.5 times y. 
We change the length of the vector gets 

59
00:04:45,198 --> 00:04:49,620
longer in this case and then we can go 
further now. 

60
00:04:49,620 --> 00:04:53,125
If we've got a vector representing a 
position, we've got another vector. 

61
00:04:53,125 --> 00:04:57,445
And we put that vector at starting at the 
end points of the end point of the 

62
00:04:57,445 --> 00:05:02,620
original one p, except v starts at the 
end point of p. 

63
00:05:05,430 --> 00:05:08,960
We can take it, it can take us to a new 
position. 

64
00:05:08,960 --> 00:05:12,836
And that position is actually the 
resulting of taking p, taking v and 

65
00:05:12,836 --> 00:05:17,410
adding them together. 
So we can add a vector v to vector p and 

66
00:05:17,410 --> 00:05:21,985
get a new vector p2, and if we do that, 
we can do the opposite and subtract it 

67
00:05:21,985 --> 00:05:28,404
off. 
So if P is px, py, p2 is p2x, p2y And we 

68
00:05:28,404 --> 00:05:36,730
know from what we just done that p2 is 
equal to p plus v. 

69
00:05:36,730 --> 00:05:41,100
Well that means that v is equal to p2 
minus v. 

70
00:05:41,100 --> 00:05:49,842
And so we can subtract off p, p for p2 
again, by subtracting p2, p2 from P2x. 

71
00:05:52,140 --> 00:05:57,940
And that, if you look at the diagram 
here, V is the vector that goes from 

72
00:05:57,940 --> 00:06:03,385
point p to point p2. 
So by subtracting one, the vector of one 

73
00:06:03,385 --> 00:06:07,015
point from the vector of another point we 
get the vector that goes between those 

74
00:06:07,015 --> 00:06:11,490
two. 
And I use that in a couple of slides to 

75
00:06:11,490 --> 00:06:15,910
do a calculation. 
So back to our physics engine, [COUGH], 

76
00:06:15,910 --> 00:06:21,217
as I said, we've got objects. 
We've got forces applied to them, and 

77
00:06:21,217 --> 00:06:28,560
they exist in world. 
Let's look first at the objects. 

78
00:06:28,560 --> 00:06:32,484
So we've got a physics object and this is 
a simplified representation of an object. 

79
00:06:32,484 --> 00:06:36,678
It has a shape, a simple shape. 
Or say that we mostly deal with circles 

80
00:06:36,678 --> 00:06:42,975
and rectangle and occasionally we'll deal 
with some more complex objects. 

81
00:06:42,975 --> 00:06:47,315
But I think for the example I think just 
in circles and rectangles. 

82
00:06:47,315 --> 00:06:52,028
It's got a position, it's got an angle, 
it's going to take [UNKNOWN]. 

83
00:06:52,028 --> 00:06:56,501
And it's got a mass, which is a physical 
quantity which is how much it resists 

84
00:06:56,501 --> 00:07:00,762
forces. 
So you need for, if it's got a high mass, 

85
00:07:00,762 --> 00:07:08,682
you'll need more force to push it. 
So these are the things that define 

86
00:07:08,682 --> 00:07:13,480
physics objects. 
Physics object exist within a world. 

87
00:07:13,480 --> 00:07:17,658
So, this is how you create a world. 
Create a new physics world by, it's an 

88
00:07:17,658 --> 00:07:21,810
object, you have available physics equals 
new physics. 

89
00:07:21,810 --> 00:07:27,824
And you give it the size of the world, 
which is the width and height of the, of 

90
00:07:27,824 --> 00:07:34,970
the, the window normally. 
And we use this, which, basically this is 

91
00:07:34,970 --> 00:07:39,940
a representation of your program. 
So by passing, putting, passing this into 

92
00:07:39,940 --> 00:07:44,301
your physics world, you're linking it to 
your program. 

93
00:07:44,301 --> 00:07:48,120
Then, the, the next thing we do to the 
physics world is set the density. 

94
00:07:48,120 --> 00:07:52,200
That's quite important because it's used 
to set the mass of objects, so. 

95
00:07:52,200 --> 00:07:54,460
You don't need to set the mass of an 
object explicitly. 

96
00:07:54,460 --> 00:07:57,799
It will just calculate from how big the 
object is based on the density, so the 

97
00:07:57,799 --> 00:08:01,132
bigger an object, the more mass it's 
going to be. 

98
00:08:01,132 --> 00:08:06,794
But the density is going to control how 
how massive each of your objects is. 

99
00:08:06,794 --> 00:08:11,247
So if you increase the density, then 
objects are going to resist movement 

100
00:08:11,247 --> 00:08:17,335
more, you're going to need bigger forces, 
they're going to move a bit less. 

101
00:08:17,335 --> 00:08:21,320
The exception to that is if you set 
density to zero. 

102
00:08:21,320 --> 00:08:25,544
If you set density to zero, then you're 
obviously not going to get affected by 

103
00:08:25,544 --> 00:08:29,590
any forces. 
so they'r not going to move, they're 

104
00:08:29,590 --> 00:08:34,113
going to be static and in the physics 
implementation. 

105
00:08:34,113 --> 00:08:37,476
You automatically it creates for you 
static objects at the sides of the 

106
00:08:37,476 --> 00:08:41,318
screen, so things bounce off the sides of 
the screen. 

107
00:08:41,318 --> 00:08:45,795
So now we've seen created that physics 
world, we can start creating objects. 

108
00:08:45,795 --> 00:08:51,080
And that's a little bit like drawing 
objects in, in processing. 

109
00:08:52,740 --> 00:08:56,880
We've got a function of physics 
.createRect, so it's the physics object 

110
00:08:56,880 --> 00:09:02,155
that's creating the rectangle. 
We're creating a rectangular object. 

111
00:09:02,155 --> 00:09:05,665
And just as in processing, to create a 
rectangle we need four numbers, but it's 

112
00:09:05,665 --> 00:09:10,892
a little bit different, like in placing 
the first two numbers at the top left. 

113
00:09:10,892 --> 00:09:15,180
But the next two numbers are the bottom 
right of the rectangle, not the height 

114
00:09:15,180 --> 00:09:19,580
and width, so that' something to 
remember. 

115
00:09:19,580 --> 00:09:24,242
Is that it's the top left and bottom 
right rather than the top left weidth and 

116
00:09:24,242 --> 00:09:28,280
height. 
We can also create circule objects. 

117
00:09:29,380 --> 00:09:32,260
Again a different function creates 
circle. 

118
00:09:32,260 --> 00:09:36,040
That's three parameters, x and y 
positioned at the center of the circle. 

119
00:09:38,770 --> 00:09:42,350
And the radius of the circle, how big the 
circle is. 

120
00:09:42,350 --> 00:09:45,437
And the great thing is, once we've 
created these physics objects, they will 

121
00:09:45,437 --> 00:09:49,310
just be part of the simulation. 
The physics world will just carry on 

122
00:09:49,310 --> 00:09:53,390
simulating and you don't really need to 
do much at all. 

123
00:09:53,390 --> 00:09:55,680
And you'll already get some quiet 
compelling interaction. 

124
00:09:58,500 --> 00:10:02,020
The only problem is, it's just the 
physics world, there's nothing graphical 

125
00:10:02,020 --> 00:10:05,192
on screen. 
So, for, for your physics objects you 

126
00:10:05,192 --> 00:10:10,390
also need to create a graphical object. 
Now a graphics objects is much what we, 

127
00:10:10,390 --> 00:10:14,801
is what we're used to. 
They've complex shapes, they've got 

128
00:10:14,801 --> 00:10:17,760
colors. 
They could be images, so this is exactly 

129
00:10:17,760 --> 00:10:21,646
what we're drawing. 
Now, we're not necessarily going to have 

130
00:10:21,646 --> 00:10:26,503
a representation of an object in there. 
but we're just going to use all the same 

131
00:10:26,503 --> 00:10:30,300
drawing trechniques that we've been using 
up to now. 

132
00:10:31,340 --> 00:10:35,050
And I'll show you an example of how to do 
that. 

133
00:10:35,050 --> 00:10:38,970
The most important thing you need to do 
is link your physics to your graphics. 

134
00:10:38,970 --> 00:10:45,562
So you need to get the precision and 
rotation of your of your physics bodies. 

135
00:10:45,562 --> 00:10:49,923
And then apply that to whatever graphics 
you're going to do. 

136
00:10:49,923 --> 00:10:54,935
So, first we get the object's position, 
body.getWorldCenter. 

137
00:10:54,935 --> 00:10:59,130
So that's the center of the object in 
world's coordinates. 

138
00:10:59,130 --> 00:11:03,036
So if you remember I went back we've got 
the pixel coordinates that we use on 

139
00:11:03,036 --> 00:11:06,674
screen. 
And we've got a set of vector coordinates 

140
00:11:06,674 --> 00:11:10,850
that we're using behind the scenes in the 
physics engine. 

141
00:11:10,850 --> 00:11:13,460
And sometimes you want those to be 
different. 

142
00:11:13,460 --> 00:11:18,075
In fact, most of the time you're likely 
to want it you're having one unit per 

143
00:11:18,075 --> 00:11:25,310
pixel is a bit small. 
roughly the physics world works in meter. 

144
00:11:25,310 --> 00:11:30,180
So one unit is a meter in terms of 
physical simulation. 

145
00:11:30,180 --> 00:11:34,546
So having one meter per pixel seems 
really small, so you might want 10 or 

146
00:11:34,546 --> 00:11:38,440
even 100. 
So, to get those coordinates back into 

147
00:11:38,440 --> 00:11:42,470
pixels, you call physics.worldToScreen, 
so world coordinates to screen 

148
00:11:42,470 --> 00:11:46,330
coordinates, screen coordinates to 
pixels. 

149
00:11:47,400 --> 00:11:51,365
The result of that is a vector, of the 
Vec2 type, so it's a variable of Vec2, 

150
00:11:51,365 --> 00:11:57,987
which is a vector, and it has a position. 
You can also get the angle of the object, 

151
00:11:57,987 --> 00:12:01,620
physics.getAngle, and you pass in the 
object itself. 

152
00:12:04,200 --> 00:12:09,122
And then you can use these for translate 
and rotate, just as we saw last week. 

153
00:12:09,122 --> 00:12:14,551
so, you need to get out the x and y 
positions of the vector, plus .x, plus 

154
00:12:14,551 --> 00:12:22,300
.y, and put them in the translate, and 
then you rotate by the angle. 

155
00:12:23,380 --> 00:12:28,190
I've converted that in to radiance, again 
as we saw last week. 

156
00:12:28,190 --> 00:12:32,942
So we don't, as the original angles and 
degrees, and I've putting in a minus sign 

157
00:12:32,942 --> 00:12:38,755
because the directions. 
In the physics world, it's different from 

158
00:12:38,755 --> 00:12:43,538
directions in the, in the screen worlds. 
but just put that in, and then we can do 

159
00:12:43,538 --> 00:12:47,860
whatever we like to do. 
In this case, I'm drawing an image. 

160
00:12:47,860 --> 00:12:56,505
And you must remember to put pressure pot 
matrix around those to make sure that 

161
00:12:56,505 --> 00:13:03,825
your objects move independently. 
[MUSIC]. 