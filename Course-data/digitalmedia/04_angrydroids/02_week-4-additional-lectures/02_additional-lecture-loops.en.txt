Welcome to my last additional video, which is about doing things many,
many times. This is something called a loop. Before we get to loops, let's talk about
why we want to do things many, many times. Simplest reason is that we might want to
draw lots of things that are very similar. A bunch of concentric circles, a set of lines forming a grid,
these are the examples I'm going to use. But also, things get much,
much more complex than that. I mean, you might have a game with
lots of enemies you want to draw. Or in the case of this week's example,
we're creating complex shapes made out of many similar simple shapes. And, in a sense, a grid or concentric
circles is a good starting point. Here, this is a sketch that gives us,
draws a bunch of lines across the screen. How does it work? Well, every time we call a draw
we're calling the line command. But we're using a variable here which is
changing every frame, so if you watch, let's draw gets called every
time a draw gets called, another online gets to have it. I'll actually set the frameworks, so this command sets how often
draw is called essentially. Just typed in ten times a second,
slow it down a little bit so that you can see it
drawing very gradually. And that's kind of what we want to do. We want to draw one line after another,
after another, after another. And we'll see how that works. So this is the code I just showed to you. And I will go into quite
a lot of detail how it works. First we create and set up a variable for
the position of the line starting at zero. We've seen variables last week. We know how they work. It's a number. Its value is zero. Then we use the current values of O to
draw a line, when we start off at zero. So we're drawing a line at zero, and the next one is always zero,
then zero, then height. So we make use of the variable
here inside the blank. The reason we're using pos twice is
because, we want both the start x position and end x position of the line to be zero,
because we want a vertical line. We don't want the line to
be at all horizontal, so the starting x and the end x position. But all that's important here is that
we're using this variable to do something, in this case draw a line. But the really important
bit is this next one. We're changing,
we're updating the value of the variable. So once we've drawn the line,
we add 20 to it. So the next time we draw a line,
it's going to be in a different position. And the reason that works is because
once we've done all that, it repeats. And it repeats because draw
is called many, many times. It's called one time after another,
each rate that's drawn. Let's go back through that,
because it's really important. We need to understand this to
understand what's happening next. We setup a variable. That variable is going to
control our drawing. We use the value of the variable,
we update the value of the variable so that the next time we use it,
it's different, and we repeat. While we're repeating, we're doing
exactly the same thing we just did, but with a different value the variables so
the effect is going to be different. We're going just do that and then times. Okay, one small but important point next, before we get to the next
bit is that k never stops. It's going to carry on going,
even though we're off the screen. We kind of like, probably doesn't
make a difference if we don't see stuff going off the screen,
but to my mind anyway, it seems a little bit inelegant to carry
on drawing when we no longer see stuff. So we want to stop when we
reach the end of the screen. And this is how we do it. Again, we setup the variable,
but before we do anything we use an if statement to check
the value of the variable. So we check is the position,
is pos less than the width? If it's less than the width,
we'll have to carry on drawing, because we haven't reached
the end of the screen. If it's more than the width, we stop so
only if we less than the width do we do the drawing,
the updating and the repeating. If we've reached the end, if it was more than the width,
we'd stop updating, we'd stop drawing. We finish doing what we're doing,
then we finish that drawing. So, small thing not vital
in this particular example, but actually very important with
say knowing when to stop, and in this case we are doing
with an if statement, but the important thing is if we
go back to the beginning. We're doing this statement that
compares our variable to some end condition, to some of the end condition. So we know that we end when
position reaches width. So as long as the position is less
than the width, we carry on going. So let's briefly see
that to check it works. So I'm putting in an if statement,
we're checking the value of the position. You won't really see if it works
because we can't tell the difference between big widths or not but we can if
say, we only want drawn to the halfway across the screen, and there it stopped. So, we can make it stop. Not only can we carry on doing stuff,
but we can also have it stopped. So are we done yet? No, because what if we want to
do everything at the same time? If we run this together, What that does is it gradually draws a set of lines
across the screen, one after the other. What if we just want a set
of lines on our screen? How do we do that? In order to do things, many things all at
once, we need something called a loop. If we get to live up, we cut this code
because it's essentially the same ideas. What it does, sets up a variable,
checks the value of that variable. Values still okay,
since we haven't reached the end. We use the current value available. We update the value, and we repeat. This is what's called a for loop. It does exactly the same thing, but it does it one after
the other until it finishes. Sets up a variable, checks the value of the variable,
uses the current value of the variable. Updates it and repeats. But the important thing is,
it repeats inside draw. So it's not repeating once per draw, it's doing all the repetitions
every time you call draw. So that to you, to the viewer,
it looks like it's all done, all at once, and what you get is a much lines. And the important thing is
it's this four structure. Let's look at that in a lot more. Once more I'm going to repeat. We set up a variable,
we check the value of the variable. But instead of having these all separate, they're all inside these brackets for
this command for. It's a little bit like an if statement. In an if statement you have if brackets
inside there, you have the condition. But rather than just having a condition,
we actually have, we have all the things we're
doing with this there. We're having, setting it up,
comparing it and updating it. And the for
loop does the repeating for us. So let's look at that again. A for loop has three things. An initial condition,
a test that checks the variable. So the initial value of the variable,
the 10 check on the variable, the increment, so
increasing the value of the variable. Here I'm just adding one or
20 that's very, very common. Just add one at a time. The previous one was a little
unusual in that we were making. And we've got a body,
where we're actually using our variable. And that repeats. The initial condition test and increment are all inside brackets and they're separated by semicolons. It's a little bit surprising. Other times when you've
got a function call, we expect to see brackets,
and inside them commas. Here it's semi-colons, this is how you know it's something
a bit different from a function call. Here they're semi-colons, you just
have to know that that's how it works. Just like the end of each
line has a semicolon, each bit of the for loop has a semicolon. Just have to know that, put it in, it's
part of the punctuation and grammar that, as I've said before,
is very important to programming. If you get that right,
it will [INAUDIBLE] work. Okay, now I want to look at another use of loops and a very useful one. Let's recap, what is an array? An array is like a variable but,
while a variable has one value, an array has many values. An array variable is what we see here. posX is a little box that points to
another whole load of other boxes In memory, each of which can be
thought of as its own variable. So it's pointing to
a large block of memory. So when we've got a single variable,
like an int variable we just create, how we create it, is you create
a box in memory, give it a name, posX, And put a value in it, zero. There it goes. When you create an array, it's a little
bit, creating a memory box, sure. Give it a name, sure. Create an array. And put that away in a box, or
rather, put a reference to that away. So make that box point to an array. I won't go into detail on that. It's not sampled right now. Reportedly now we've got
a whole bunch of empty boxes because we haven't put stuff in the boxes. So we need put values in each of these
array boxes one after the other. So I put one value in after another,
after another, after another. How do we do that kind of thing? How do we do one thing after another,
after another? It's what we've just seen, it's a. And this is how we might
go about doing it. First create a memory box. Give it a name. So creating an array then. Create your array itself. So now we've got 10 boxes in memory. Put a pointer, so make that posX
variable point to that memory. Then we need to go through and
put a value in each array box. That's what we're doing with a link. Let's look at that in more detail. What we need to do is start at
the first element in the array. As we said last week the first time
through is not one, it's zero. So we start off at int i=0,
set up our variable i stands for our position in the array. Set it to zero. We need to test to check the variable from what we need to make sure is it
is not more than the length. It hasn't gone over the way. So as long as i is less than
the length of the array, you're okay. As to be less than, less than and
equal because it starts at zero, the value of the array length
is on the entity length. This is very like what we saw last week in
the animation, then we went to stop and loop the animation. But, again, this time around
we're doing it many times. Rather than doing it every frame,
we're doing it all at the same time. So we're going until we've
reached the end of the array. Go one by one, add one. ++, if you remember, means add one. Each frame.
And then we Put the value into array on the top. So we're kind of stepping through
each element from zero, one, two, three to the length of the array,
cutting up value. In this case a random value. Into that [INAUDIBLE]. [SOUND] Recap, set up,
start, start position, first element through a always 0. Until the last element, always less than
or equal to the length of the array. We get that with a reigning .length. That's how you get
the length of the array. Go one by one,
always add one to put something in. Whenever you're dealing with arrays, it's really useful to do
this all over the place. This is a really, really common thing. You've got an array,
do a loop through, and the array, the loop always looks the same. Always starts at zero, goes the length
of the array as one doesn't. In fact, as well as putting stuff into
the array, you can do stuff to the array. This is an example of how you might draw a
point based on the positions in the array. We've got two arrays. And the array of x positions, and the array of y position will
be drawing a point each of those. This assumes that the size, the position of y is exactly
the same as the position of x. And it's exactly the same. So the first element starts at zero
until the last element, array.length. Go one by one, plus plus,
add one, and use element i. And you can use this to
draw elements in the array, to create elements in the array,
to do various updates. I could be adding something to
the position of each array. I could do whatever I want,
just like any other variable. Except this time,
because I've got lots of them in an array, rather than just using one line of code,
I'm using a loop to do that one line of code many,
many times in one time for each array. It's a very,
very common pattern that whenever you're working with arrays you use. It was very, very unusual that last week. Okay, so that's the end of this
additional programming lecture. And that's our last additional
programming lecture for this course. So I think I've covered all
the programming topics you're going to need for the rest of the course
You can't learn to program just by watching a few of my lectures. You have to go and do it, and I recommend
you do it by trying the exercises, looking at the examples we've shown
you in the rest of the course. Go and look at the documentation,
just try to write programs. That's the way to learn. There's a kind of myth that's,
to be a programmer you've got to have some special aptitude and
some people can do it, some people can't. They did a load of research about what. Which people were able to succeed at
programming in the university and not do that properly, and who didn't. The only thing that made a difference is
how much time people spent programming. You've really got to do it, and the best way to do it is find
something you're passionate about. I think anyone in this course are creative
people, do something creative with your code, and use that to motivate
yourself to go out and do it. If you do spend loads of time programming
and practicing and practicing and practicing, you will do it. The best way to practice is to do
something that you're really into, you're really passionate about. Something creative, something interesting. I hope we have provided in
the course a bunch of examples, a bunch of exercises which
will make you able to do that. Okay, thank you very much,
enjoy the rest of your course and good luck learning to program.