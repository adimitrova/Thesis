welcome to another additional lecture  about programming.
and so, this week i'm going to talk about  functions.
now, we've actually seen functions  before.
in fact, we've seen them in two different  contexts and at the time they have seemed  like very different things but they're  actually the same thing and i"m going to  slide a detail what they are and how you  can work with them.
so this is the first time we have seen  functions.
where we called above the surface line of  code we have to write size brackets 400,  that is a function.
that is a call to a function, size of the  function, and by we're calling that  function in order to get its  functionalities [unknown] change the size  of the screen.
so, this line of code is what we call a  functional call.
we're using a function that somebody else  has created.
let's look again in a little bit more  detail what this line [inaudible] does.
it's got a name, size, the name of the  function.
it's got parameters.
these are numbers that we are passing in  to the function.
giving to the function, in order to  change the way it works.
and you've got these little bits of of,  of punctuation.
the parameters of a function always have  brackets around them, and they're always  separated by a comma.
and that's an important part of what  makes a function and a function call.
and then we have a semi-colon on the end  of the line, as we normally do.
this is the other context in which we've  seen a function.
void draw.
void draw is, we've seen it before, it's,  last week.
it's where, it's a container in which we  put code that we want to be run every  time the screen is refreshed.
every time the screen [unknown].
so its a way of grouping k together and  have it happen at a set time but its also  a function and this is a function  definition.
on the last slide, we're looking at size,  where we're using an existing function.
here, we are creating a function that's  processing the use.
so processing calls the draw function  when it's ready to redraw a screen.
so these are two sides of the same thing.
this is what it looks like when we create  a function so lets look again a little  bit more detail what happens.
got the name of the function and the name  will be the same name we'll be using in  the function call.
the function has some content, the code  deduction happens when the function is  called.
it has the beginning, and an end and  they're defined by this curly bracket.
and i will come back to this later.
in the previous lecture, i said come back  in a few, feature we will come back to  them very soon to explain what they are.
but just now to imagine that really all  that's happening when we were on the  previous slide we talked about size, when  size is called, is that when we call  size, it's a function that contains a lot  of bunch of codes just like the draw  function contains code.
and that code as well, so that code  happened.
so when line is, draw is called here, the  line command will happen.
which is itself another function, of  course.
okay.
so, [sound] what can we do with that?
well, the great thing is, we can create  our own functions.
we created our own function when we  created draw.
but we can create new functions that all  i've got to rewrite call them, and then  we can call those functions later.
so, at the top of the screen here we've  created a function called updateball, and  it has two lines of code in it, so what  it's doing is not terribly important but  we've got one variable and we're adding  another variable to it.
that is our function and its pretty much  the types of things we've seen in void  draw or mouse pressed or set up.
all the things that we've used already  but draw setup, mouse press, mouse drag,  these are all built in things to  processing.
their names have special meaning whereas  update ball that could be anything i just  created that's my function i can call it  whatever i want.
and i call whatever i want because it's  me that's going to call it.
and i'm jsut going to the use the name i  call it and the button here and draw  that's what i'm doing.
we've got update ball is being called.
and, as we can see, the name of the  function is the same as the update ball  function, up here, and that's how  processing knows that i'm referring to  this bit of code up here.
and we've got those brackets in there,  which we always need.
well we've got a function.
now this function has not parameters, i'm  not passing any parameters, but we still  need the brackets, so processing those  that i'm calling a function.
even if they're empty, there's no  parameters, we still need the brackets.
okay.
good.
so, what does this give us?
why is it useful?
well it helps us in a number of ways the  first way is that it can break up your  code a little bit if you've got very  complicated code it become very difficult  to read.
and if you divide up your code so, if you  have hundreds and hundreds of lines of  code in draw you wouldn't know where  anything was.
so if you divide that into functions that  can get called and draw it simplifies  things.
we'll see another benefit of that system  in a minute.
let's look at another example.
so, here's a slightly more complex  example.
so, this time updateball has two  parameters.
here we are.
this is how you create a function which  has parameters.
so it's all function, calling functions  with parameters like size, we've done  that quite a lot.
you're passing numbers in that gets you  to the function.
but this is how you actually create that  kind of function.
and it looks a lot like, well, it looks a  lot like a call in that you've got  brackets.
and inside those brackets are the two  parameters.
and they're separated by commas.
and that explains why we have brackets  after void draw.
because it's a function.
and though it, and [inaudible], though it  doesn't have, take parameters.
other functions do take parameters, and  functions and no parameters still have  the brackets to show that they're  functions.
it looks a like a variable definettion  because it's got a type and a name jsut  as variables have types and names and in  fact it is a variable you're creating a  variable.
and it's a variable that you can use  inside your function just like any other  variable.
so we're using it here.
speedx is used inside the function.
it only exists inside the function.
so you can't use it outside the function.
but within the function it's just like  any other variable.
if its like a variable where do we get  the value?
we don't, we're not doing float of speedx  equals to a, as we would if you are  creating a variable.
so where does the value come from?
well, the value comes when we passing a  [inaudible] to it.
so when we call update ball.
if we pass a value in ball speed y but it  could be a number it could just be 3.  that value is copied into the varible  that is that parameter in this case speed  y.  which can then be used inside the  function so that's how.
parameters work.
so if you think when we're passing the  width, somewhere where size is created  there's a there's a parameter that says  float width and inside the size function  that float width variable gets used.
so to summarize, we define a parameter  with a type and name just like a  variable, we can use it just liek a  variable but the value of that variable  comes when we're passing a parameter in  as we call the function.
okay so that's functions with parameters.
one last thing, as well as parameter all  these functions we've had to far have got  void.
this one's got somethign different in  there.
it's got float.
what does it mean to have float there?
well sometimes as well as passing values  into a function you can get values back  out of the function.
and this is called the return value.
and by putting a float there, we're  saying the type of what is returned by  the function.
we're saying the return to float.
it means we can get a float value back  out of that function.
so if we're doing a calculation, we can  get a value back out.
up to now, it's been void.
and void literally means nothing.
it means there is no value coming out of  this function.
it just does its stuff, but it doesn't  give anything back to you.
by saying float before update ball it's  saying, i'm going to give a float to you  after i'm done with my stuff.
and the thing that...  at she does that giving back is the  return command, return keyword.
what that does is hmm, it says what value  to give back so when i say return the  function stops and gives back the value  and after the return statement.
just after return, i put whatever value i  wanted to give back.
so in this case, i'm returning the value  of the variable newball ballx.
and what happens?
well, when i make a call like this,  ballposx equals updateball, once the  function finishes.
i copied ballpos the value that's  returned new ball pos for x into my  variable ballpos x, so ballpos x is now  equal to whatever new ball x is.
i'm copying one into another.
so if we think of, of that whole process.
as i toss my parameters in they're copied  into variables in my function and can be  used in whatever way i like to do  whatever calculations or functionality i  want.
and then if i want i can have a resulting  calculation that ends up with a value  that i want to pop back in this case  newballx and that gets copied back out of  the function.
so value is going to come back out of the  function copied into variables at the  point which we call the function outside  the function.
so we can get two way flow of  information.
from the, from the function inside in and  out of the function, which is where it's  useful in multi contents.
so, this is a classic example, a function  to add 2 numbers together.
it's going to name add.
it's got a content which does some  calculations.
a beginning and an end with those code  brackets.
it's got parameters to floating point  numbers a and b, they get added together,  and the.
that calculation produces the result,  which is the return type to pass the  [inaudible] and the return value is c,  this variable that i have created by  adding a and b together.
so i can pass values into this function,  doing calculations that pass them back  out and that's probably about the  simplicity.
and you can do the dozen of those things.
okay, one last example.
so, don't bother, worry about what all  this code means, apart from that the fact  that we've got a complicated function  collidewithpaddle that has two  parameters.
now the great thing about function is  that, because you've got a bit of code  that change, does different things  depending on different parameters there  are there, you could call it multiple  times with different parameters.
so, i can call collide paddle once.
with details of one paddel this comes  from a palm game where the paddle is  basically a tennis racket.
i can one set of parameters and pass them  in and do as functionality once.
and i can call an exactly same.
function with another two sets of  parameters to do something different.
so, if i've got a tennis game, with two  paddles, the tennis rackets.
if i call it once with one with the x and  y of one paddle, and once with the x and  y of the other paddle, i only need one  bit of code.
but i'm handling [unknown] paddles.
and that's part of the benefit of doing,  sort of, a little bit more advanced  programming, because you can work how,  actually you can save a lot of time and  effort by realizing, well, i'm doing one  type of thing on lots of different types  of data, lots of different types of data.
doing one action for lots of data.
one action for lots of objects.
if you can put that one action into a  function, then you can just record,  recall it multiple times with different  parameters.
and you don't have to rewrite much other  than that one line function.
it simplifies your code a lot, saves you  a lot of work, saves you a lot of errors.
you can miscopy the code, or if there's  an error in one bit of code, you can  forget to copy the fix into another code.
if it's all in a function, it becomes a  lot simpler  [inaudible].
okay.
thanks a lot.
that's all i want to say on function.
