welcome to another additional lecture 
programming 
so, this week im going to talk 
functions 
now, weve actually seen functions 

in fact, weve seen in two different 
contexts time seemed 
like different things theyre 
actually thing im going to 
slide a detail you 
work 
so this is first time we seen 
functions 
we called surface line 
code we to write size brackets , 
that is a function 
that is a call to a function, size 
function, calling that 
function in order to get 
functionalities unknown change size 
screen 
so, this line code is we call a 
functional call 
using a function that somebody else 
created 
lets look in a little bit 
detail this line inaudible 
got a name, size, name 
function 
got parameters 
numbers that we passing in 
to function 
giving to function, in order to 
change way works 
youve got little bits of, 
punctuation 
parameters a function always 
brackets around them, theyre always 
separated a comma 
thats an important part 
makes a function a function call 
we a semicolon end 
line, we normally 
this is context in weve 
seen a function 
void draw 
void draw is, weve seen before, its, 
last week 
where, a container in we 
put code that we want to run every 
time screen is refreshed 
every time screen unknown 
so a way grouping k together 
happen a set time also 
a function this is a function 
definition 
last slide, looking size, 
using an existing function 
here, we creating a function thats 
processing use 
so processing calls draw function 
ready to redraw a screen 
so two sides thing 
this is looks like we create 
a function so lets look a little 
bit detail happens 
got name function name 
will name well using in 
function call 
function content, code 
deduction happens function is 
called 
beginning, an end 
theyre defined this curly bracket 
i will come back to this later 
in previous lecture, i said come back 
in a few, feature we will come back to 
soon to explain 
to imagine that really 
thats happening we 
previous slide we talked size, 
size is called, is that we call 
size, a function that contains a lot 
bunch codes like draw 
function contains code 
that code well, so that code 
happened 
so line is, draw is called here, 
line command will happen 
is another function, 
course 
okay 
so, sound we that 
well, great thing is, we create 
functions 
we created function we 
created draw 
we create new functions that 
ive got to rewrite call them, 
we call functions later 
so, top screen here weve 
created a function called updateball, 
two lines code in it, so 
is terribly important 
weve got one variable adding 
another variable to 
that is function pretty much 
types things weve seen in void 
draw mouse pressed set 
things that weve used already 
draw setup, mouse press, mouse drag, 
built in things to 
processing 
names special meaning whereas 
update ball that could anything i 
created thats function i call 
whatever i want 
i call whatever i want 
thats going to call 
im jsut going to use name i 
call button here draw 
thats im 
weve got update ball is called 
and, we see, name 
function is update ball 
function, here, thats 
processing knows that im referring to 
this bit code here 
weve got brackets in there, 
we always need 
well weve got a function 
this function parameters, im 
passing parameters, we still 
need brackets, so processing 
that im calling a function 
even if theyre empty, theres 
parameters, we still need brackets 
okay 
good 
so, this give us 
is useful 
well helps us in a number ways 
first way is that break 
code a little bit if youve got 
complicated code become difficult 
to read 
if you divide code so, if you 
hundreds hundreds lines 
code in draw you wouldnt know 
anything 
so if you divide that functions that 
get called draw simplifies 
things 
well see another benefit that system 
in a minute 
lets look another example 
so, heres a slightly complex 
example 
so, this time updateball two 
parameters 
here we 
this is you create a function 
parameters 
so function, calling functions 
parameters like size, weve done 
that quite a lot 
youre passing numbers in that gets you 
to function 
this is you actually create that 
kind function 
looks a lot like, well, looks a 
lot like a call in that youve got 
brackets 
inside brackets two 
parameters 
theyre separated commas 
that explains we brackets 
void draw 
a function 
though it, inaudible, though 
doesnt have, take parameters 
functions take parameters, 
functions parameters still 
brackets to show that theyre 
functions 
looks a like a variable definettion 
got a type a name jsut 
variables types names in 
fact is a variable youre creating a 
variable 
a variable that you use 
inside function like 
variable 
so using here 
speedx is used inside function 
exists inside function 
so you cant use outside function 
within function like 
variable 
if like a variable we get 
value 
we dont, float speedx 
equals to a, we would if you 
creating a variable 
so value come 
well, value comes we passing a 
inaudible to 
so we call update ball 
if we pass a value in ball speed y 
could a number could 
that value is copied varible 
that is that parameter in this case speed 
y 
used inside 
function so thats 
parameters work 
so if you think passing 
width, somewhere size is created 
theres a theres a parameter that says 
float width inside size function 
that float width variable gets used 
so to summarize, we define a parameter 
a type name like a 
variable, we use liek a 
variable value that variable 
comes passing a parameter in 
we call function 
okay so thats functions parameters 
one last thing, well parameter 
functions weve to far got 
void 
this ones got somethign different in 
there 
got float 
mean to float there 
well sometimes well passing values 
a function you get values back 
function 
this is called return value 
putting a float there, 
saying type is returned 
function 
saying return to float 
means we get a float value back 
that function 
so if a calculation, we 
get a value back 
to now, void 
void literally means nothing 
means there is value coming 
this function 
stuff, doesnt 
give anything back to you 
saying float update ball 
saying, im going to give a float to you 
im done stuff 
thing that 
that giving back is 
return command, return keyword 
that is hmm, says value 
to give back so i say return 
function stops gives back value 
return statement 
return, i put whatever value i 
wanted to give back 
so in this case, im returning value 
variable newball ballx 
happens 
well, i make a call like this, 
ballposx equals updateball, 
function finishes 
i copied ballpos value thats 
returned new ball pos x 
variable ballpos x, so ballpos x is 
equal to whatever new ball x is 
im copying one another 
so if we think of, that whole process 
i toss parameters in theyre copied 
variables in function 
used in whatever way i like to 
whatever calculations functionality i 
want 
if i want i a resulting 
calculation that ends a value 
that i want to pop back in this case 
newballx that gets copied back 
function 
so value is going to come back 
function copied variables 
point we call function outside 
function 
so we get two way flow 
information 
the, function inside in 
function, is 
useful in multi contents 
so, this is a classic example, a function 
to add numbers together 
going to name add 
got a content 
calculations 
a beginning an end code 
brackets 
got parameters to floating point 
numbers a b, get added together, 

that calculation produces result, 
is return type to pass 
inaudible return value is c, 
this variable that i created 
adding a b together 
so i pass values this function, 
calculations that pass back 
thats probably 
simplicity 
you dozen things 
okay, one last example 
so, dont bother, worry 
this code means, apart that fact 
that weve got a complicated function 
collidewithpaddle that two 
parameters 
great thing function is 
that, youve got a bit code 
that change, different things 
depending different parameters there 
there, you could call multiple 
times different parameters 
so, i call collide paddle 
details one paddel this comes 
a palm game paddle is 
basically a tennis racket 
i one set parameters pass 
in functionality 
i call an exactly 
function another two sets 
parameters to something different 
so, if ive got a tennis game, two 
paddles, tennis rackets 
if i call one x 
y one paddle, x 
y paddle, i need one 
bit code 
im handling unknown paddles 
thats part benefit doing, 
sort of, a little bit advanced 
programming, you work how, 
actually you save a lot time 
effort realizing, well, im one 
type thing lots different types 
data, lots different types data 
one action lots data 
one action lots objects 
if you put that one action a 
function, you record, 
recall multiple times different 
parameters 
you dont to rewrite much 
that one line function 
simplifies code a lot, saves you 
a lot work, saves you a lot errors 
you miscopy code, if theres 
an error in one bit code, you 
forget to copy fix another code 
if in a function, becomes a 
lot simpler 
inaudible 
okay 
thanks a lot 
thats i want to say function 
