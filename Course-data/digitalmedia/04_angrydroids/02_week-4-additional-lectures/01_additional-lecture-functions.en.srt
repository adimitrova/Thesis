1
00:00:00,800 --> 00:00:04,352
Welcome to another additional lecture 
about programming. 

2
00:00:04,352 --> 00:00:07,650
And so, this week I'm going to talk about 
functions. 

3
00:00:09,200 --> 00:00:11,734
Now, we've actually seen functions 
before. 

4
00:00:11,734 --> 00:00:16,988
In fact, we've seen them in two different 
contexts and at the time they have seemed 

5
00:00:16,988 --> 00:00:21,872
like very different things but they're 
actually the same thing and I"m going to 

6
00:00:21,872 --> 00:00:28,770
slide a detail what they are and how you 
can work with them. 

7
00:00:28,770 --> 00:00:31,360
So this is the first time we have seen 
functions. 

8
00:00:31,360 --> 00:00:37,457
Where we called above the surface line of 
code we have to write size brackets 400, 

9
00:00:37,457 --> 00:00:42,360
600. 
That is a function. 

10
00:00:43,660 --> 00:00:48,405
That is a call to a function, size of the 
function, and by we're calling that 

11
00:00:48,405 --> 00:00:52,785
function in order to get its 
functionalities [UNKNOWN] change the size 

12
00:00:52,785 --> 00:00:57,785
of the screen. 
So, this line of code is what we call a 

13
00:00:57,785 --> 00:01:02,130
functional call. 
We're using a function that somebody else 

14
00:01:02,130 --> 00:01:05,480
has created. 
Let's look again in a little bit more 

15
00:01:05,480 --> 00:01:11,140
detail what this line [INAUDIBLE] does. 
It's got a name, size, the name of the 

16
00:01:11,140 --> 00:01:16,470
function. 
It's got parameters. 

17
00:01:16,470 --> 00:01:19,130
These are numbers that we are passing in 
to the function. 

18
00:01:19,130 --> 00:01:22,470
Giving to the function, in order to 
change the way it works. 

19
00:01:24,270 --> 00:01:28,100
And you've got these little bits of of, 
of punctuation. 

20
00:01:29,330 --> 00:01:34,712
The parameters of a function always have 
brackets around them, and they're always 

21
00:01:34,712 --> 00:01:39,410
separated by a comma. 
And that's an important part of what 

22
00:01:39,410 --> 00:01:44,529
makes a function and a function call. 
And then we have a semi-colon on the end 

23
00:01:44,529 --> 00:01:51,717
of the line, as we normally do. 
This is the other context in which we've 

24
00:01:51,717 --> 00:01:56,590
seen a function. 
Void draw. 

25
00:01:56,590 --> 00:02:00,150
Void draw is, we've seen it before, it's, 
last week. 

26
00:02:00,150 --> 00:02:05,296
It's where, it's a container in which we 
put code that we want to be run every 

27
00:02:05,296 --> 00:02:10,460
time the screen is refreshed. 
Every time the screen [UNKNOWN]. 

28
00:02:10,460 --> 00:02:14,114
So its a way of grouping k together and 
have it happen at a set time but its also 

29
00:02:14,114 --> 00:02:17,910
a function and this is a function 
definition. 

30
00:02:19,880 --> 00:02:24,355
On the last slide, we're looking at size, 
where we're using an existing function. 

31
00:02:24,355 --> 00:02:31,050
Here, we are creating a function that's 
processing the use. 

32
00:02:31,050 --> 00:02:37,810
So processing calls the draw function 
when it's ready to redraw a screen. 

33
00:02:39,740 --> 00:02:44,927
So these are two sides of the same thing. 
This is what it looks like when we create 

34
00:02:44,927 --> 00:02:50,350
a function so lets look again a little 
bit more detail what happens. 

35
00:02:50,350 --> 00:02:55,278
Got the name of the function and the name 
will be the same name we'll be using in 

36
00:02:55,278 --> 00:03:00,680
the function call. 
The function has some content, the code 

37
00:03:00,680 --> 00:03:05,460
deduction happens when the function is 
called. 

38
00:03:05,460 --> 00:03:10,730
It has the beginning, and an end and 
they're defined by this curly bracket. 

39
00:03:10,730 --> 00:03:18,332
And I will come back to this later. 
In the previous lecture, I said come back 

40
00:03:18,332 --> 00:03:24,024
in a few, feature we will come back to 
them very soon to explain what they are. 

41
00:03:24,024 --> 00:03:28,116
But just now to imagine that really all 
that's happening when we were on the 

42
00:03:28,116 --> 00:03:32,340
previous slide we talked about size, when 
size is called, is that when we call 

43
00:03:32,340 --> 00:03:36,498
size, it's a function that contains a lot 
of bunch of codes just like the draw 

44
00:03:36,498 --> 00:03:43,628
function contains code. 
And that code as well, so that code 

45
00:03:43,628 --> 00:03:46,876
happened. 
So when line is, draw is called here, the 

46
00:03:46,876 --> 00:03:53,011
line command will happen. 
Which is itself another function, of 

47
00:03:53,011 --> 00:03:54,750
course. 
Okay. 

48
00:03:54,750 --> 00:03:59,195
So, [SOUND] what can we do with that? 
Well, the great thing is, we can create 

49
00:03:59,195 --> 00:04:01,935
our own functions. 
We created our own function when we 

50
00:04:01,935 --> 00:04:05,229
created draw. 
But we can create new functions that all 

51
00:04:05,229 --> 00:04:09,750
I've got to rewrite call them, and then 
we can call those functions later. 

52
00:04:09,750 --> 00:04:13,435
So, at the top of the screen here we've 
created a function called updateBall, and 

53
00:04:13,435 --> 00:04:16,955
it has two lines of code in it, so what 
it's doing is not terribly important but 

54
00:04:16,955 --> 00:04:22,364
we've got one variable and we're adding 
another variable to it. 

55
00:04:25,000 --> 00:04:29,800
That is our function and its pretty much 
the types of things we've seen in void 

56
00:04:29,800 --> 00:04:36,700
draw or mouse pressed or set up. 
All the things that we've used already 

57
00:04:36,700 --> 00:04:41,800
but draw setup, mouse press, mouse drag, 
these are all built in things to 

58
00:04:41,800 --> 00:04:48,345
processing. 
Their names have special meaning whereas 

59
00:04:48,345 --> 00:04:52,030
update ball that could be anything I just 
created that's my function I can call it 

60
00:04:52,030 --> 00:04:57,646
whatever I want. 
And I call whatever I want because it's 

61
00:04:57,646 --> 00:05:00,973
me that's going to call it. 
And I'm jsut going to the use the name I 

62
00:05:00,973 --> 00:05:04,641
call it and the button here and draw 
that's what I'm doing. 

63
00:05:04,641 --> 00:05:07,525
We've got update ball is being called. 
And, as we can see, the name of the 

64
00:05:07,525 --> 00:05:11,785
function is the same as the update ball 
function, up here, and that's how 

65
00:05:11,785 --> 00:05:17,982
processing knows that I'm referring to 
this bit of code up here. 

66
00:05:17,982 --> 00:05:25,335
And we've got those brackets in there, 
which we always need. 

67
00:05:25,335 --> 00:05:28,505
Well we've got a function. 
Now this function has not parameters, I'm 

68
00:05:28,505 --> 00:05:32,056
not passing any parameters, but we still 
need the brackets, so processing those 

69
00:05:32,056 --> 00:05:37,086
that I'm calling a function. 
Even if they're empty, there's no 

70
00:05:37,086 --> 00:05:39,716
parameters, we still need the brackets. 
Okay. 

71
00:05:39,716 --> 00:05:43,762
Good. 
So, what does this give us? 

72
00:05:43,762 --> 00:05:48,407
Why is it useful? 
Well it helps us in a number of ways the 

73
00:05:48,407 --> 00:05:51,770
first way is that it can break up your 
code a little bit if you've got very 

74
00:05:51,770 --> 00:05:56,254
complicated code it become very difficult 
to read. 

75
00:05:56,254 --> 00:06:00,158
And if you divide up your code so, if you 
have hundreds and hundreds of lines of 

76
00:06:00,158 --> 00:06:04,780
code in draw you wouldn't know where 
anything was. 

77
00:06:04,780 --> 00:06:08,420
So if you divide that into functions that 
can get called and draw it simplifies 

78
00:06:08,420 --> 00:06:11,356
things. 
We'll see another benefit of that system 

79
00:06:11,356 --> 00:06:15,648
in a minute. 
Let's look at another example. 

80
00:06:15,648 --> 00:06:17,910
So, here's a slightly more complex 
example. 

81
00:06:17,910 --> 00:06:22,595
So, this time UpdateBall has two 
parameters. 

82
00:06:22,595 --> 00:06:27,216
Here we are. 
This is how you create a function which 

83
00:06:27,216 --> 00:06:30,362
has parameters. 
So it's all function, calling functions 

84
00:06:30,362 --> 00:06:33,705
with parameters like size, we've done 
that quite a lot. 

85
00:06:33,705 --> 00:06:36,550
You're passing numbers in that gets you 
to the function. 

86
00:06:36,550 --> 00:06:40,410
But this is how you actually create that 
kind of function. 

87
00:06:40,410 --> 00:06:44,422
And it looks a lot like, well, it looks a 
lot like a call in that You've got 

88
00:06:44,422 --> 00:06:48,543
brackets. 
And inside those brackets are the two 

89
00:06:48,543 --> 00:06:51,720
parameters. 
And they're separated by commas. 

90
00:06:53,130 --> 00:06:57,110
And that explains why we have brackets 
after void draw. 

91
00:06:57,110 --> 00:07:01,196
Because it's a function. 
And though it, and [INAUDIBLE], though it 

92
00:07:01,196 --> 00:07:07,328
doesn't have, take parameters. 
Other functions do take parameters, and 

93
00:07:07,328 --> 00:07:10,805
functions and no parameters still have 
the brackets to show that they're 

94
00:07:10,805 --> 00:07:14,762
functions. 
It looks a like a variable definettion 

95
00:07:14,762 --> 00:07:19,306
because it's got a type and a name jsut 
as variables have types and names and in 

96
00:07:19,306 --> 00:07:24,990
fact it is a variable you're creating a 
variable. 

97
00:07:24,990 --> 00:07:29,148
And it's a variable that you can use 
inside your function just like any other 

98
00:07:29,148 --> 00:07:32,495
variable. 
So we're using it here. 

99
00:07:32,495 --> 00:07:39,530
SpeedX is used inside the function. 
it only exists inside the function. 

100
00:07:39,530 --> 00:07:43,244
So you can't use it outside the function. 
But within the function it's just like 

101
00:07:43,244 --> 00:07:47,840
any other variable. 
If its like a variable where do we get 

102
00:07:47,840 --> 00:07:51,352
the value? 
We don't, we're not doing float of speedX 

103
00:07:51,352 --> 00:07:55,430
equals to a, as we would if you are 
creating a variable. 

104
00:07:55,430 --> 00:08:00,815
So where does the value come from? 
Well, the value comes when we passing a 

105
00:08:00,815 --> 00:08:05,230
[INAUDIBLE] to it. 
So when we call update ball. 

106
00:08:05,230 --> 00:08:12,700
If we pass a value in ball speed Y but it 
could be a number it could just be 3. 

107
00:08:12,700 --> 00:08:17,835
That value is copied into the varible 
that is that parameter in this case speed 

108
00:08:17,835 --> 00:08:23,160
Y. 
Which can then be used inside the 

109
00:08:23,160 --> 00:08:27,317
function so that's how. 
Parameters work. 

110
00:08:27,317 --> 00:08:33,077
So if you think when we're passing the 
width, somewhere where size is created 

111
00:08:33,077 --> 00:08:39,107
there's a there's a parameter that says 
float width and inside the size function 

112
00:08:39,107 --> 00:08:47,661
that float width variable gets used. 
So To summarize, we define a parameter 

113
00:08:47,661 --> 00:08:52,060
with a type and name just like a 
variable, we can use it just liek a 

114
00:08:52,060 --> 00:08:57,538
variable but the value of that variable 
comes when we're passing a parameter in 

115
00:08:57,538 --> 00:09:07,269
as we call the function. 
Okay so that's functions with parameters. 

116
00:09:08,400 --> 00:09:12,621
One last thing, as well as parameter all 
these functions we've had to far have got 

117
00:09:12,621 --> 00:09:16,442
void. 
This one's got somethign different in 

118
00:09:16,442 --> 00:09:18,660
there. 
It's got float. 

119
00:09:18,660 --> 00:09:23,148
What does it mean to have float there? 
Well sometimes as well as passing values 

120
00:09:23,148 --> 00:09:27,530
into a function you can get values back 
out of the function. 

121
00:09:27,530 --> 00:09:31,828
And this is called the return value. 
And by putting a float there, we're 

122
00:09:31,828 --> 00:09:37,380
saying the type of what is returned by 
the function. 

123
00:09:37,380 --> 00:09:40,560
We're saying the return to float. 
It means we can get a float value back 

124
00:09:40,560 --> 00:09:43,904
out of that function. 
So if we're doing a calculation, we can 

125
00:09:43,904 --> 00:09:48,320
get a value back out. 
Up to now, it's been void. 

126
00:09:48,320 --> 00:09:52,482
And void literally means nothing. 
It means there is no value coming out of 

127
00:09:52,482 --> 00:09:56,341
this function. 
It just does its stuff, but it doesn't 

128
00:09:56,341 --> 00:10:00,932
give anything back to you. 
By saying float before update ball it's 

129
00:10:00,932 --> 00:10:06,750
saying, I'm going to give a float to you 
after I'm done with my stuff. 

130
00:10:06,750 --> 00:10:11,226
And the thing that... 
At she does that giving back is the 

131
00:10:11,226 --> 00:10:18,147
return command, return keyword. 
What that does is hmm, it says what value 

132
00:10:18,147 --> 00:10:23,665
to give back so when I say return the 
function stops and gives back the value 

133
00:10:23,665 --> 00:10:31,166
and after the return statement. 
Just after return, I put whatever value I 

134
00:10:31,166 --> 00:10:35,692
wanted to give back. 
So in this case, I'm returning the value 

135
00:10:35,692 --> 00:10:41,291
of the variable newBall ballX. 
And what happens? 

136
00:10:41,291 --> 00:10:46,031
Well, when I make a call like this, 
ballPosX equals updateBall, once the 

137
00:10:46,031 --> 00:10:51,278
function finishes. 
I copied ballpos the value that's 

138
00:10:51,278 --> 00:10:57,098
returned new ball pos for X into my 
variable ballpos X, so ballpos X is now 

139
00:10:57,098 --> 00:11:04,860
equal to whatever new ball X is. 
I'm copying one into another. 

140
00:11:04,860 --> 00:11:11,360
So if we think of, of that whole process. 
As I toss my parameters in they're copied 

141
00:11:11,360 --> 00:11:14,900
into variables in my function and can be 
used in whatever way I like to do 

142
00:11:14,900 --> 00:11:19,161
whatever calculations or functionality I 
want. 

143
00:11:19,161 --> 00:11:23,886
And then if I want I can have a resulting 
calculation that ends up with a value 

144
00:11:23,886 --> 00:11:28,536
that I want to pop back In this case 
newBallX and that gets copied back out of 

145
00:11:28,536 --> 00:11:34,840
the function. 
So value is going to come back out of the 

146
00:11:34,840 --> 00:11:39,592
function copied into variables at the 
point which we call the function outside 

147
00:11:39,592 --> 00:11:43,840
the function. 
So we can get two way flow of 

148
00:11:43,840 --> 00:11:48,688
information. 
From the, from the function inside in and 

149
00:11:48,688 --> 00:11:55,684
out of the function, which is where it's 
useful in multi contents. 

150
00:11:55,684 --> 00:12:01,551
So, this is a classic example, a function 
to add 2 numbers together. 

151
00:12:01,551 --> 00:12:07,422
It's going to name add. 
It's got a content which does some 

152
00:12:07,422 --> 00:12:12,838
calculations. 
A beginning and an end with those code 

153
00:12:12,838 --> 00:12:17,857
brackets. 
It's got parameters to floating point 

154
00:12:17,857 --> 00:12:25,090
numbers a and b, they get added together, 
and the. 

155
00:12:25,090 --> 00:12:28,934
That calculation produces the result, 
which is the return type to pass the 

156
00:12:28,934 --> 00:12:32,778
[INAUDIBLE] and the return value is c, 
this variable that I have created by 

157
00:12:32,778 --> 00:12:38,899
adding a and b together. 
So I can pass values into this function, 

158
00:12:38,899 --> 00:12:42,132
doing calculations that pass them back 
out and that's probably about the 

159
00:12:42,132 --> 00:12:49,836
simplicity. 
And you can do the dozen of those things. 

160
00:12:49,836 --> 00:12:55,184
Okay, one last example. 
So, don't bother, worry about what all 

161
00:12:55,184 --> 00:12:59,606
this code means, apart from that the fact 
that we've got a complicated function 

162
00:12:59,606 --> 00:13:03,970
collideWithPaddle that has two 
parameters. 

163
00:13:06,130 --> 00:13:10,284
Now the great thing about function is 
that, because you've got a bit of code 

164
00:13:10,284 --> 00:13:14,639
that change, does different things 
depending on different parameters there 

165
00:13:14,639 --> 00:13:21,610
are there, you could call it multiple 
times with different parameters. 

166
00:13:21,610 --> 00:13:26,685
So, I can call collide paddle once. 
With details of one paddel this comes 

167
00:13:26,685 --> 00:13:29,868
from a palm game where the paddle is 
basically a tennis racket. 

168
00:13:29,868 --> 00:13:40,719
I can one set of parameters and pass them 
in and do as functionality once. 

169
00:13:40,719 --> 00:13:45,088
And I can call an exactly same. 
Function with another two sets of 

170
00:13:45,088 --> 00:13:49,583
parameters to do something different. 
So, if I've got a tennis game, with two 

171
00:13:49,583 --> 00:13:55,638
paddles, the tennis rackets. 
If I call it once with one with the X and 

172
00:13:55,638 --> 00:13:59,786
Y of one paddle, and once with the X and 
Y of the other paddle, I only need one 

173
00:13:59,786 --> 00:14:05,430
bit of code. 
But I'm handling [UNKNOWN] paddles. 

174
00:14:05,430 --> 00:14:09,894
And that's part of the benefit of doing, 
sort of, a little bit more advanced 

175
00:14:09,894 --> 00:14:14,502
programming, because you can work how, 
actually you can save a lot of time and 

176
00:14:14,502 --> 00:14:19,326
effort by realizing, well, I'm doing one 
type of thing on lots of different types 

177
00:14:19,326 --> 00:14:28,890
of data, lots of different types of data. 
Doing one action for lots of data. 

178
00:14:28,890 --> 00:14:32,597
One action for lots of objects. 
If you can put that one action into a 

179
00:14:32,597 --> 00:14:36,757
function, then you can just record, 
recall it multiple times with different 

180
00:14:36,757 --> 00:14:42,322
parameters. 
And you don't have to rewrite much other 

181
00:14:42,322 --> 00:14:46,881
than that one line function. 
It simplifies your code a lot, saves you 

182
00:14:46,881 --> 00:14:51,710
a lot of work, saves you a lot of errors. 
You can miscopy the code, or if there's 

183
00:14:51,710 --> 00:14:57,055
an error in one bit of code, you can 
forget to copy the fix into another code. 

184
00:14:57,055 --> 00:15:01,155
If it's all in a function, it becomes a 
lot simpler 

185
00:15:01,155 --> 00:15:03,513
[INAUDIBLE]. 

186
00:15:03,513 --> 00:15:04,448
Okay. 
Thanks a lot. 

187
00:15:04,448 --> 00:15:06,370
That's all I want to say on function. 