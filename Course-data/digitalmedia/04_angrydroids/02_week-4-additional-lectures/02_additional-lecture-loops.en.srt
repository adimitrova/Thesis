1
00:00:00,508 --> 00:00:04,078
Welcome to my last additional video,

2
00:00:04,078 --> 00:00:08,549
which is about doing things many,
many times.

3
00:00:08,549 --> 00:00:10,883
This is something called a loop.

4
00:00:10,883 --> 00:00:16,880
Before we get to loops, let's talk about
why we want to do things many, many times.

5
00:00:16,880 --> 00:00:22,480
Simplest reason is that we might want to
draw lots of things that are very similar.

6
00:00:22,480 --> 00:00:24,550
A bunch of concentric circles,

7
00:00:24,550 --> 00:00:29,130
a set of lines forming a grid,
these are the examples I'm going to use.

8
00:00:29,130 --> 00:00:34,340
But also, things get much,
much more complex than that.

9
00:00:34,340 --> 00:00:37,510
I mean, you might have a game with
lots of enemies you want to draw.

10
00:00:37,510 --> 00:00:43,140
Or in the case of this week's example,
we're creating complex shapes made

11
00:00:44,800 --> 00:00:49,640
out of many similar simple shapes.

12
00:00:49,640 --> 00:00:56,410
And, in a sense, a grid or concentric
circles is a good starting point.

13
00:00:56,410 --> 00:01:02,190
Here, this is a sketch that gives us,
draws a bunch of lines across the screen.

14
00:01:03,700 --> 00:01:04,700
How does it work?

15
00:01:04,700 --> 00:01:12,650
Well, every time we call a draw
we're calling the line command.

16
00:01:14,530 --> 00:01:20,183
But we're using a variable here which is
changing every frame, so if you watch,

17
00:01:20,183 --> 00:01:25,540
let's draw gets called every
time a draw gets called,

18
00:01:25,540 --> 00:01:27,470
another online gets to have it.

19
00:01:27,470 --> 00:01:31,170
I'll actually set the frameworks, so

20
00:01:31,170 --> 00:01:35,068
this command sets how often
draw is called essentially.

21
00:01:35,068 --> 00:01:39,930
Just typed in ten times a second,
slow it down a little bit so

22
00:01:39,930 --> 00:01:42,490
that you can see it
drawing very gradually.

23
00:01:44,870 --> 00:01:46,580
And that's kind of what we want to do.

24
00:01:47,790 --> 00:01:51,120
We want to draw one line after another,
after another, after another.

25
00:01:52,910 --> 00:01:54,220
And we'll see how that works.

26
00:01:54,220 --> 00:01:57,250
So this is the code I just showed to you.

27
00:01:57,250 --> 00:02:00,100
And I will go into quite
a lot of detail how it works.

28
00:02:03,610 --> 00:02:10,670
First we create and set up a variable for
the position of the line starting at zero.

29
00:02:10,670 --> 00:02:16,410
We've seen variables last week.

30
00:02:16,410 --> 00:02:18,130
We know how they work.

31
00:02:18,130 --> 00:02:18,740
It's a number.

32
00:02:18,740 --> 00:02:19,513
Its value is zero.

33
00:02:22,532 --> 00:02:29,440
Then we use the current values of O to
draw a line, when we start off at zero.

34
00:02:29,440 --> 00:02:31,710
So we're drawing a line at zero,

35
00:02:31,710 --> 00:02:35,630
and the next one is always zero,
then zero, then height.

36
00:02:36,700 --> 00:02:40,290
So we make use of the variable
here inside the blank.

37
00:02:41,360 --> 00:02:47,650
The reason we're using pos twice is
because, we want both the start x position

38
00:02:47,650 --> 00:02:53,540
and end x position of the line to be zero,
because we want a vertical line.

39
00:02:53,540 --> 00:02:58,040
We don't want the line to
be at all horizontal, so

40
00:02:58,040 --> 00:03:03,390
the starting x and the end x position.

41
00:03:03,390 --> 00:03:08,810
But all that's important here is that
we're using this variable to do something,

42
00:03:08,810 --> 00:03:09,710
in this case draw a line.

43
00:03:12,540 --> 00:03:16,040
But the really important
bit is this next one.

44
00:03:16,040 --> 00:03:18,909
We're changing,
we're updating the value of the variable.

45
00:03:20,160 --> 00:03:23,090
So once we've drawn the line,
we add 20 to it.

46
00:03:24,910 --> 00:03:28,500
So the next time we draw a line,
it's going to be in a different position.

47
00:03:29,940 --> 00:03:35,999
And the reason that works is because
once we've done all that, it repeats.

48
00:03:37,210 --> 00:03:41,610
And it repeats because draw
is called many, many times.

49
00:03:41,610 --> 00:03:44,560
It's called one time after another,
each rate that's drawn.

50
00:03:44,560 --> 00:03:50,040
Let's go back through that,
because it's really important.

51
00:03:50,040 --> 00:03:54,070
We need to understand this to
understand what's happening next.

52
00:03:54,070 --> 00:03:55,029
We setup a variable.

53
00:03:56,160 --> 00:03:57,870
That variable is going to
control our drawing.

54
00:03:57,870 --> 00:04:03,770
We use the value of the variable,
we update the value of the variable so

55
00:04:03,770 --> 00:04:09,083
that the next time we use it,
it's different, and we repeat.

56
00:04:09,083 --> 00:04:13,720
While we're repeating, we're doing
exactly the same thing we just did, but

57
00:04:13,720 --> 00:04:18,234
with a different value the variables so
the effect is going to be different.

58
00:04:18,234 --> 00:04:24,204
We're going just do that and

59
00:04:24,204 --> 00:04:26,966
then times.

60
00:04:26,966 --> 00:04:31,190
Okay, one small but important point next,

61
00:04:32,480 --> 00:04:37,160
before we get to the next
bit is that k never stops.

62
00:04:37,160 --> 00:04:40,020
It's going to carry on going,
even though we're off the screen.

63
00:04:41,290 --> 00:04:44,220
We kind of like, probably doesn't
make a difference if we don't

64
00:04:44,220 --> 00:04:48,370
see stuff going off the screen,
but to my mind anyway,

65
00:04:48,370 --> 00:04:52,200
it seems a little bit inelegant to carry
on drawing when we no longer see stuff.

66
00:04:52,200 --> 00:04:55,180
So we want to stop when we
reach the end of the screen.

67
00:04:55,180 --> 00:04:57,750
And this is how we do it.

68
00:04:57,750 --> 00:05:02,250
Again, we setup the variable,
but before we do anything we use

69
00:05:02,250 --> 00:05:04,760
an if statement to check
the value of the variable.

70
00:05:04,760 --> 00:05:10,560
So we check is the position,
is pos less than the width?

71
00:05:10,560 --> 00:05:14,480
If it's less than the width,
we'll have to carry on drawing,

72
00:05:14,480 --> 00:05:15,850
because we haven't reached
the end of the screen.

73
00:05:15,850 --> 00:05:20,430
If it's more than the width, we stop so
only if we less than the width

74
00:05:20,430 --> 00:05:24,020
do we do the drawing,
the updating and the repeating.

75
00:05:26,160 --> 00:05:27,370
If we've reached the end,

76
00:05:27,370 --> 00:05:31,380
if it was more than the width,
we'd stop updating, we'd stop drawing.

77
00:05:31,380 --> 00:05:37,340
We finish doing what we're doing,
then we finish that drawing.

78
00:05:37,340 --> 00:05:44,460
So, small thing not vital
in this particular example,

79
00:05:44,460 --> 00:05:49,130
but actually very important with
say knowing when to stop, and

80
00:05:49,130 --> 00:05:52,440
in this case we are doing
with an if statement, but

81
00:05:52,440 --> 00:05:55,159
the important thing is if we
go back to the beginning.

82
00:05:56,780 --> 00:06:00,960
We're doing this statement that
compares our variable to some end

83
00:06:02,610 --> 00:06:04,940
condition, to some of the end condition.

84
00:06:04,940 --> 00:06:10,290
So we know that we end when
position reaches width.

85
00:06:11,570 --> 00:06:16,750
So as long as the position is less
than the width, we carry on going.

86
00:06:16,750 --> 00:06:18,803
So let's briefly see
that to check it works.

87
00:06:25,596 --> 00:06:30,080
So I'm putting in an if statement,
we're checking the value of the position.

88
00:06:33,570 --> 00:06:37,660
You won't really see if it works
because we can't tell the difference

89
00:06:37,660 --> 00:06:42,590
between big widths or not but we can if
say, we only want drawn to the halfway

90
00:06:42,590 --> 00:06:47,460
across the screen, and there it stopped.

91
00:06:47,460 --> 00:06:50,640
So, we can make it stop.

92
00:06:50,640 --> 00:06:54,693
Not only can we carry on doing stuff,
but we can also have it stopped.

93
00:07:00,441 --> 00:07:01,485
So are we done yet?

94
00:07:01,485 --> 00:07:06,468
No, because what if we want to
do everything at the same time?

95
00:07:06,468 --> 00:07:12,664
If we run this together, What that

96
00:07:12,664 --> 00:07:18,730
does is it gradually draws a set of lines
across the screen, one after the other.

97
00:07:18,730 --> 00:07:21,220
What if we just want a set
of lines on our screen?

98
00:07:21,220 --> 00:07:24,020
How do we do that?

99
00:07:24,020 --> 00:07:31,329
In order to do things, many things all at
once, we need something called a loop.

100
00:07:32,360 --> 00:07:40,280
If we get to live up, we cut this code
because it's essentially the same ideas.

101
00:07:40,280 --> 00:07:44,880
What it does, sets up a variable,
checks the value of that variable.

102
00:07:44,880 --> 00:07:47,387
Values still okay,
since we haven't reached the end.

103
00:07:47,387 --> 00:07:50,190
We use the current value available.

104
00:07:50,190 --> 00:07:51,870
We update the value, and we repeat.

105
00:07:54,380 --> 00:07:56,466
This is what's called a for loop.

106
00:07:58,707 --> 00:08:01,781
It does exactly the same thing, but

107
00:08:01,781 --> 00:08:06,000
it does it one after
the other until it finishes.

108
00:08:06,000 --> 00:08:06,980
Sets up a variable,

109
00:08:08,160 --> 00:08:13,420
checks the value of the variable,
uses the current value of the variable.

110
00:08:14,430 --> 00:08:17,320
Updates it and repeats.

111
00:08:17,320 --> 00:08:23,630
But the important thing is,
it repeats inside draw.

112
00:08:25,060 --> 00:08:29,610
So it's not repeating once per draw,

113
00:08:29,610 --> 00:08:33,180
it's doing all the repetitions
every time you call draw.

114
00:08:34,870 --> 00:08:40,230
So that to you, to the viewer,
it looks like it's all done, all at

115
00:08:41,880 --> 00:08:46,820
once, and what you get is a much lines.

116
00:08:46,820 --> 00:08:49,880
And the important thing is
it's this four structure.

117
00:08:49,880 --> 00:08:52,580
Let's look at that in a lot more.

118
00:08:53,580 --> 00:08:55,530
Once more I'm going to repeat.

119
00:08:55,530 --> 00:08:59,590
We set up a variable,
we check the value of the variable.

120
00:08:59,590 --> 00:09:02,234
But instead of having these all separate,

121
00:09:02,234 --> 00:09:05,842
they're all inside these brackets for
this command for.

122
00:09:05,842 --> 00:09:08,060
It's a little bit like an if statement.

123
00:09:08,060 --> 00:09:12,780
In an if statement you have if brackets
inside there, you have the condition.

124
00:09:14,600 --> 00:09:21,855
But rather than just having a condition,
we actually have,

125
00:09:21,855 --> 00:09:28,128
we have all the things we're
doing with this there.

126
00:09:28,128 --> 00:09:32,310
We're having, setting it up,
comparing it and updating it.

127
00:09:33,710 --> 00:09:36,626
And the for
loop does the repeating for us.

128
00:09:39,808 --> 00:09:41,260
So let's look at that again.

129
00:09:42,310 --> 00:09:43,980
A for loop has three things.

130
00:09:43,980 --> 00:09:48,240
An initial condition,
a test that checks the variable.

131
00:09:48,240 --> 00:09:52,130
So the initial value of the variable,
the 10 check on the variable,

132
00:09:52,130 --> 00:09:54,590
the increment, so
increasing the value of the variable.

133
00:09:55,780 --> 00:10:00,100
Here I'm just adding one or
20 that's very, very common.

134
00:10:00,100 --> 00:10:01,340
Just add one at a time.

135
00:10:01,340 --> 00:10:04,630
The previous one was a little
unusual in that we were making.

136
00:10:04,630 --> 00:10:08,890
And we've got a body,
where we're actually using our variable.

137
00:10:12,110 --> 00:10:12,984
And that repeats.

138
00:10:15,247 --> 00:10:18,864
The initial condition test and

139
00:10:18,864 --> 00:10:23,316
increment are all inside brackets and

140
00:10:23,316 --> 00:10:27,690
they're separated by semicolons.

141
00:10:27,690 --> 00:10:30,490
It's a little bit surprising.

142
00:10:30,490 --> 00:10:35,250
Other times when you've
got a function call, we

143
00:10:35,250 --> 00:10:40,270
expect to see brackets,
and inside them commas.

144
00:10:40,270 --> 00:10:41,270
Here it's semi-colons,

145
00:10:41,270 --> 00:10:44,448
this is how you know it's something
a bit different from a function call.

146
00:10:44,448 --> 00:10:49,040
Here they're semi-colons, you just
have to know that that's how it works.

147
00:10:50,340 --> 00:10:54,852
Just like the end of each
line has a semicolon,

148
00:10:54,852 --> 00:10:58,792
each bit of the for loop has a semicolon.

149
00:10:58,792 --> 00:11:02,308
Just have to know that, put it in, it's
part of the punctuation and grammar that,

150
00:11:02,308 --> 00:11:04,787
as I've said before,
is very important to programming.

151
00:11:04,787 --> 00:11:07,805
If you get that right,
it will [INAUDIBLE] work.

152
00:11:07,805 --> 00:11:12,655
Okay, now I want to look at another

153
00:11:12,655 --> 00:11:17,517
use of loops and a very useful one.

154
00:11:19,860 --> 00:11:21,980
Let's recap, what is an array?

155
00:11:23,670 --> 00:11:28,980
An array is like a variable but,
while a variable has one value,

156
00:11:28,980 --> 00:11:33,680
an array has many values.

157
00:11:33,680 --> 00:11:36,333
An array variable is what we see here.

158
00:11:36,333 --> 00:11:40,915
posX is a little box that points to
another whole load of other boxes In

159
00:11:40,915 --> 00:11:44,947
memory, each of which can be
thought of as its own variable.

160
00:11:44,947 --> 00:11:45,830
So it's pointing to
a large block of memory.

161
00:11:47,840 --> 00:11:54,339
So when we've got a single variable,
like an int variable we just create,

162
00:11:54,339 --> 00:11:59,803
how we create it, is you create
a box in memory, give it a name,

163
00:11:59,803 --> 00:12:05,059
posX, And put a value in it, zero.

164
00:12:05,059 --> 00:12:06,476
There it goes.

165
00:12:09,679 --> 00:12:13,950
When you create an array, it's a little
bit, creating a memory box, sure.

166
00:12:13,950 --> 00:12:16,450
Give it a name, sure.

167
00:12:18,220 --> 00:12:20,673
Create an array.

168
00:12:20,673 --> 00:12:26,188
And put that away in a box, or
rather, put a reference to that away.

169
00:12:26,188 --> 00:12:29,080
So make that box point to an array.

170
00:12:29,080 --> 00:12:31,910
I won't go into detail on that.

171
00:12:31,910 --> 00:12:34,990
It's not sampled right now.

172
00:12:34,990 --> 00:12:40,270
Reportedly now we've got
a whole bunch of empty boxes

173
00:12:40,270 --> 00:12:42,250
because we haven't put stuff in the boxes.

174
00:12:42,250 --> 00:12:46,240
So we need put values in each of these
array boxes one after the other.

175
00:12:48,420 --> 00:12:52,960
So I put one value in after another,
after another, after another.

176
00:12:52,960 --> 00:12:54,090
How do we do that kind of thing?

177
00:12:54,090 --> 00:12:56,140
How do we do one thing after another,
after another?

178
00:12:56,140 --> 00:12:59,920
It's what we've just seen, it's a.

179
00:12:59,920 --> 00:13:02,950
And this is how we might
go about doing it.

180
00:13:02,950 --> 00:13:04,670
First create a memory box.

181
00:13:06,380 --> 00:13:06,980
Give it a name.

182
00:13:06,980 --> 00:13:09,723
So creating an array then.

183
00:13:09,723 --> 00:13:10,960
Create your array itself.

184
00:13:10,960 --> 00:13:12,950
So now we've got 10 boxes in memory.

185
00:13:15,250 --> 00:13:20,849
Put a pointer, so make that posX
variable point to that memory.

186
00:13:23,460 --> 00:13:26,500
Then we need to go through and
put a value in each array box.

187
00:13:26,500 --> 00:13:27,990
That's what we're doing with a link.

188
00:13:29,310 --> 00:13:30,058
Let's look at that in more detail.

189
00:13:33,413 --> 00:13:35,840
What we need to do is start at
the first element in the array.

190
00:13:37,380 --> 00:13:41,470
As we said last week the first time
through is not one, it's zero.

191
00:13:41,470 --> 00:13:46,894
So we start off at int i=0,
set up our variable i

192
00:13:46,894 --> 00:13:50,510
stands for our position in the array.

193
00:13:51,520 --> 00:13:53,780
Set it to zero.

194
00:13:53,780 --> 00:13:57,750
We need to test to check the variable from

195
00:13:57,750 --> 00:14:00,470
what we need to make sure is it
is not more than the length.

196
00:14:00,470 --> 00:14:02,960
It hasn't gone over the way.

197
00:14:02,960 --> 00:14:09,380
So as long as i is less than
the length of the array, you're okay.

198
00:14:09,380 --> 00:14:13,820
As to be less than, less than and
equal because it starts at zero,

199
00:14:13,820 --> 00:14:19,140
the value of the array length
is on the entity length.

200
00:14:19,140 --> 00:14:22,749
This is very like what we saw last week in
the animation, then we went to stop and

201
00:14:22,749 --> 00:14:23,740
loop the animation.

202
00:14:25,060 --> 00:14:29,150
But, again, this time around
we're doing it many times.

203
00:14:31,020 --> 00:14:35,820
Rather than doing it every frame,
we're doing it all at the same time.

204
00:14:35,820 --> 00:14:38,980
So we're going until we've
reached the end of the array.

205
00:14:38,980 --> 00:14:41,745
Go one by one, add one.

206
00:14:41,745 --> 00:14:43,489
++, if you remember, means add one.

207
00:14:44,820 --> 00:14:49,727
Each frame.
And then we Put the value into

208
00:14:49,727 --> 00:14:52,520
array on the top.

209
00:14:52,520 --> 00:14:57,249
So we're kind of stepping through
each element from zero, one,

210
00:14:57,249 --> 00:15:01,550
two, three to the length of the array,
cutting up value.

211
00:15:01,550 --> 00:15:02,835
In this case a random value.

212
00:15:02,835 --> 00:15:06,773
Into that [INAUDIBLE].

213
00:15:06,773 --> 00:15:10,880
[SOUND] Recap, set up,
start, start position,

214
00:15:10,880 --> 00:15:13,899
first element through a always 0.

215
00:15:13,899 --> 00:15:18,142
Until the last element, always less than
or equal to the length of the array.

216
00:15:18,142 --> 00:15:20,549
We get that with a reigning .length.

217
00:15:20,549 --> 00:15:23,305
That's how you get
the length of the array.

218
00:15:23,305 --> 00:15:26,970
Go one by one,
always add one to put something in.

219
00:15:26,970 --> 00:15:28,700
Whenever you're dealing with arrays,

220
00:15:28,700 --> 00:15:31,830
it's really useful to do
this all over the place.

221
00:15:31,830 --> 00:15:35,310
This is a really, really common thing.

222
00:15:35,310 --> 00:15:38,622
You've got an array,
do a loop through, and the array,

223
00:15:38,622 --> 00:15:40,490
the loop always looks the same.

224
00:15:42,340 --> 00:15:47,190
Always starts at zero, goes the length
of the array as one doesn't.

225
00:15:49,610 --> 00:15:53,660
In fact, as well as putting stuff into
the array, you can do stuff to the array.

226
00:15:53,660 --> 00:16:01,830
This is an example of how you might draw a
point based on the positions in the array.

227
00:16:01,830 --> 00:16:03,550
We've got two arrays.

228
00:16:03,550 --> 00:16:04,875
And the array of x positions,

229
00:16:04,875 --> 00:16:07,740
and the array of y position will
be drawing a point each of those.

230
00:16:07,740 --> 00:16:10,600
This assumes that the size,

231
00:16:11,700 --> 00:16:14,490
the position of y is exactly
the same as the position of x.

232
00:16:15,690 --> 00:16:17,580
And it's exactly the same.

233
00:16:17,580 --> 00:16:23,169
So the first element starts at zero
until the last element, array.length.

234
00:16:24,200 --> 00:16:29,860
Go one by one, plus plus,
add one, and use element i.

235
00:16:29,860 --> 00:16:31,990
And you can use this to
draw elements in the array,

236
00:16:33,950 --> 00:16:37,290
to create elements in the array,
to do various updates.

237
00:16:37,290 --> 00:16:40,160
I could be adding something to
the position of each array.

238
00:16:40,160 --> 00:16:42,682
I could do whatever I want,
just like any other variable.

239
00:16:42,682 --> 00:16:46,826
Except this time,
because I've got lots of them in an array,

240
00:16:46,826 --> 00:16:51,528
rather than just using one line of code,
I'm using a loop to do that one

241
00:16:51,528 --> 00:16:55,373
line of code many,
many times in one time for each array.

242
00:16:55,373 --> 00:16:59,555
It's a very,
very common pattern that whenever

243
00:16:59,555 --> 00:17:02,860
you're working with arrays you use.

244
00:17:02,860 --> 00:17:05,851
It was very, very unusual that last week.

245
00:17:05,851 --> 00:17:11,596
Okay, so that's the end of this
additional programming lecture.

246
00:17:11,596 --> 00:17:16,077
And that's our last additional
programming lecture for this course.

247
00:17:16,077 --> 00:17:20,899
So I think I've covered all
the programming topics you're going to

248
00:17:20,899 --> 00:17:25,467
need for the rest of the course
You can't learn to program just by

249
00:17:25,467 --> 00:17:27,680
watching a few of my lectures.

250
00:17:27,680 --> 00:17:32,410
You have to go and do it, and I recommend
you do it by trying the exercises,

251
00:17:32,410 --> 00:17:37,710
looking at the examples we've shown
you in the rest of the course.

252
00:17:37,710 --> 00:17:41,660
Go and look at the documentation,
just try to write programs.

253
00:17:42,850 --> 00:17:43,771
That's the way to learn.

254
00:17:46,535 --> 00:17:51,269
There's a kind of myth that's,
to be a programmer you've got to have

255
00:17:51,269 --> 00:17:56,450
some special aptitude and
some people can do it, some people can't.

256
00:17:56,450 --> 00:18:01,440
They did a load of research about what.

257
00:18:01,440 --> 00:18:05,870
Which people were able to succeed at
programming in the university and

258
00:18:05,870 --> 00:18:08,510
not do that properly, and who didn't.

259
00:18:08,510 --> 00:18:12,080
The only thing that made a difference is
how much time people spent programming.

260
00:18:12,080 --> 00:18:13,390
You've really got to do it, and

261
00:18:13,390 --> 00:18:16,920
the best way to do it is find
something you're passionate about.

262
00:18:16,920 --> 00:18:20,770
I think anyone in this course are creative
people, do something creative with your

263
00:18:20,770 --> 00:18:26,240
code, and use that to motivate
yourself to go out and do it.

264
00:18:27,770 --> 00:18:31,160
If you do spend loads of time programming
and practicing and practicing and

265
00:18:31,160 --> 00:18:32,310
practicing, you will do it.

266
00:18:32,310 --> 00:18:35,380
The best way to practice is to do
something that you're really into,

267
00:18:35,380 --> 00:18:37,310
you're really passionate about.

268
00:18:39,350 --> 00:18:41,000
Something creative, something interesting.

269
00:18:41,000 --> 00:18:44,620
I hope we have provided in
the course a bunch of examples,

270
00:18:44,620 --> 00:18:48,950
a bunch of exercises which
will make you able to do that.

271
00:18:48,950 --> 00:18:53,500
Okay, thank you very much,
enjoy the rest of your course and

272
00:18:53,500 --> 00:18:54,950
good luck learning to program.