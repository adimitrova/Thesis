1
00:00:20,229 --> 00:00:21,940
[SOUND]. 
So today I'm going to introduce the 

2
00:00:21,940 --> 00:00:25,657
basics of how to write computer programs 
that draw pictures and that you can 

3
00:00:25,657 --> 00:00:30,506
interact with. 
The first thing you need to do when you 

4
00:00:30,506 --> 00:00:35,962
want to write, draw an image with a 
computer program is turn your image into 

5
00:00:35,962 --> 00:00:41,810
a set of numbers. 
Because at a certain level, numbers are 

6
00:00:41,810 --> 00:00:46,125
what computers understand. 
If you think about a computer screen, 

7
00:00:46,125 --> 00:00:50,140
it's composed of millions of pixels. 
These are picture elements. 

8
00:00:50,140 --> 00:00:52,980
These are tiny little squares, each of 
which has their own color. 

9
00:00:54,000 --> 00:00:57,120
And you can think of the screen as a 
large grid of pixels. 

10
00:00:57,120 --> 00:01:02,610
As you can see on my slides here. 
The first thing you need to know when 

11
00:01:02,610 --> 00:01:07,630
you're drawing something to screen is 
which particular pixel you're drawing to 

12
00:01:07,630 --> 00:01:11,850
or collection of pixels, and you need to 
be able to express that as a number. 

13
00:01:11,850 --> 00:01:16,850
So, how do we do that? 
The first thing we do is we have a number 

14
00:01:16,850 --> 00:01:19,770
that represents how many pixels across 
you are. 

15
00:01:19,770 --> 00:01:22,790
That's the horizontal position or what we 
call the x value. 

16
00:01:24,580 --> 00:01:27,680
We also need to know how many pixels down 
you are. 

17
00:01:27,680 --> 00:01:33,190
The vertical position or y value. 
These two numbers give us a position of a 

18
00:01:33,190 --> 00:01:36,440
pixel. 
For example 8, 6 gives us this pixel here 

19
00:01:36,440 --> 00:01:41,458
shown in red. 
So, with two numbers we can get a single 

20
00:01:41,458 --> 00:01:45,475
pixel value. 
So let's have a look at that in practical 

21
00:01:45,475 --> 00:01:49,830
program. 
So this is the program, I showed you 

22
00:01:49,830 --> 00:01:51,400
earlier. 
We've got the size. 

23
00:01:51,400 --> 00:01:55,950
We've got the background, and we can draw 
a point at a certain position. 

24
00:01:55,950 --> 00:02:06,120
Say 100, 100. 
Now you probably cant even see the point, 

25
00:02:06,120 --> 00:02:08,890
it's actually here, if you see my mouse 
position where I'm clicking. 

26
00:02:08,890 --> 00:02:12,740
Why cant you see it? 
Because pixels are tiny, let's do 

27
00:02:12,740 --> 00:02:18,120
something else before we proceed and make 
the point a little bit bigger. 

28
00:02:18,120 --> 00:02:22,810
We use this command called stroke weight. 
Which gives you the width of lines you 

29
00:02:22,810 --> 00:02:25,760
draw or the size of the points. 
Now set that to six and we're going to 

30
00:02:25,760 --> 00:02:30,260
get something a little bit bigger. 
And there we go we can clearly see a 

31
00:02:30,260 --> 00:02:34,820
single point on the screen. 
Now, creating images out of individual 

32
00:02:34,820 --> 00:02:39,970
points is going to be hard work. 
So, let's look at how to make some more 

33
00:02:39,970 --> 00:02:43,690
basic shapes. 
Okay, so here we have our pixel of 

34
00:02:43,690 --> 00:02:51,170
position 8, 6, with another point given 
by another two numbers, say, 4, 3. 

35
00:02:51,170 --> 00:02:55,920
We can draw a line. 
So, with four numbers, x and y at the 

36
00:02:55,920 --> 00:02:59,480
start position, and the x and y of the n 
position, we can draw a line. 

37
00:03:01,480 --> 00:03:06,300
Similarly with another full numbers we 
can go further and draw a rectangle, and 

38
00:03:06,300 --> 00:03:10,650
the only difference being that the first 
two positions are the top left position 

39
00:03:10,650 --> 00:03:14,310
of the rectangle and the other two 
numbers are not a position on the 

40
00:03:14,310 --> 00:03:18,430
rectangle, they are the height and width. 
So let's have another look at trying to 

41
00:03:18,430 --> 00:03:22,580
draw more complex... 
If, instead here, of point, we use the 

42
00:03:22,580 --> 00:03:29,208
command line, we can draw a line to 200, 
300 and see what that looks like. 

43
00:03:29,208 --> 00:03:34,180
There we have a line. 
Similarly, the rect command gives us a 

44
00:03:34,180 --> 00:03:44,090
rectangle. 
And here instead of a, the end position 

45
00:03:44,090 --> 00:03:47,140
of the line for the second two points, 
it's the height and width of the 

46
00:03:47,140 --> 00:03:49,790
rectangle. 
So I'm making a square, which has equal 

47
00:03:49,790 --> 00:03:51,890
height and width. 
So there we are. 

48
00:03:51,890 --> 00:03:54,240
Let's have a quick look at what I've just 
done. 

49
00:03:55,810 --> 00:03:58,800
So here we are, these are two commands 
I've written. 

50
00:03:58,800 --> 00:04:01,230
Size commands. 
What is the size command? 

51
00:04:01,230 --> 00:04:04,810
I showed that in my introduction lecture 
to processing, but I didn't really talk 

52
00:04:04,810 --> 00:04:07,150
about it. 
Well, in size, you're passing in 2 

53
00:04:07,150 --> 00:04:10,850
numbers. 
The first number is the x, is the width, 

54
00:04:10,850 --> 00:04:16,029
of the processing window you're creating. 
The second number is the height, the y 

55
00:04:16,029 --> 00:04:19,880
value. 
Similarly with a line The first number is 

56
00:04:19,880 --> 00:04:24,510
the x position, the horizontal position 
is the start point. 

57
00:04:24,510 --> 00:04:28,940
Then the hot vertical position, the y 
position is, is the start point, and then 

58
00:04:28,940 --> 00:04:33,050
the x and y positions of the end point of 
the line. 

59
00:04:33,050 --> 00:04:36,320
So very simple, with four numbers, you 
can draw a line. 

60
00:04:36,320 --> 00:04:40,620
And from there, you can get Many more 
complex shapes. 

61
00:04:40,620 --> 00:04:42,890
The next thing you might want to look at 
is colors. 

62
00:04:42,890 --> 00:04:44,990
So up to now we've been drawing black 
lines. 

63
00:04:44,990 --> 00:04:49,660
How do we represent color as numbers? 
Well, if we start with black and white. 

64
00:04:50,750 --> 00:04:55,450
The color coming off a computer monitor 
is really the amount of light that is 

65
00:04:55,450 --> 00:04:58,310
being emitted by each pixel on the 
screen. 

66
00:04:58,310 --> 00:05:07,980
So we can think of the brightness of the 
of a particular pixel, as being a value 

67
00:05:07,980 --> 00:05:12,190
that we can measure. 
and we can measure that brightness at 

68
00:05:12,190 --> 00:05:18,140
some maximum value, which is white and 0, 
which is no color coming off, which is 

69
00:05:18,140 --> 00:05:21,210
black. 
And if you look here, 0 is black. 

70
00:05:21,210 --> 00:05:24,591
And then we can use the value 255 as 
why?. 

71
00:05:24,591 --> 00:05:27,610
Why 255? 
Well, that happens to be the largest 

72
00:05:27,610 --> 00:05:33,320
value you can fit in 8 bits. 
So 8 ones and 0s on, in computer memory. 

73
00:05:34,620 --> 00:05:38,820
Any value in between those two will give 
you gray lighter, or darker gray. 

74
00:05:38,820 --> 00:05:43,390
So you can have shay, any shades or 
variations of gray value between those 

75
00:05:43,390 --> 00:05:48,270
two values. 
Fine, that's brightness, but what about 

76
00:05:48,270 --> 00:05:52,380
real color? 
Well, when to talk about colors, we need 

77
00:05:52,380 --> 00:05:54,370
to think about primary colors, and if 
you. 

78
00:05:55,380 --> 00:05:59,260
At a very young age at school, you will 
have learned that you can make any color 

79
00:05:59,260 --> 00:06:03,160
by mixing three colors of paint together. 
We're not actually working with paint. 

80
00:06:03,160 --> 00:06:06,030
We're working with light, and that's 
slightly different. 

81
00:06:06,030 --> 00:06:11,080
The primary colors are different, but the 
concept is same, and the primary colors 

82
00:06:11,080 --> 00:06:15,740
we have are green, blue and red. 
And any color can be made up with these 

83
00:06:15,740 --> 00:06:18,720
three, three basic colors. 
Why is that? 

84
00:06:18,720 --> 00:06:22,430
It's not a fundamental property of light, 
but it's a fundamental property of our 

85
00:06:22,430 --> 00:06:24,490
eye. 
we have three types of receptor in our 

86
00:06:24,490 --> 00:06:28,330
eye, that are sensitive to green, red, 
and blue parts of the spectrum. 

87
00:06:28,330 --> 00:06:32,950
And, if the light comes between those 
colors, it will trigger. 

88
00:06:32,950 --> 00:06:38,430
a mixture of say, the red and green 
components receptors on our eye. 

89
00:06:38,430 --> 00:06:43,980
Therefore we can fool our eye by, instead 
of having a color that's between green 

90
00:06:43,980 --> 00:06:48,440
and red, sending both green and red at 
the same time will look like a mix of 

91
00:06:48,440 --> 00:06:53,760
green and red, which is yellow. 
Similarly, green and blue is cyan Red and 

92
00:06:53,760 --> 00:06:58,095
blue is magenta, and any other color can 
be mixed from those basic primary colors. 

93
00:06:58,095 --> 00:07:03,750
That's great from a computer graphics 
point of view, because we only need three 

94
00:07:03,750 --> 00:07:09,150
numbers to represent any color, a red 
value, a green value and a blue value. 

95
00:07:09,150 --> 00:07:11,860
So how do we use colors? 
Well, there's a number of ways in which 

96
00:07:11,860 --> 00:07:15,030
you can use colors. 
If we look here we've got a basic 

97
00:07:15,030 --> 00:07:19,350
rectangle and what can we change about 
that rectangle? 

98
00:07:19,350 --> 00:07:22,470
Well, the first that we can change about 
the rectangle is the border of the 

99
00:07:22,470 --> 00:07:28,380
rectangle and we use the stroke commands. 
Stroke means the color of the line that 

100
00:07:28,380 --> 00:07:33,660
we use to draw lines on screen. 
We can also change the center of the 

101
00:07:33,660 --> 00:07:40,820
rectangle using the fill command. 
Fill is the color that is used to draw 

102
00:07:40,820 --> 00:07:44,130
the center of any shape, the middle of 
any shape, that we're drawing on screen. 

103
00:07:45,360 --> 00:07:48,370
We've already seen the background 
command, and I'll show you that again 

104
00:07:48,370 --> 00:07:51,870
which has the, changes the background 
color of the screen. 

105
00:07:51,870 --> 00:07:57,420
The last command that I've already shown 
you that is connected is stroke weight 

106
00:07:57,420 --> 00:08:01,260
that doesn't specify color, but it 
specifies the width of any lines you're 

107
00:08:01,260 --> 00:08:04,510
drawing on the screen. 
So let's have a look at that in code. 

108
00:08:04,510 --> 00:08:10,293
So we've already used background, and we 
can see here that we've used backgrounds 

109
00:08:10,293 --> 00:08:16,860
25500, so that's 255 red, 0 green, 0 
blue. 

110
00:08:16,860 --> 00:08:19,720
And as we see, that came out as a bright 
red. 

111
00:08:20,760 --> 00:08:29,620
If we were to change that to 255 zero, 
150, we would mix a little blue in and 

112
00:08:29,620 --> 00:08:32,060
we'd get a different colot. 
Sort of more purpley color. 

113
00:08:33,690 --> 00:08:38,550
Let's try changing these, the colors of 
this rectangle, so if we use stroke, we 

114
00:08:38,550 --> 00:08:44,190
can set the color of the border of the 
rectangle, let's set it to a bright 

115
00:08:44,190 --> 00:08:57,660
green. 
Sorry, just made a mistake there. 

116
00:08:59,150 --> 00:09:02,630
And we can use fill to set the sensor 
color. 

117
00:09:02,630 --> 00:09:08,780
maybe we can use a light blue. 
We mix in light blue by having quite a 

118
00:09:08,780 --> 00:09:13,400
lot of red and green. 
So it's quite bright. 

119
00:09:13,400 --> 00:09:15,630
There's a lot of whiteness in there, but 
more blue. 

120
00:09:18,990 --> 00:09:22,870
And there we go quite a light blue, we 
could make it bluer by turning down the 

121
00:09:22,870 --> 00:09:24,970
red and green. 
So that's, we've got some quite garish 

122
00:09:24,970 --> 00:09:28,630
colors here. 
I wouldn't actually make an application 

123
00:09:28,630 --> 00:09:32,120
with these colors, but it shows you sort 
of how you can mix, mix some basic 

124
00:09:32,120 --> 00:09:34,820
colors. 
The one last thing I want to show you is 

125
00:09:34,820 --> 00:09:40,490
that once you'll called stroke and fill, 
those values continue for everything else 

126
00:09:40,490 --> 00:09:49,598
you draw, so if I draw another rectangle 
eh, then they will be the same colors. 

127
00:09:49,598 --> 00:09:56,380
So by putting in a second fill command, I 
can change the color of my second vector. 

128
00:10:11,260 --> 00:10:15,680
Okay, there's one last thing I'd like to 
say about color, which is to talk about 

129
00:10:15,680 --> 00:10:20,190
transparency. 
Sometimes when you're specifying colors 

130
00:10:20,190 --> 00:10:23,140
as well as red, green, and blue, you'll 
get a fourth number. 

131
00:10:23,140 --> 00:10:25,250
This is the opacity. 
Often called alpha. 

132
00:10:26,270 --> 00:10:29,500
Opacity controls how transparent 
something is. 

133
00:10:29,500 --> 00:10:31,660
It's actually the opposite of 
transparency. 

134
00:10:31,660 --> 00:10:37,760
So when The opacity is 255, it means it's 
not transparent at all, and when it's 0, 

135
00:10:37,760 --> 00:10:42,170
it's completely transparent. 
So, to get colors which are partially 

136
00:10:42,170 --> 00:10:46,580
transparent, you need an alpha value 
between 0 and 255. 

137
00:10:46,580 --> 00:10:52,884
So, for example, 255, 0, 0, 128 is half 
transparent red. 

138
00:10:52,884 --> 00:11:01,571
And we can see this in code here, by 
setting the alpha of this rectangle to 

139
00:11:01,571 --> 00:11:08,600
128, and move it slightly so that it 
overlaps the original, the original 

140
00:11:08,600 --> 00:11:13,120
rectangle. 
we don't want it to completely overlap. 

141
00:11:17,790 --> 00:11:20,830
And you can see it is partially 
transparent. 

142
00:11:20,830 --> 00:11:24,290
Its color is affecting what's beneath it, 
but not completely. 

143
00:11:25,790 --> 00:11:29,260
And Mick will show you some nice examples 
of how you can use transparency to get 

144
00:11:29,260 --> 00:11:33,210
some really nice visual effects. 
So, with what I've shown you so far, you 

145
00:11:33,210 --> 00:11:38,030
can make some nice drawings. 
With computer codes, and that's cool as 

146
00:11:38,030 --> 00:11:41,040
far as it goes. 
But it's not really a computer program 

147
00:11:41,040 --> 00:11:44,170
yet because all it's doing is drawing a 
picture. 

148
00:11:44,170 --> 00:11:46,980
When you think of a computer program you 
want to interact with it. 

149
00:11:46,980 --> 00:11:51,560
It has to do things independently. 
So if we look at what our program is 

150
00:11:51,560 --> 00:11:55,550
doing up to now. 
We're pressing play, it's running its 

151
00:11:55,550 --> 00:11:58,190
code. 
And when it finish, it will draw a 

152
00:11:58,190 --> 00:12:02,180
picture and we can look at it. 
But that's not how we, you complete a 

153
00:12:02,180 --> 00:12:06,600
program 1, we want to be able to interact 
with that code. 

154
00:12:06,600 --> 00:12:11,540
so we can do this by splitting a code 
into news and number bit. 

155
00:12:11,540 --> 00:12:14,310
First off, we we have some stuff that 
should never change. 

156
00:12:14,310 --> 00:12:16,420
For example, the size of the screen, the 
background color. 

157
00:12:16,420 --> 00:12:20,190
They should always stay. 
[INAUDIBLE] And that's what we call the 

158
00:12:20,190 --> 00:12:23,580
setup part of our program. 
And then there's stuff that should 

159
00:12:23,580 --> 00:12:26,780
change, so for example, the things that 
we're drawing, like the lines, they 

160
00:12:26,780 --> 00:12:28,570
should move around based on what we're 
doing. 

161
00:12:29,660 --> 00:12:34,010
That's the drawing part of our program. 
And we put them in two different blocks 

162
00:12:34,010 --> 00:12:37,800
of code. 
The first one we put in a block of code 

163
00:12:37,800 --> 00:12:41,380
called setup I won't get into full 
details of what everything means here. 

164
00:12:41,380 --> 00:12:43,970
If you're familiar with Java, you will 
understand it. 

165
00:12:43,970 --> 00:12:45,840
If not, look at some of my additional 
lectures. 

166
00:12:45,840 --> 00:12:50,820
But void setup is what's called a 
function, and that contains all the code 

167
00:12:50,820 --> 00:12:54,395
that we do at the beginning of the 
program and it happens only once. 

168
00:12:54,395 --> 00:12:58,220
The important thing to note here are 
these curly brackets. 

169
00:12:58,220 --> 00:13:01,830
They say they tell you where the start 
and end of the setup code is. 

170
00:13:03,150 --> 00:13:10,070
Similarly, we can have functions which 
happen times the response to certain 

171
00:13:10,070 --> 00:13:12,506
events. 
So for example, I can have alpha function 

172
00:13:12,506 --> 00:13:16,650
mouseDragged. 
What mouseDragged does is that it happens 

173
00:13:16,650 --> 00:13:20,574
every time you move the mouse while the 
mouse button is held hold down. 

174
00:13:20,574 --> 00:13:26,811
A very useful function for interaction. 
So what happens now is I move the mouse, 

175
00:13:26,811 --> 00:13:33,370
I give some input, mouse drag responds 
and I play and then it paints a picture 

176
00:13:33,370 --> 00:13:38,220
and I can see that. 
That's fine, but if you look at the code 

177
00:13:38,220 --> 00:13:42,080
as it is now, every time I call mouse 
dragged, it's drawing the same line 

178
00:13:42,080 --> 00:13:44,910
because the numbers in there aren't 
changing. 

179
00:13:44,910 --> 00:13:51,580
I need to put in different numbers to my 
line in order to change the interaction 

180
00:13:51,580 --> 00:13:55,010
I'm getting and make it truly 
interactive, to make it respond to my 

181
00:13:55,010 --> 00:13:59,210
mouse movements. 
And this is how I can do it. 

182
00:13:59,210 --> 00:14:04,178
Rather than putting a number in there, 
I'm putting in The value mouse x mouse y 

183
00:14:04,178 --> 00:14:08,580
pmouse x pmouse y. 
Now what are these things. 

184
00:14:08,580 --> 00:14:13,450
Well these are variables their names 
stand for numbers if you're not familiar 

185
00:14:13,450 --> 00:14:15,610
with the term variable. 
But if you're not then you should look at 

186
00:14:15,610 --> 00:14:20,790
my additional lectures. 
And mouse x and mouse y are automatically 

187
00:14:20,790 --> 00:14:25,380
set to the current position of the mouse. 
So this is your mouse position as an x 

188
00:14:25,380 --> 00:14:29,200
and y value. 
pmouse and X and pmouseY are useful 

189
00:14:29,200 --> 00:14:31,420
values. 
They give you the previous position of 

190
00:14:31,420 --> 00:14:35,840
the mouse and that's what enables us to 
do some, some smooth drawing. 

191
00:14:35,840 --> 00:14:39,680
I'll show you that in a minute. 
So let's look at some code that does 

192
00:14:39,680 --> 00:14:44,690
this. 
So this is about the most basic 

193
00:14:44,690 --> 00:14:47,470
interactive code you can get in 
processing. 

194
00:14:47,470 --> 00:14:52,790
We have a setup function that sets the 
size of the screen and the background 

195
00:14:52,790 --> 00:14:58,150
color, and a mouse drag function that 
draws a point that the position is the 

196
00:14:58,150 --> 00:15:00,699
mouse. 
So let's see what that does. 

197
00:15:02,300 --> 00:15:10,810
We've got a nice little drawing. 
That's nice, but, when I draw, I'd like 

198
00:15:10,810 --> 00:15:15,110
to actually sort of draw continuous 
lines, and we can do that with the code I 

199
00:15:15,110 --> 00:15:20,810
just showed you, because we can draw a 
line from the previous mouse position to 

200
00:15:20,810 --> 00:15:30,600
the current mouse position. 
[NOISE] And there we are, some nice 

201
00:15:30,600 --> 00:15:35,400
continuous lines drawn. 
Now, we've got a nice bit of interaction 

202
00:15:35,400 --> 00:15:41,480
but it doesn't look great, there's a lot 
we can do with this aesthetically to 

203
00:15:41,480 --> 00:15:44,995
make. 
In a few minutes we'll talk to you about 

204
00:15:44,995 --> 00:15:47,920
that. 
but for now, that's most of want to say, 

205
00:15:47,920 --> 00:15:50,730
what, what I'm going to say. 
I just want to show you one little trick. 

206
00:15:50,730 --> 00:15:55,932
about the background function. 
So at the moment it's not. 

207
00:15:55,932 --> 00:16:01,440
Every time I draw, it's drawing on top of 
what I've already drawn. 

208
00:16:01,440 --> 00:16:04,700
And sometimes that's what we want. 
Sometimes what, that's what we don't. 

209
00:16:04,700 --> 00:16:08,800
not what we want. 
If I move the function background into 

210
00:16:08,800 --> 00:16:13,910
mouse dragged as well as setting the 
background color what background does is 

211
00:16:13,910 --> 00:16:17,390
it clears the screen. 
So if I move it into mouse dragged it's, 

212
00:16:20,370 --> 00:16:24,600
it's clearing the screen so I've no 
longer accumulated all the drawings I've 

213
00:16:24,600 --> 00:16:27,710
ever done. 
And I just get this tiny little try off 

214
00:16:27,710 --> 00:16:31,230
the mouse. 
Maybe not exactly what we want now. 

215
00:16:31,230 --> 00:16:34,340
But there's lots of situations where it 
is exactly what we want. 

216
00:16:34,340 --> 00:16:38,930
And next week we'll show you that in 
detail. 

217
00:16:38,930 --> 00:16:44,260
So, so far what we've got is the ability 
to draw some basic energies to screen. 

218
00:16:44,260 --> 00:16:49,960
Some basic shapes and interact with that 
by responding to mouse position. 

219
00:16:49,960 --> 00:16:54,210
There's a lot more we, you can do while 
you're drawing, and I would recommend 

220
00:16:54,210 --> 00:16:57,620
that you look at the the processing 
website, processing.org. 

221
00:16:57,620 --> 00:17:03,530
There's a link to it from the from our 
our call server site, and particularly 

222
00:17:03,530 --> 00:17:07,310
look at the processing reference and look 
at some of the examples for shapes. 

223
00:17:07,310 --> 00:17:11,480
A good example is to look at the ellipse 
command So far we've looked at lines, and 

224
00:17:11,480 --> 00:17:14,170
rectangles. 
Ellipse shows you how to draw ellipses, 

225
00:17:14,170 --> 00:17:20,042
and circles, and, and with that, that's 
already part of your repertoire, but it 

226
00:17:20,042 --> 00:17:23,830
will already, it will also start you 
learning how to use the reference for, 

227
00:17:23,830 --> 00:17:30,490
for processing, and pick up, and use new 
commands that will enable you to do more 

228
00:17:30,490 --> 00:17:35,490
complex drawing. 
So I'll leave you here and Matthew will 

229
00:17:35,490 --> 00:17:42,050
talk a bit about how to do audio 
processing in processing and then Mick 

230
00:17:42,050 --> 00:17:50,854
will show you more complex examples using 
the basis, basic code that we've learned 

231
00:17:50,854 --> 00:17:55,094
here... 
[MUSIC] 