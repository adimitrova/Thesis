Welcome to the second lecture on 
introductory programming for those of you doing the course we need for programming. 
So in this session I'd like to talk about variables, but before we start let's have 
an example. So let's write a simple processing 
program, Correct the size of the screen, set as 
background, which I might if you haven't looked at our main videos yet, you'll 
find out why number 255 is right in there. 
And let's draw points, let's set stroke rate say see the point and then draw, 
draw a point, position 100, 100 say. That's a fairly basic processing program. 
And now we gave, it's just a point. Where ever you want to draw a point in 
the middle of the screen. Well, we can do something like this. 
The middle of the screen is half the width and half the height, and we can do 
width divided by 2, height divided by 2. And there we go to the point in the 
middle of the screen. Now, what exactly have I done there? 
So we're quite used to, where the last session we saw, we saw how we could call 
a command like point, using numbers. But now we've used that's something 
different we've called point with width divided by 2 height divided by 2. 
And so what is width? It's a, it, behind the scenes, it's a 
number, a number that gives us the width of the screen. 
And in the case of the example, it was 640. 
But here it's a name that stands for that number, and I can use that name in the 
program Instead of using a number and I can do calculations with it I've divided 
by 2. That slash sign as we'll com to later is 
is division in the program, because we don't have an easy like divide symbol in 
the, in the in the keyboard. So That's a new element. 
And it's something that's called a variable. 
A variable is essentially a name that can stand for a number. 
It's called a variable because not only can it stand for a number, it can change 
the number it stands for. It can change. 
so what does that mean? And what if we want to create own own 
variable? And we'll see in future examples, it's 
very useful to have a, a name by which to refer to a particular number. 
So, this is how we create a variable, and I'll go through this in detail. 
If we're creating a known variable, it will look something like this. 
we're correcting a variable that is a number that starts off equal to 0. 
We first, we need to go back to our example of what a computer is, you can 
think about what really is happening. So this is our computer, it's got a 
processor and a memory, variables, astute memory. 
And what happens? What a variable is, is a little box in 
memory. And, inside that little box of memory you 
can put memory or different things. The first part of the of this command to, 
create a variable, int We'll come back to exactly what that means but it's 
basically saying this is a number. So create new box big enough to hold the 
number. Next thing we do is give it a name. 
Call is pos X, for example. That's just the name of the value. 
Call it anything, alright. Call it John, call it Mark. 
In this example, I'm representing the X position of something. 
So I'm going to call it posX. And then we set it equal to a, to 0. 
That means we're putting in the number 0 inside our little box, in memory 
[INAUDIBLE]. So what we do in a case of variable is, a 
variable is basically a box in memory. It has a name. 
And then can have values in. those values can be numbers They can be 
other things. So let's go back to what we were talking 
about in our. Previous lecture about how memory is 
composed of a whole lot of 1s and 0s. And think about 1s and 0s, what we said 
is that we can create lots of different things after these 1s and 0s, interpret 
them in different ways. So we could have basically true, false, 
very simple one bit. There is [INAUDIBLE] one bit in reality 
but think of it as 1 bit. You can have numbers as we saw we can 
have whole numbers, factional numbers, we can have text, we can have really complex 
things like images and audio wave forms. And each of these we can have variables 
to represent any of these things. But the key thing is that they take 
different amounts of memory. So a number, a whole number is actually 
[INAUDIBLE] different need from a fractional number. 
And both of those things need a lot less memory than text and certainly than an, 
than an image. So when we're creating that little box in 
memory for a variable, we need to know roughly how big it is and what kind of 
thing we're going to put in it. And for that reason, we give names to all 
these different types of data. And that this we call the different 
types, types and There's a tight Boolean, which can be true or false, and that's 
it. A tight int, that means integer, which is 
a mathematical word for whole number. Float, a floating point number. 
Means a fractional number, sort of decimal number. 
the reason it's called flight is slightly complicated, but it's due to the 
representation of the number in the computer. 
String is a word for a text, so it's this little string of characters. 
And then there are complex types of PImage and AudioBuffer that are specific 
to processing [UNKNOWN] Not, not yet. Come back to those in a minute. 
We've also got a special type void. Which we will come back to in a fu, 
future lecture, which represents nothing. Come back to why we might want trips in 
life. So that's, comes back to our little int 
in there. That int And that posX represents the 
fact that posX is a number. A whole number. 
So we can we know exactly what the computer knows, exactly what kind of 
thing you want to put in. That's why we can put zero in there, we 
can put a word like thread. We can in turn say float instead of int 
and that will give us a factual number or string if you want to put text in there. 
So, let's look at something else we might do with the variable, setting its value. 
So this is saying that our variable when setting in X position. 
Becomes equal to a number 34. Now, let's just go back. 
Becomes equal to, that's an important thing. 
Equal, those equal, that equal sign's, in programming is what's called an 
assignment operator. Takes one value on the left side of it, 
and sets it to be the new value. So it changes the value of posX. 
It's not saying that they're equal to begin with, but once you've done posX 
equals 34, after that posX is now 34. That equal sign is how you change the 
values. You can set a variable to equal to 
another variable. So pos X is now going to have be equal to 
the width of the screen. Or a function, certain functions do 
calculations and. Can give you back numbers, or other 
values. Up to now, the functions we've seen just 
do stuff like drawing. But sometimes we have a function like 
random, a very useful function, which generates a random number. 
So this call is going to give us a random number between zero and 100. 
But he's going to set posX to be equal to that random number. 
So after that posX is a random value. And we'll see in the main lecture how we 
can use a number of these functions to do calculations and then give us back a 
value that we put in the variable. So we're giving numbers to, this random 
function, we're giving it zero and a 100. That controls How it works. 
Basically, for say, 0 and 100, the random, it will give us a number between 
0 and 100. If I say 0 and 10, it'll give us a number 
between 0 and 10, and then it gives us back a number if you present posX to 
there. Some functions return And return strings, 
texts, Boolean variable values, images, it can return any kind of type, but 
something that we, can be put in a variable. 
We can also do calculations and put the results in a variable. 
So we can take a value, which in this case. 
It is another there. For mouseX. 
MouseX is a variable which represents the position of the mouse. 
The X position of the mouse. And we add something to it. 
We add 1. That gives us a new number. 
Whatever mouse X is plus 1 set for mouse X. 
It's 100. It's 101 If you can do basic math. 
And we take that value and put it in posX. 
. and we can do something else. 
We can take the value and change it based on it's own old value. 
So we can take posX, make it equal to. Itself but the old value of posX plus 1. 
So if posX is 30, we add 1 to 31 and set posX to that. 
That's a way of changing a variable as we use it. 
in in future lessons we'll see how we can use that to animate things. 
By every time changing the value of the variable, if that position, variable is a 
position or something similar, we can make things move around. 
This is such a common thing to do, there's this little shorthand for it. 
PosX plus equals one means posX equals posX plus 1. 
It means exactly the same thing. It's a way of adding a value to itself. 
posX plus, plus is an even shorter shorthand when the, you know the value of 
adding is 1. posX plus, plus just means add one. 
PosX. PosX plus equals means add a number to 
it. All these three expressions are showing 
you, these three lines of code, are the exact same thing. 
But in the first two, I could change the value of 1 and add 2 instead. 
The last one is always been adding 1. So, let's look at some of the, things you 
can do with calculations. You can do some basic maths. 
We've seen how to add; you use the plus sign. 
Straightforwardly, to add two things you'd do plus equals. 
If you want to add something to a variable And plus, plus if you want to 
add one to a variable, could do exactly the same with subtract, minus signs, take 
two numbers and subtract them, minus equals subtract number from a variable, 
minus, minus, subtract one. Star is asterisk, is used for 
multiplication, because there's no sort of multiply sign on the standard 
keyboard. And we can do star equals to multiply the 
value of err by something that no equivalent to plus, plus. 
The slash is the divide symbol, star's the multiply. 
So those are some basic math, there're more operations. 
That's it for now. another thing you need to think about in 
terms of calculations is brackets. If you want to do multiple calculations 
on one line and combine them together, you can put brackets 'round them as you 
would in standard maths to constrain which happens first. 
So, this stuff in the inner brackets is done first. 
You calculate the first brackets, and then use the results of that calculation 
in the outer brackets. So you'll, what's happening here is 
you're multiplying x by 3 and you're adding 1 to the result. 
Okay, so let's get back to various types. We've talked a lot about Variables now 
and how we can have different types of boolean, int, float, string. 
it mostly talked about numbers because that's mostly what we're going to be 
using in graphics. In the future we will talk about boolean. 
But now I want to talk basically about things like PImage and AudioPlayer, 
because they're actually much more complex than something like a number. 
Obviously a, a whole audio file is more complex than a number, but even the way 
the variable works is slightly different. So this week Matthew's going to talk 
about AudioPlayer; let's have a look at it. 
So just as we did int pause x, we get the type of the variable and the name. 
Here we give the title variable audio player, and the name, is player. 
You can give it any name you like. if it's a high hat we can call it high 
hat, if it's a violin sound we can call it violin. 
We can call it anything we like. so that's essentially the same thing. 
and Minim is another aud type we use in audio. 
Matthew will talk about exactly what all that's used for, but here is how we 
create Minim objects. So, just as we set the value. 
Of our int variable to 0. You can set the value of an object, and 
so I didn't use the term, but these complex types are called objects. 
Our object's called Minim. Now, we need an extra bit in here, 
because there's no easy way of saying Right? 
We can just write three, if you want a new variable, a new number. 
But there's no quite so easy way of doing that. 
We need a new command called new, and what new does is create a new object. 
And it does it by calling a function. Called a constructor. 
This is like a command but it has the same name as the type, as the object. 
And it's used to create any value of those objects. 
They're new in the constructor. By the name of the type combine together 
to create a new value of the objects. And you can [INAUDIBLE] pass parameters 
in just like any other command. Matthew will explain this, but this 
essentially means, the, it's something that wraps into programming, you don't 
have to worry about it too much. But it's an example of passing something 
in, so that can be used in creating an object. 
So, In an audio file, you might pass in the file name. 
In an image, you might pass in how, the width and height of the image. 
There's lots of things you could pass. And then there's another important thing, 
big difference between types like numbers and objects. 
A number Is just a number you can do some calculations on. 
In a, in an object, as well as having its value, you can call a function on that 
object. What that means is, if you're calling a 
function play, but that's not a generic function, that doesn't apply everywhere, 
you know, you can't just play. You're playing a particular audio file. 
'Kay, meaning to play an audio file. And that's why we do this little bit of 
style of code where we're doing player.play. 
Recalling play On a specific object. [INAUDIBLE] specific audio file, not 
general audio file just one particular item. 
And we're using this little dot. What a dot does is links the function 
you're calling to things have been called. 
So you do, player.play Cause of function one specific object. 
A very useful capability. So this is something that Mathew's 
going to use and that Nick and I are going to use in the examples a bit later 
in this lesson. So that was a very brief introduction to 
variables. You'll see a lot of examples in the main 
lessons. And and hopefully that will help you 
understand these concepts that we build on programming. 
If you need some more help we've provided a bunch of links relating to programming 
on the main site.