this
is
the
first
of
our
lectures
for
people
who
are
doing
this
course
but
are
new
to
programming
.
if
you
've
got
no
programming
experience
you
're
probably
going
to
have
to
work
a
little
bit
harder
in
this
course
.
it
will
be
a
little
bit
more
challenging
though
we
will
guide
you
through
it
,
and
this
,
these
lectures
will
explain
the
major
concepts
.
and
we
're
also
going
to
put
up
a
bunch
of
other
materials
that
can
support
you
.
before
we
talk
about
programming
we
need
to
think
a
little
bit
about
what
a
computer
is
,
in
order
to
understand
how
to
program
.
this
is
a
computer
,
the
inside
of
a
pc
,
i
,
i
just
got
off
flickr
.
and
you
can
see
it
's
messy
.
there
's
lots
of
microchips
,
there
's
sort
of
motherboards
,
wires
everywhere
.
but
actually
we
do
n't
really
,
to
program
,
we
do
n't
need
to
know
what
a
computer
is
in
all
it
's
complexity
.
actually
all
we
need
to
know
is
some
very
simple
things
,
and
and
really
we
just
need
to
know
two
things
that
make
up
a
computer
.
this
is
the
processor
.
it
's
not
actually
a
processor
,
it
's
a
fan
,
but
underneath
that
fan
is
the
processor
.
the
processor
is
the
thing
that
does
calculations
.
it
does
actions
.
it
really
is
the
core
computer
.
and
the
other
main
that
we
need
to
know
about
is
memory
.
this
is
where
we
store
data
.
and
anything
that
is
,
you
know
,
any
form
of
data
that
we
are
processing
in
the
computer
must
go
through
memory
.
and
really
what
a
computer
does
and
what
a
computer
program
does
is
.
the
processor
does
actions
on
memory
,
memory
is
composed
of
very
very
simple
output
,
so
it
's
,
what
we
call
bits
.
each
bit
can
,
is
like
a
switch
.
it
can
be
on
or
off
.
and
we
normally
represent
that
as
a
zero
and
a
one
.
so
,
really
memory
is
along
series
.
and
the
processor
,
what
that
does
is
very
simple
operations
on
memory
.
it
can
add
two
elements
of
memory
together
,
multiply
those
mathematical
operations
,
very
simple
ones
,
and
it
can
move
things
around
in
memory
.
and
that
's
it
's
a
little
bit
more
compelx
than
that
,
but
really
not
much
at
all
,
it
's
,
you
know
,
what
,
it
's
only
these
very
simple
things
.
so
,
why
are
computers
so
powerful
,
if
all
they
can
do
is
,
is
,
move
around
and
add
together
zeroes
and
ones
.
well
,
the
reason
is
,
because
memory
is
very
,
very
big
.
so
it
's
measured
in
gigabytes
,
that
's
billions
,
american
billions
of
,
of
bytes
.
a
byte
is
eight
of
these
bits
.
so
there
's
a
lot
similarly
processes
summations
in
gigahurtz
which
essentially
billions
of
these
very
simple
instructions
per
second
.
so
a
computer
program
is
really
about
doing
a
simple
things
.
but
very
,
very
fast
and
lots
.
luckily
we
do
n't
have
to
think
in
terms
of
the
very
,
very
simple
operations
that
can
,
that
processors
we
can
do
when
we
want
the
computer
to
programs
.
we
turn
them
into
what
we
call
high
level
languages
,
that
have
,
that
combine
lot
's
and
lot
's
of
these
,
very
simple
operations
into
bigger
ones
.
this
still
may
not
look
very
readable
to
someone
that
's
new
in
programming
.
but
you
can
see
that
,
at
least
we
've
got
much
higher
level
concepts
like
backgrounds
,
in
the
background
color
of
the
screen
,
rotating
things
around
,
drawing
images
,
stuff
that
's
,
that
's
at
least
a
bit
more
in
the
,
the
realm
of
what
we
think
about
as
humans
.
similarly
those
,
those
ones
and
zeroes
in
memory
,
we
can
interpret
them
in
many
,
many
ways
to
create
many
complex
forms
of
data
.
a
single
bit
ca
n't
tell
us
much
,
but
it
can
tell
us
if
something
is
true
or
false
.
it
can
be
this
kind
of
binary
division
.
but
normally
you
would
combine
bits
together
into
more
complex
things
,
the
basic
level
with
calculating
numbers
.
whole
numbers
or
fractional
numbers
,
we
actually
leaps
rather
differently
i
'll
come
back
to
that
in
a
later
lecture
.
text
,
and
then
much
more
complicated
things
like
images
or
sound
waves
.
all
of
these
things
are
essentially
longer
and
longer
strings
of
ones
and
zeros
and
this
course
will
cover
a
little
bit
about
how
the
last
two
represent
when
the
main
merges
.
okay
so
let
's
try
writing
a
simple
program
.
this
is
processing
.
it
's
a
piece
of
software
.
it
's
a
program
language
and
also
it
's
a
piece
of
software
for
writing
programs
in
that
language
.
we
have
this
area
here
where
we
can
type
the
text
of
our
program
.
but
let
's
start
by
playing
with
,
pressing
the
play
button
to
run
our
program
.
and
here
we
are
.
we
've
got
a
program
,
it
's
a
very
small
window
,
it
does
n't
do
very
much
,
but
that
's
not
really
surprising
.
we
have
n't
actually
written
any
program
text
.
at
least
even
with
writing
nothing
there
,
we
do
get
a
program
.
now
i
can
close
my
program
in
the
normal
way
with
the
close
button
,
or
i
can
also
press
stop
to
stop
it
running
,
and
then
we
can
actually
try
writing
something
.
okay
.
i
'm
going
to
first
write
this
command
size
640x480
.
and
let
's
see
what
that
does
.
there
we
go
,
we
've
got
a
much
bigger
window
.
and
i
've
,
what
has
happened
here
.
well
i
've
called
a
command
size
and
that
,
what
that
does
,
size
is
the
named
command
.
and
it
changes
the
size
of
the
screen
.
and
you
need
two
numbers
in
order
to
change
the
size
of
the
screen
.
and
one
of
these
numbers
is
the
width
,
640
,
the
other
is
the
height
,
480.
and
these
numbers
are
put
in
brackets
,
so
every
time
you
're
calling
command
you
need
brackets
.
there
are
commands
which
do
n't
need
,
any
,
numbers
.
what
we
call
parameters
,
parsed
in
.
but
we
still
need
brackets
.
empty
ones
,
which
show
that
we
're
not
parsing
anything
in
.
the
commands
are
separated
by
commas
.
and
at
the
end
of
everything
we
have
a
semicolon
.
now
the
first
thing
to
really
notice
when
we
're
writing
new
programs
when
you
're
new
to
programming
is
that
grammar
and
punctuation
are
vital
,
what
we
call
the
syntax
of
the
program
.
so
computers
,
in
many
ways
,
are
very
,
very
stupid
so
they
do
n't
understand
things
very
well
,
unless
you
've
got
very
,
very
precise
punctuations
to
tell
them
what
to
do
.
it
needs
these
brackets
,
so
that
it
knows
we
're
calling
a
command
,
and
it
knows
where
all
the
values
we
're
passing
into
the
command
,
what
we
call
parameters
are
know
,
needs
those
,
the
begin
and
end
brackets
to
know
when
these
parameters
stop
.
it
needs
a
comma
to
know
when
,
parameter
has
ended
and
the
next
one
has
started
.
it
needs
a
semi-colon
to
know
when
one
,
when
each
command
has
stopped
.
do
n't
have
those
things
it
will
get
you
[
inaudible
]
out/g
.
for
example
,
if
i
leave
off
the
setting
[
unknown
]
it
gives
me
unexpected
token
null
.
it
does
n't
,
it
's
something
it
has
n't
understood
.
and
often
these
errors
can
be
quite
hard
to
understand
.
so
it
's
important
to
be
quite
careful
.
okay
,
let
's
try
doing
another
thing
with
background
255
,
0
,
0
,
and
there
we
have
arrange
background
.
i
will
do
,
while
it
's
slightly
not
the
program
that
draws
a
pointed
screen
,
i
will
show
this
in
more
detail
in
me
main
lecture
,
might
want
to
take
a
look
at
but
i
can
do
that
to
set
position
and
give
it
a
certain
width
.
otherwise
we
're
not
going
to
be
able
to
see
it
very
effectively
.
and
if
you
do
that
some
[
inaudible
]
stroke
weight
length
.
so
this
is
a
typical
thing
,
i
did
it
accidentally
,
but
i
've
written
the
name
of
the
command
wrong
.
it
did
n't
understand
it
.
the
function
stroke
width
does
not
exist
.
i
made
an
error
,
it
told
me
that
it
would
n't
work
.
very
common
easy
mistake
to
make
um
,
.
it
was
completely
accidental
in
my
[
inaudible
]
,
in
my
case
but
i
'm
going
to
leave
this
in
the
video
because
it
helps
you
see
exactly
the
kind
of
areas
you
get
,
and
what
happens
when
you
get
that
,
you
get
this
little
red
bar
coming
out
and
you
know
something
is
wrong
.
and
it
gives
you
some
information
which
can
be
used
for
the
function
strokewidth
does
not
exists
.
[
inaudible
]
what
's
one
of
them
,
stroke
width
and
then
[
inaudible
]
points
.
i
'll
go
over
these
commands
in
the
main
page
.
and
there
we
are
,
we
've
got
a
dot
on
the
screen
.
there
are
two
other
things
that
i
want
to
show
you
that
can
be
useful
.
firstly
we
sometimes
want
to
write
notes
in
our
programs
,
if
we
want
to
sort
of
explain
them
.
so
maybe
i
want
to
explain
them
so
even
.
explain
it
to
somebody
else
using
your
program
or
simply
if
you
're
going
back
to
your
program
later
it
's
useful
to
have
notes
to
remind
yourself
what
's
going
on
.
we
call
these
comments
and
we
create
a
comment
by
putting
these
2
slashes
in
front
of
the
line
and
anything
else
on
that
line
is
ignored
.
i
could
do
it
at
the
end
of
a
line
a
well
.
[
sound
]
and
sometimes
if
i
want
to
get
rid
of
a
line
of
code
temporarily
as
i
'm
testing
what
i
'm
doing
i
can
comment
it
out
like
this
,
so
i
can
put
a
comment
,
turn
it
into
a
comment
and
all
of
these
comments
are
going
to
get
ignored
.
and
as
we
'll
see
now
,
the
stroke
weight
is
no
longer
being
called
and
my
dot
is
very
tiny
you
may
not
even
be
able
to
see
it
.
the
other
thing
i
'd
like
to
do
,
show
you
,
is
another
very
useful
thing
when
you
can
,
you
're
,
when
you
're
programming
,
is
that
you
can
also
print
stuff
out
.
if
you
do
print
ln
,
that
stands
for
print
line
,
and
some
text
.
like
that
,
it
will
print
it
out
.
note
that
i
'm
putting
all
the
text
values
in
these
double
quotes
.
you
need
double
quotes
so
that
the
program
knows
this
is
n't
the
name
of
a
function
or
anything
,
this
is
actual
text
you
want
to
use
.
so
you
need
to
have
that
in
double
quotes
.
and
when
i
'm
on
my
program
,
it
will
print
heavily
down
here
at
the
bottom
of
the
screen
.
that
's
useful
for
you
,
we
'll
see
in
the
future
,
as
a
way
of
getting
information
about
the
program
when
it
's
running
,
and
some
debugging
.
okay
,
so
let
's
recap
that
a
little
bit
.
the
core
of
writing
a
program
is
the
number
of
commans
.
each
command
has
a
name
.
it
has
parameters
,
these
are
values
that
we
pass
to
the
command
to
change
how
it
works
.
for
example
,
the
size
command
takes
a
width
and
a
height
.
these
parameters
are
inside
brackets
and
we
need
commas
to
separate
them
.
and
then
we
need
a
semicolon
on
the
end
of
the
line
.
all
this
punctuation
is
very
important
,
and
you
must
n't
forget
.
we
can
use
comments
to
get
the
computer
to
ignore
certain
bits
.
okay
,
so
the
last
thing
is
,
i
showed
you
,
is
this
println
command
,
and
its
for
using
to
print
things
out
.
print
out
text
,
you
can
also
print
out
different
values
like
numbers
and
variables
which
we
'll
come
to
in
the
future
.
and
you
can
use
the
plus
to
combine
together
text
and
values
,
so
that
'll
be
quite
useful
in
a
number
of
ways
later
on
that
way
,
we
keep
blocking
our
programs
.
okay
.
so
that
's
a
very
brief
introduction
to
the
basics
of
programming
and
i
'll
do
a
couple
of
extra
lectures
this
week
on
specific
topics
and
will
be
covering
various
topics
next
,
next
couple
of
weeks
to
explain
some
of
the
concepts
we
use
in
the
main
languages
.
