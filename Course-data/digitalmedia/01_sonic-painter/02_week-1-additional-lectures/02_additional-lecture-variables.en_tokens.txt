welcome
to
the
second
lecture
on
introductory
programming
for
those
of
you
doing
the
course
we
need
for
programming
.
so
in
this
session
i
'd
like
to
talk
about
variables
,
but
before
we
start
let
's
have
an
example
.
so
let
's
write
a
simple
processing
program
,
correct
the
size
of
the
screen
,
set
as
background
,
which
i
might
if
you
have
n't
looked
at
our
main
videos
yet
,
you
'll
find
out
why
number
255
is
right
in
there
.
and
let
's
draw
points
,
let
's
set
stroke
rate
say
see
the
point
and
then
draw
,
draw
a
point
,
position
100
,
100
say
.
that
's
a
fairly
basic
processing
program
.
and
now
we
gave
,
it
's
just
a
point
.
where
ever
you
want
to
draw
a
point
in
the
middle
of
the
screen
.
well
,
we
can
do
something
like
this
.
the
middle
of
the
screen
is
half
the
width
and
half
the
height
,
and
we
can
do
width
divided
by
2
,
height
divided
by
2.
and
there
we
go
to
the
point
in
the
middle
of
the
screen
.
now
,
what
exactly
have
i
done
there
?
so
we
're
quite
used
to
,
where
the
last
session
we
saw
,
we
saw
how
we
could
call
a
command
like
point
,
using
numbers
.
but
now
we
've
used
that
's
something
different
we
've
called
point
with
width
divided
by
2
height
divided
by
2.
and
so
what
is
width
?
it
's
a
,
it
,
behind
the
scenes
,
it
's
a
number
,
a
number
that
gives
us
the
width
of
the
screen
.
and
in
the
case
of
the
example
,
it
was
but
here
it
's
a
name
that
stands
for
that
number
,
and
i
can
use
that
name
in
the
program
instead
of
using
a
number
and
i
can
do
calculations
with
it
i
've
divided
by
2.
that
slash
sign
as
we
'll
com
to
later
is
is
division
in
the
program
,
because
we
do
n't
have
an
easy
like
divide
symbol
in
the
,
in
the
in
the
keyboard
.
so
that
's
a
new
element
.
and
it
's
something
that
's
called
a
variable
.
a
variable
is
essentially
a
name
that
can
stand
for
a
number
.
it
's
called
a
variable
because
not
only
can
it
stand
for
a
number
,
it
can
change
the
number
it
stands
for
.
it
can
change
.
so
what
does
that
mean
?
and
what
if
we
want
to
create
own
own
variable
?
and
we
'll
see
in
future
examples
,
it
's
very
useful
to
have
a
,
a
name
by
which
to
refer
to
a
particular
number
.
so
,
this
is
how
we
create
a
variable
,
and
i
'll
go
through
this
in
detail
.
if
we
're
creating
a
known
variable
,
it
will
look
something
like
this
.
we
're
correcting
a
variable
that
is
a
number
that
starts
off
equal
to
0.
we
first
,
we
need
to
go
back
to
our
example
of
what
a
computer
is
,
you
can
think
about
what
really
is
happening
.
so
this
is
our
computer
,
it
's
got
a
processor
and
a
memory
,
variables
,
astute
memory
.
and
what
happens
?
what
a
variable
is
,
is
a
little
box
in
memory
.
and
,
inside
that
little
box
of
memory
you
can
put
memory
or
different
things
.
the
first
part
of
the
of
this
command
to
,
create
a
variable
,
int
we
'll
come
back
to
exactly
what
that
means
but
it
's
basically
saying
this
is
a
number
.
so
create
new
box
big
enough
to
hold
the
number
.
next
thing
we
do
is
give
it
a
name
.
call
is
pos
x
,
for
example
.
that
's
just
the
name
of
the
value
.
call
it
anything
,
alright
.
call
it
john
,
call
it
mark
.
in
this
example
,
i
'm
representing
the
x
position
of
something
.
so
i
'm
going
to
call
it
posx
.
and
then
we
set
it
equal
to
a
,
to
0.
that
means
we
're
putting
in
the
number
0
inside
our
little
box
,
in
memory
[
inaudible
]
.
so
what
we
do
in
a
case
of
variable
is
,
a
variable
is
basically
a
box
in
memory
.
it
has
a
name
.
and
then
can
have
values
in
.
those
values
can
be
numbers
they
can
be
other
things
.
so
let
's
go
back
to
what
we
were
talking
about
in
our
.
previous
lecture
about
how
memory
is
composed
of
a
whole
lot
of
1s
and
0s
.
and
think
about
1s
and
0s
,
what
we
said
is
that
we
can
create
lots
of
different
things
after
these
1s
and
0s
,
interpret
them
in
different
ways
.
so
we
could
have
basically
true
,
false
,
very
simple
one
bit
.
there
is
[
inaudible
]
one
bit
in
reality
but
think
of
it
as
1
bit
.
you
can
have
numbers
as
we
saw
we
can
have
whole
numbers
,
factional
numbers
,
we
can
have
text
,
we
can
have
really
complex
things
like
images
and
audio
wave
forms
.
and
each
of
these
we
can
have
variables
to
represent
any
of
these
things
.
but
the
key
thing
is
that
they
take
different
amounts
of
memory
.
so
a
number
,
a
whole
number
is
actually
[
inaudible
]
different
need
from
a
fractional
number
.
and
both
of
those
things
need
a
lot
less
memory
than
text
and
certainly
than
an
,
than
an
image
.
so
when
we
're
creating
that
little
box
in
memory
for
a
variable
,
we
need
to
know
roughly
how
big
it
is
and
what
kind
of
thing
we
're
going
to
put
in
it
.
and
for
that
reason
,
we
give
names
to
all
these
different
types
of
data
.
and
that
this
we
call
the
different
types
,
types
and
there
's
a
tight
boolean
,
which
can
be
true
or
false
,
and
that
's
it
.
a
tight
int
,
that
means
integer
,
which
is
a
mathematical
word
for
whole
number
.
float
,
a
floating
point
number
.
means
a
fractional
number
,
sort
of
decimal
number
.
the
reason
it
's
called
flight
is
slightly
complicated
,
but
it
's
due
to
the
representation
of
the
number
in
the
computer
.
string
is
a
word
for
a
text
,
so
it
's
this
little
string
of
characters
.
and
then
there
are
complex
types
of
pimage
and
audiobuffer
that
are
specific
to
processing
[
unknown
]
not
,
not
yet
.
come
back
to
those
in
a
minute
.
we
've
also
got
a
special
type
void
.
which
we
will
come
back
to
in
a
fu
,
future
lecture
,
which
represents
nothing
.
come
back
to
why
we
might
want
trips
in
life
.
so
that
's
,
comes
back
to
our
little
int
in
there
.
that
int
and
that
posx
represents
the
fact
that
posx
is
a
number
.
a
whole
number
.
so
we
can
we
know
exactly
what
the
computer
knows
,
exactly
what
kind
of
thing
you
want
to
put
in
.
that
's
why
we
can
put
zero
in
there
,
we
can
put
a
word
like
thread
.
we
can
in
turn
say
float
instead
of
int
and
that
will
give
us
a
factual
number
or
string
if
you
want
to
put
text
in
there
.
so
,
let
's
look
at
something
else
we
might
do
with
the
variable
,
setting
its
value
.
so
this
is
saying
that
our
variable
when
setting
in
x
position
.
becomes
equal
to
a
number
34.
now
,
let
's
just
go
back
.
becomes
equal
to
,
that
's
an
important
thing
.
equal
,
those
equal
,
that
equal
sign
's
,
in
programming
is
what
's
called
an
assignment
operator
.
takes
one
value
on
the
left
side
of
it
,
and
sets
it
to
be
the
new
value
.
so
it
changes
the
value
of
posx
.
it
's
not
saying
that
they
're
equal
to
begin
with
,
but
once
you
've
done
posx
equals
34
,
after
that
posx
is
now
34.
that
equal
sign
is
how
you
change
the
values
.
you
can
set
a
variable
to
equal
to
another
variable
.
so
pos
x
is
now
going
to
have
be
equal
to
the
width
of
the
screen
.
or
a
function
,
certain
functions
do
calculations
and
.
can
give
you
back
numbers
,
or
other
values
.
up
to
now
,
the
functions
we
've
seen
just
do
stuff
like
drawing
.
but
sometimes
we
have
a
function
like
random
,
a
very
useful
function
,
which
generates
a
random
number
.
so
this
call
is
going
to
give
us
a
random
number
between
zero
and
100.
but
he
's
going
to
set
posx
to
be
equal
to
that
random
number
.
so
after
that
posx
is
a
random
value
.
and
we
'll
see
in
the
main
lecture
how
we
can
use
a
number
of
these
functions
to
do
calculations
and
then
give
us
back
a
value
that
we
put
in
the
variable
.
so
we
're
giving
numbers
to
,
this
random
function
,
we
're
giving
it
zero
and
a
100.
that
controls
how
it
works
.
basically
,
for
say
,
0
and
100
,
the
random
,
it
will
give
us
a
number
between
0
and
100.
if
i
say
0
and
10
,
it
'll
give
us
a
number
between
0
and
10
,
and
then
it
gives
us
back
a
number
if
you
present
posx
to
there
.
some
functions
return
and
return
strings
,
texts
,
boolean
variable
values
,
images
,
it
can
return
any
kind
of
type
,
but
something
that
we
,
can
be
put
in
a
variable
.
we
can
also
do
calculations
and
put
the
results
in
a
variable
.
so
we
can
take
a
value
,
which
in
this
case
.
it
is
another
there
.
for
mousex
.
mousex
is
a
variable
which
represents
the
position
of
the
mouse
.
the
x
position
of
the
mouse
.
and
we
add
something
to
it
.
we
add
1.
that
gives
us
a
new
number
.
whatever
mouse
x
is
plus
1
set
for
mouse
x.
it
's
100.
it
's
101
if
you
can
do
basic
math
.
and
we
take
that
value
and
put
it
in
posx
.
.
and
we
can
do
something
else
.
we
can
take
the
value
and
change
it
based
on
it
's
own
old
value
.
so
we
can
take
posx
,
make
it
equal
to
.
itself
but
the
old
value
of
posx
plus
1.
so
if
posx
is
30
,
we
add
1
to
31
and
set
posx
to
that
.
that
's
a
way
of
changing
a
variable
as
we
use
it
.
in
in
future
lessons
we
'll
see
how
we
can
use
that
to
animate
things
.
by
every
time
changing
the
value
of
the
variable
,
if
that
position
,
variable
is
a
position
or
something
similar
,
we
can
make
things
move
around
.
this
is
such
a
common
thing
to
do
,
there
's
this
little
shorthand
for
it
.
posx
plus
equals
one
means
posx
equals
posx
plus
1.
it
means
exactly
the
same
thing
.
it
's
a
way
of
adding
a
value
to
itself
.
posx
plus
,
plus
is
an
even
shorter
shorthand
when
the
,
you
know
the
value
of
adding
is
1.
posx
plus
,
plus
just
means
add
one
.
posx
.
posx
plus
equals
means
add
a
number
to
it
.
all
these
three
expressions
are
showing
you
,
these
three
lines
of
code
,
are
the
exact
same
thing
.
but
in
the
first
two
,
i
could
change
the
value
of
1
and
add
2
instead
.
the
last
one
is
always
been
adding
1.
so
,
let
's
look
at
some
of
the
,
things
you
can
do
with
calculations
.
you
can
do
some
basic
maths
.
we
've
seen
how
to
add
;
you
use
the
plus
sign
.
straightforwardly
,
to
add
two
things
you
'd
do
plus
equals
.
if
you
want
to
add
something
to
a
variable
and
plus
,
plus
if
you
want
to
add
one
to
a
variable
,
could
do
exactly
the
same
with
subtract
,
minus
signs
,
take
two
numbers
and
subtract
them
,
minus
equals
subtract
number
from
a
variable
,
minus
,
minus
,
subtract
one
.
star
is
asterisk
,
is
used
for
multiplication
,
because
there
's
no
sort
of
multiply
sign
on
the
standard
keyboard
.
and
we
can
do
star
equals
to
multiply
the
value
of
err
by
something
that
no
equivalent
to
plus
,
plus
.
the
slash
is
the
divide
symbol
,
star
's
the
multiply
.
so
those
are
some
basic
math
,
there
're
more
operations
.
that
's
it
for
now
.
another
thing
you
need
to
think
about
in
terms
of
calculations
is
brackets
.
if
you
want
to
do
multiple
calculations
on
one
line
and
combine
them
together
,
you
can
put
brackets
'round
them
as
you
would
in
standard
maths
to
constrain
which
happens
first
.
so
,
this
stuff
in
the
inner
brackets
is
done
first
.
you
calculate
the
first
brackets
,
and
then
use
the
results
of
that
calculation
in
the
outer
brackets
.
so
you
'll
,
what
's
happening
here
is
you
're
multiplying
x
by
3
and
you
're
adding
1
to
the
result
.
okay
,
so
let
's
get
back
to
various
types
.
we
've
talked
a
lot
about
variables
now
and
how
we
can
have
different
types
of
boolean
,
int
,
float
,
string
.
it
mostly
talked
about
numbers
because
that
's
mostly
what
we
're
going
to
be
using
in
graphics
.
in
the
future
we
will
talk
about
boolean
.
but
now
i
want
to
talk
basically
about
things
like
pimage
and
audioplayer
,
because
they
're
actually
much
more
complex
than
something
like
a
number
.
obviously
a
,
a
whole
audio
file
is
more
complex
than
a
number
,
but
even
the
way
the
variable
works
is
slightly
different
.
so
this
week
matthew
's
going
to
talk
about
audioplayer
;
let
's
have
a
look
at
it
.
so
just
as
we
did
int
pause
x
,
we
get
the
type
of
the
variable
and
the
name
.
here
we
give
the
title
variable
audio
player
,
and
the
name
,
is
player
.
you
can
give
it
any
name
you
like
.
if
it
's
a
high
hat
we
can
call
it
high
hat
,
if
it
's
a
violin
sound
we
can
call
it
violin
.
we
can
call
it
anything
we
like
.
so
that
's
essentially
the
same
thing
.
and
minim
is
another
aud
type
we
use
in
audio
.
matthew
will
talk
about
exactly
what
all
that
's
used
for
,
but
here
is
how
we
create
minim
objects
.
so
,
just
as
we
set
the
value
.
of
our
int
variable
to
0.
you
can
set
the
value
of
an
object
,
and
so
i
did
n't
use
the
term
,
but
these
complex
types
are
called
objects
.
our
object
's
called
minim
.
now
,
we
need
an
extra
bit
in
here
,
because
there
's
no
easy
way
of
saying
right
?
we
can
just
write
three
,
if
you
want
a
new
variable
,
a
new
number
.
but
there
's
no
quite
so
easy
way
of
doing
that
.
we
need
a
new
command
called
new
,
and
what
new
does
is
create
a
new
object
.
and
it
does
it
by
calling
a
function
.
called
a
constructor
.
this
is
like
a
command
but
it
has
the
same
name
as
the
type
,
as
the
object
.
and
it
's
used
to
create
any
value
of
those
objects
.
they
're
new
in
the
constructor
.
by
the
name
of
the
type
combine
together
to
create
a
new
value
of
the
objects
.
and
you
can
[
inaudible
]
pass
parameters
in
just
like
any
other
command
.
matthew
will
explain
this
,
but
this
essentially
means
,
the
,
it
's
something
that
wraps
into
programming
,
you
do
n't
have
to
worry
about
it
too
much
.
but
it
's
an
example
of
passing
something
in
,
so
that
can
be
used
in
creating
an
object
.
so
,
in
an
audio
file
,
you
might
pass
in
the
file
name
.
in
an
image
,
you
might
pass
in
how
,
the
width
and
height
of
the
image
.
there
's
lots
of
things
you
could
pass
.
and
then
there
's
another
important
thing
,
big
difference
between
types
like
numbers
and
objects
.
a
number
is
just
a
number
you
can
do
some
calculations
on
.
in
a
,
in
an
object
,
as
well
as
having
its
value
,
you
can
call
a
function
on
that
object
.
what
that
means
is
,
if
you
're
calling
a
function
play
,
but
that
's
not
a
generic
function
,
that
does
n't
apply
everywhere
,
you
know
,
you
ca
n't
just
play
.
you
're
playing
a
particular
audio
file
.
'kay
,
meaning
to
play
an
audio
file
.
and
that
's
why
we
do
this
little
bit
of
style
of
code
where
we
're
doing
player.play
.
recalling
play
on
a
specific
object
.
[
inaudible
]
specific
audio
file
,
not
general
audio
file
just
one
particular
item
.
and
we
're
using
this
little
dot
.
what
a
dot
does
is
links
the
function
you
're
calling
to
things
have
been
called
.
so
you
do
,
player.play
cause
of
function
one
specific
object
.
a
very
useful
capability
.
so
this
is
something
that
mathew
's
going
to
use
and
that
nick
and
i
are
going
to
use
in
the
examples
a
bit
later
in
this
lesson
.
so
that
was
a
very
brief
introduction
to
variables
.
you
'll
see
a
lot
of
examples
in
the
main
lessons
.
and
and
hopefully
that
will
help
you
understand
these
concepts
that
we
build
on
programming
.
if
you
need
some
more
help
we
've
provided
a
bunch
of
links
relating
to
programming
on
the
main
site
.
