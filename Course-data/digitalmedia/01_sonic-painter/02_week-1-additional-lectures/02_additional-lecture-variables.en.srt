1
00:00:00,490 --> 00:00:05,380
Welcome to the second lecture on 
introductory programming for those of you 

2
00:00:05,380 --> 00:00:11,010
doing the course we need for programming. 
So in this session I'd like to talk about 

3
00:00:11,010 --> 00:00:14,160
variables, but before we start let's have 
an example. 

4
00:00:14,160 --> 00:00:18,290
So let's write a simple processing 
program, 

5
00:00:19,690 --> 00:00:27,680
Correct the size of the screen, set as 
background, which I might if you haven't 

6
00:00:27,680 --> 00:00:33,410
looked at our main videos yet, you'll 
find out why number 255 is right in 

7
00:00:33,410 --> 00:00:38,818
there. 
And let's draw points, let's set stroke 

8
00:00:38,818 --> 00:00:50,592
rate say see the point and then draw, 
draw a point, position 100, 100 say. 

9
00:00:50,592 --> 00:00:59,420
That's a fairly basic processing program. 
And now we gave, it's just a point. 

10
00:00:59,420 --> 00:01:03,380
Where ever you want to draw a point in 
the middle of the screen. 

11
00:01:03,380 --> 00:01:07,105
Well, we can do something like this. 
The middle of the screen is half the 

12
00:01:07,105 --> 00:01:18,230
width and half the height, and we can do 
width divided by 2, height divided by 2. 

13
00:01:18,230 --> 00:01:20,080
And there we go to the point in the 
middle of the screen. 

14
00:01:21,850 --> 00:01:29,572
Now, what exactly have I done there? 
So we're quite used to, where the last 

15
00:01:29,572 --> 00:01:38,330
session we saw, we saw how we could call 
a command like point, using numbers. 

16
00:01:38,330 --> 00:01:43,260
But now we've used that's something 
different we've called point with width 

17
00:01:43,260 --> 00:01:48,240
divided by 2 height divided by 2. 
And so what is width? 

18
00:01:48,240 --> 00:01:53,280
It's a, it, behind the scenes, it's a 
number, a number that gives us the width 

19
00:01:53,280 --> 00:01:56,255
of the screen. 
And in the case of the example, it was 

20
00:01:56,255 --> 00:01:59,640
640. 
But here it's a name that stands for that 

21
00:01:59,640 --> 00:02:04,800
number, and I can use that name in the 
program Instead of using a number and I 

22
00:02:04,800 --> 00:02:06,880
can do calculations with it I've divided 
by 2. 

23
00:02:06,880 --> 00:02:14,230
That slash sign as we'll com to later is 
is division in the program, because we 

24
00:02:14,230 --> 00:02:18,930
don't have an easy like divide symbol in 
the, in the in the keyboard. 

25
00:02:21,020 --> 00:02:24,550
So That's a new element. 
And it's something that's called a 

26
00:02:24,550 --> 00:02:28,430
variable. 
A variable is essentially a name that can 

27
00:02:28,430 --> 00:02:32,540
stand for a number. 
It's called a variable because not only 

28
00:02:32,540 --> 00:02:35,790
can it stand for a number, it can change 
the number it stands for. 

29
00:02:35,790 --> 00:02:40,286
It can change. 
so what does that mean? 

30
00:02:40,286 --> 00:02:44,960
And what if we want to create own own 
variable? 

31
00:02:44,960 --> 00:02:51,840
And we'll see in future examples, it's 
very useful to have a, a name by which to 

32
00:02:51,840 --> 00:02:59,360
refer to a particular number. 
So, this is how we create a variable, and 

33
00:02:59,360 --> 00:03:02,550
I'll go through this in detail. 
If we're creating a known variable, it 

34
00:03:02,550 --> 00:03:07,210
will look something like this. 
we're correcting a variable that is a 

35
00:03:07,210 --> 00:03:11,540
number that starts off equal to 0. 
We first, we need to go back to our 

36
00:03:11,540 --> 00:03:16,520
example of what a computer is, you can 
think about what really is happening. 

37
00:03:16,520 --> 00:03:21,759
So this is our computer, it's got a 
processor and a memory, variables, astute 

38
00:03:21,759 --> 00:03:24,620
memory. 
And what happens? 

39
00:03:24,620 --> 00:03:30,080
What a variable is, is a little box in 
memory. 

40
00:03:30,080 --> 00:03:35,310
And, inside that little box of memory you 
can put memory or different things. 

41
00:03:35,310 --> 00:03:43,680
The first part of the of this command to, 
create a variable, int We'll come back to 

42
00:03:43,680 --> 00:03:46,930
exactly what that means but it's 
basically saying this is a number. 

43
00:03:46,930 --> 00:03:51,220
So create new box big enough to hold the 
number. 

44
00:03:51,220 --> 00:03:55,800
Next thing we do is give it a name. 
Call is pos X, for example. 

45
00:03:55,800 --> 00:03:59,830
That's just the name of the value. 
Call it anything, alright. 

46
00:03:59,830 --> 00:04:05,560
Call it John, call it Mark. 
In this example, I'm representing the X 

47
00:04:05,560 --> 00:04:10,690
position of something. 
So I'm going to call it posX. 

48
00:04:10,690 --> 00:04:15,980
And then we set it equal to a, to 0. 
That means we're putting in the number 0 

49
00:04:15,980 --> 00:04:17,890
inside our little box, in memory 
[INAUDIBLE]. 

50
00:04:21,740 --> 00:04:27,180
So what we do in a case of variable is, a 
variable is basically a box in memory. 

51
00:04:28,560 --> 00:04:31,690
It has a name. 
And then can have values in. 

52
00:04:31,690 --> 00:04:34,195
those values can be numbers They can be 
other things. 

53
00:04:34,195 --> 00:04:39,390
So let's go back to what we were talking 
about in our. 

54
00:04:39,390 --> 00:04:44,023
Previous lecture about how memory is 
composed of a whole lot of 1s and 0s. 

55
00:04:44,023 --> 00:04:49,640
And think about 1s and 0s, what we said 
is that we can create lots of different 

56
00:04:50,680 --> 00:04:53,570
things after these 1s and 0s, interpret 
them in different ways. 

57
00:04:53,570 --> 00:04:57,542
So we could have basically true, false, 
very simple one bit. 

58
00:04:57,542 --> 00:05:02,270
There is [INAUDIBLE] one bit in reality 
but think of it as 1 bit. 

59
00:05:02,270 --> 00:05:07,840
You can have numbers as we saw we can 
have whole numbers, factional numbers, we 

60
00:05:07,840 --> 00:05:13,810
can have text, we can have really complex 
things like images and audio wave forms. 

61
00:05:13,810 --> 00:05:18,210
And each of these we can have variables 
to represent any of these things. 

62
00:05:19,570 --> 00:05:23,500
But the key thing is that they take 
different amounts of memory. 

63
00:05:23,500 --> 00:05:28,510
So a number, a whole number is actually 
[INAUDIBLE] different need from a 

64
00:05:28,510 --> 00:05:32,040
fractional number. 
And both of those things need a lot less 

65
00:05:32,040 --> 00:05:36,140
memory than text and certainly than an, 
than an image. 

66
00:05:36,140 --> 00:05:39,610
So when we're creating that little box in 
memory for a variable, we need to know 

67
00:05:39,610 --> 00:05:42,750
roughly how big it is and what kind of 
thing we're going to put in it. 

68
00:05:43,880 --> 00:05:48,740
And for that reason, we give names to all 
these different types of data. 

69
00:05:48,740 --> 00:05:56,340
And that this we call the different 
types, types and There's a tight Boolean, 

70
00:05:56,340 --> 00:05:58,493
which can be true or false, and that's 
it. 

71
00:05:58,493 --> 00:06:04,125
A tight int, that means integer, which is 
a mathematical word for whole number. 

72
00:06:04,125 --> 00:06:11,840
Float, a floating point number. 
Means a fractional number, sort of 

73
00:06:11,840 --> 00:06:16,150
decimal number. 
the reason it's called flight is slightly 

74
00:06:16,150 --> 00:06:19,480
complicated, but it's due to the 
representation of the number in the 

75
00:06:19,480 --> 00:06:27,090
computer. 
String is a word for a text, so it's this 

76
00:06:27,090 --> 00:06:30,998
little string of characters. 
And then there are complex types of 

77
00:06:30,998 --> 00:06:36,560
PImage and AudioBuffer that are specific 
to processing [UNKNOWN] Not, not yet. 

78
00:06:36,560 --> 00:06:41,540
Come back to those in a minute. 
We've also got a special type void. 

79
00:06:41,540 --> 00:06:48,850
Which we will come back to in a fu, 
future lecture, which represents nothing. 

80
00:06:48,850 --> 00:06:51,670
Come back to why we might want trips in 
life. 

81
00:06:51,670 --> 00:06:54,574
So that's, comes back to our little int 
in there. 

82
00:06:54,574 --> 00:07:00,510
That int And that posX represents the 
fact that posX is a number. 

83
00:07:00,510 --> 00:07:07,050
A whole number. 
So we can we know exactly what the 

84
00:07:07,050 --> 00:07:10,180
computer knows, exactly what kind of 
thing you want to put in. 

85
00:07:10,180 --> 00:07:14,376
That's why we can put zero in there, we 
can put a word like thread. 

86
00:07:14,376 --> 00:07:19,850
We can in turn say float instead of int 
and that will give us a factual number or 

87
00:07:19,850 --> 00:07:26,870
string if you want to put text in there. 
So, let's look at something else we might 

88
00:07:26,870 --> 00:07:33,270
do with the variable, setting its value. 
So this is saying that our variable when 

89
00:07:33,270 --> 00:07:37,220
setting in X position. 
Becomes equal to a number 34. 

90
00:07:37,220 --> 00:07:45,310
Now, let's just go back. 
Becomes equal to, that's an important 

91
00:07:45,310 --> 00:07:50,190
thing. 
Equal, those equal, that equal sign's, in 

92
00:07:50,190 --> 00:07:54,750
programming is what's called an 
assignment operator. 

93
00:07:54,750 --> 00:07:59,660
Takes one value on the left side of it, 
and sets it to be the new value. 

94
00:07:59,660 --> 00:08:04,450
So it changes the value of posX. 
It's not saying that they're equal to 

95
00:08:04,450 --> 00:08:12,178
begin with, but once you've done posX 
equals 34, after that posX is now 34. 

96
00:08:12,178 --> 00:08:20,170
That equal sign is how you change the 
values. 

97
00:08:20,170 --> 00:08:23,356
You can set a variable to equal to 
another variable. 

98
00:08:23,356 --> 00:08:27,500
So pos X is now going to have be equal to 
the width of the screen. 

99
00:08:30,140 --> 00:08:35,230
Or a function, certain functions do 
calculations and. 

100
00:08:35,230 --> 00:08:38,420
Can give you back numbers, or other 
values. 

101
00:08:38,420 --> 00:08:42,240
Up to now, the functions we've seen just 
do stuff like drawing. 

102
00:08:42,240 --> 00:08:47,160
But sometimes we have a function like 
random, a very useful function, which 

103
00:08:47,160 --> 00:08:50,430
generates a random number. 
So this call is going to give us a random 

104
00:08:50,430 --> 00:08:54,450
number between zero and 100. 
But he's going to set posX to be equal to 

105
00:08:54,450 --> 00:08:58,820
that random number. 
So after that posX is a random value. 

106
00:08:58,820 --> 00:09:01,875
And we'll see in the main lecture how we 
can use a number of these functions to do 

107
00:09:01,875 --> 00:09:07,900
calculations and then give us back a 
value that we put in the variable. 

108
00:09:07,900 --> 00:09:13,704
So we're giving numbers to, this random 
function, we're giving it zero and a 100. 

109
00:09:13,704 --> 00:09:18,340
That controls How it works. 
Basically, for say, 0 and 100, the 

110
00:09:18,340 --> 00:09:22,290
random, it will give us a number between 
0 and 100. 

111
00:09:22,290 --> 00:09:27,130
If I say 0 and 10, it'll give us a number 
between 0 and 10, and then it gives us 

112
00:09:27,130 --> 00:09:30,719
back a number if you present posX to 
there. 

113
00:09:30,719 --> 00:09:38,710
Some functions return And return strings, 
texts, Boolean variable values, images, 

114
00:09:38,710 --> 00:09:42,370
it can return any kind of type, but 
something that we, can be put in a 

115
00:09:42,370 --> 00:09:47,130
variable. 
We can also do calculations and put the 

116
00:09:47,130 --> 00:09:52,140
results in a variable. 
So we can take a value, which in this 

117
00:09:52,140 --> 00:09:54,040
case. 
It is another there. 

118
00:09:54,040 --> 00:09:57,470
For mouseX. 
MouseX is a variable which represents the 

119
00:09:57,470 --> 00:10:00,410
position of the mouse. 
The X position of the mouse. 

120
00:10:00,410 --> 00:10:02,562
And we add something to it. 
We add 1. 

121
00:10:02,562 --> 00:10:07,300
That gives us a new number. 
Whatever mouse X is plus 1 set for mouse 

122
00:10:07,300 --> 00:10:08,046
X. 
It's 100. 

123
00:10:08,046 --> 00:10:12,692
It's 101 If you can do basic math. 
And we take that value and put it in 

124
00:10:12,692 --> 00:10:16,160
posX. 
. 

125
00:10:16,160 --> 00:10:26,950
and we can do something else. 
We can take the value and change it based 

126
00:10:26,950 --> 00:10:32,715
on it's own old value. 
So we can take posX, make it equal to. 

127
00:10:32,715 --> 00:10:42,623
Itself but the old value of posX plus 1. 
So if posX is 30, we add 1 to 31 and set 

128
00:10:42,623 --> 00:10:46,650
posX to that. 
That's a way of changing a variable as we 

129
00:10:46,650 --> 00:10:50,840
use it. 
in in future lessons we'll see how we can 

130
00:10:50,840 --> 00:10:55,930
use that to animate things. 
By every time changing the value of the 

131
00:10:55,930 --> 00:11:01,320
variable, if that position, variable is a 
position or something similar, we can 

132
00:11:01,320 --> 00:11:07,120
make things move around. 
This is such a common thing to do, 

133
00:11:07,120 --> 00:11:14,172
there's this little shorthand for it. 
PosX plus equals one means posX equals 

134
00:11:14,172 --> 00:11:17,050
posX plus 1. 
It means exactly the same thing. 

135
00:11:17,050 --> 00:11:23,390
It's a way of adding a value to itself. 
posX plus, plus is an even shorter 

136
00:11:23,390 --> 00:11:26,298
shorthand when the, you know the value of 
adding is 1. 

137
00:11:26,298 --> 00:11:30,054
posX plus, plus just means add one. 
PosX. 

138
00:11:30,054 --> 00:11:33,310
PosX plus equals means add a number to 
it. 

139
00:11:34,510 --> 00:11:38,110
All these three expressions are showing 
you, these three lines of code, are the 

140
00:11:38,110 --> 00:11:42,730
exact same thing. 
But in the first two, I could change the 

141
00:11:42,730 --> 00:11:50,760
value of 1 and add 2 instead. 
The last one is always been adding 1. 

142
00:11:50,760 --> 00:11:55,170
So, let's look at some of the, things you 
can do with calculations. 

143
00:11:55,170 --> 00:11:59,630
You can do some basic maths. 
We've seen how to add; you use the plus 

144
00:11:59,630 --> 00:12:02,210
sign. 
Straightforwardly, to add two things 

145
00:12:02,210 --> 00:12:05,720
you'd do plus equals. 
If you want to add something to a 

146
00:12:05,720 --> 00:12:10,270
variable And plus, plus if you want to 
add one to a variable, could do exactly 

147
00:12:10,270 --> 00:12:14,920
the same with subtract, minus signs, take 
two numbers and subtract them, minus 

148
00:12:14,920 --> 00:12:19,340
equals subtract number from a variable, 
minus, minus, subtract one. 

149
00:12:21,640 --> 00:12:26,240
Star is asterisk, is used for 
multiplication, because there's no sort 

150
00:12:26,240 --> 00:12:29,600
of multiply sign on the standard 
keyboard. 

151
00:12:30,700 --> 00:12:36,570
And we can do star equals to multiply the 
value of err by something that no 

152
00:12:36,570 --> 00:12:42,118
equivalent to plus, plus. 
The slash is the divide symbol, star's 

153
00:12:42,118 --> 00:12:45,770
the multiply. 
So those are some basic math, there're 

154
00:12:45,770 --> 00:12:48,630
more operations. 
That's it for now. 

155
00:12:49,960 --> 00:12:54,380
another thing you need to think about in 
terms of calculations is brackets. 

156
00:12:54,380 --> 00:12:57,650
If you want to do multiple calculations 
on one line and combine them together, 

157
00:12:57,650 --> 00:13:01,750
you can put brackets 'round them as you 
would in standard maths to constrain 

158
00:13:01,750 --> 00:13:05,450
which happens first. 
So, this stuff in the inner brackets is 

159
00:13:05,450 --> 00:13:08,730
done first. 
You calculate the first brackets, and 

160
00:13:08,730 --> 00:13:13,880
then use the results of that calculation 
in the outer brackets. 

161
00:13:13,880 --> 00:13:17,100
So you'll, what's happening here is 
you're multiplying x by 3 and you're 

162
00:13:17,100 --> 00:13:27,480
adding 1 to the result. 
Okay, so let's get back to various types. 

163
00:13:27,480 --> 00:13:31,980
We've talked a lot about Variables now 
and how we can have different types of 

164
00:13:31,980 --> 00:13:36,140
boolean, int, float, string. 
it mostly talked about numbers because 

165
00:13:36,140 --> 00:13:39,740
that's mostly what we're going to be 
using in graphics. 

166
00:13:39,740 --> 00:13:44,780
In the future we will talk about boolean. 
But now I want to talk basically about 

167
00:13:44,780 --> 00:13:48,650
things like PImage and AudioPlayer, 
because they're actually much more 

168
00:13:48,650 --> 00:13:53,830
complex than something like a number. 
Obviously a, a whole audio file is more 

169
00:13:53,830 --> 00:13:59,819
complex than a number, but even the way 
the variable works is slightly different. 

170
00:13:59,819 --> 00:14:02,327
So this week Matthew's going to talk 
about AudioPlayer; let's have a look at 

171
00:14:02,327 --> 00:14:03,140
it. 
So just as we did int pause x, we get the 

172
00:14:03,140 --> 00:14:10,873
type of the variable and the name. 
Here we give the title variable audio 

173
00:14:10,873 --> 00:14:18,223
player, and the name, is player. 
You can give it any name you like. 

174
00:14:18,223 --> 00:14:27,778
if it's a high hat we can call it high 
hat, if it's a violin sound we can call 

175
00:14:27,778 --> 00:14:32,629
it violin. 
We can call it anything we like. 

176
00:14:32,629 --> 00:14:41,020
so that's essentially the same thing. 
and Minim is another aud type we use in 

177
00:14:41,020 --> 00:14:43,080
audio. 
Matthew will talk about exactly what all 

178
00:14:43,080 --> 00:14:50,591
that's used for, but here is how we 
create Minim objects. 

179
00:14:50,591 --> 00:14:57,960
So, just as we set the value. 
Of our int variable to 0. 

180
00:14:57,960 --> 00:15:03,460
You can set the value of an object, and 
so I didn't use the term, but these 

181
00:15:03,460 --> 00:15:06,860
complex types are called objects. 
Our object's called Minim. 

182
00:15:06,860 --> 00:15:14,969
Now, we need an extra bit in here, 
because there's no easy way of saying 

183
00:15:15,970 --> 00:15:18,900
Right? 
We can just write three, if you want a 

184
00:15:18,900 --> 00:15:22,920
new variable, a new number. 
But there's no quite so easy way of doing 

185
00:15:22,920 --> 00:15:27,100
that. 
We need a new command called new, and 

186
00:15:27,100 --> 00:15:35,190
what new does is create a new object. 
And it does it by calling a function. 

187
00:15:35,190 --> 00:15:38,520
Called a constructor. 
This is like a command but it has the 

188
00:15:38,520 --> 00:15:45,990
same name as the type, as the object. 
And it's used to create any value of 

189
00:15:45,990 --> 00:15:48,920
those objects. 
They're new in the constructor. 

190
00:15:49,930 --> 00:15:54,590
By the name of the type combine together 
to create a new value of the objects. 

191
00:15:54,590 --> 00:15:58,115
And you can [INAUDIBLE] pass parameters 
in just like any other command. 

192
00:15:58,115 --> 00:16:04,607
Matthew will explain this, but this 
essentially means, the, it's something 

193
00:16:04,607 --> 00:16:08,190
that wraps into programming, you don't 
have to worry about it too much. 

194
00:16:08,190 --> 00:16:14,600
But it's an example of passing something 
in, so that can be used in creating an 

195
00:16:14,600 --> 00:16:17,830
object. 
So, In an audio file, you might pass in 

196
00:16:17,830 --> 00:16:21,000
the file name. 
In an image, you might pass in how, the 

197
00:16:21,000 --> 00:16:23,840
width and height of the image. 
There's lots of things you could pass. 

198
00:16:28,390 --> 00:16:35,610
And then there's another important thing, 
big difference between types like numbers 

199
00:16:35,610 --> 00:16:39,700
and objects. 
A number Is just a number you can do some 

200
00:16:39,700 --> 00:16:43,542
calculations on. 
In a, in an object, as well as having its 

201
00:16:43,542 --> 00:16:46,998
value, you can call a function on that 
object. 

202
00:16:46,998 --> 00:16:53,238
What that means is, if you're calling a 
function play, but that's not a generic 

203
00:16:53,238 --> 00:16:59,040
function, that doesn't apply everywhere, 
you know, you can't just play. 

204
00:16:59,040 --> 00:17:04,765
You're playing a particular audio file. 
'Kay, meaning to play an audio file. 

205
00:17:04,765 --> 00:17:13,928
And that's why we do this little bit of 
style of code where we're doing 

206
00:17:13,928 --> 00:17:19,190
player.play. 
Recalling play On a specific object. 

207
00:17:19,190 --> 00:17:25,109
[INAUDIBLE] specific audio file, not 
general audio file just one particular 

208
00:17:25,109 --> 00:17:28,580
item. 
And we're using this little dot. 

209
00:17:28,580 --> 00:17:34,284
What a dot does is links the function 
you're calling to things have been 

210
00:17:34,284 --> 00:17:39,140
called. 
So you do, player.play Cause of function 

211
00:17:39,140 --> 00:17:42,770
one specific object. 
A very useful capability. 

212
00:17:43,880 --> 00:17:49,590
So this is something that Mathew's 
going to use and that Nick and I are 

213
00:17:49,590 --> 00:17:54,336
going to use in the examples a bit later 
in this lesson. 

214
00:17:54,336 --> 00:17:56,990
So that was a very brief introduction to 
variables. 

215
00:17:56,990 --> 00:18:00,880
You'll see a lot of examples in the main 
lessons. 

216
00:18:00,880 --> 00:18:06,930
And and hopefully that will help you 
understand these concepts that we build 

217
00:18:06,930 --> 00:18:10,830
on programming. 
If you need some more help we've provided 

218
00:18:10,830 --> 00:18:13,970
a bunch of links relating to programming 
on the main site. 