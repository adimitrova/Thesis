1
00:00:10,961 --> 00:00:18,087
[MUSIC]

2
00:00:18,087 --> 00:00:22,820
Okay, so we've heard Marco explain in
more detail how you access lots of

3
00:00:22,820 --> 00:00:26,865
different images and arrange them and
put them on the screen.

4
00:00:26,865 --> 00:00:31,064
And we've heard Matt tell you a lot more
detail about how sound is organized,

5
00:00:31,064 --> 00:00:33,790
how to get sounds, and
how to do things with them.

6
00:00:35,520 --> 00:00:39,270
We've got an example that we've prepared
for you, for you to munge around with and

7
00:00:39,270 --> 00:00:45,678
play with called DJ Tube and
it's like a really basic example

8
00:00:45,678 --> 00:00:50,755
DJVJ app that you can expand on and
develop yourself.

9
00:00:50,755 --> 00:00:55,790
Now to start with, before you can really

10
00:00:55,790 --> 00:00:59,900
make interesting audio visual apps,
you have to have some good graphics.

11
00:01:01,090 --> 00:01:04,130
You can make these yourself,
and I'm sure many of you will.

12
00:01:04,130 --> 00:01:07,110
But a lot of you might just want to get
started without having to have all that

13
00:01:07,110 --> 00:01:09,660
hassle and
just be able to drop something in.

14
00:01:09,660 --> 00:01:14,250
You'll find in the example,
the DJ Tube example,

15
00:01:14,250 --> 00:01:19,695
there's a sample movie which
Marco will show you some frames

16
00:01:19,695 --> 00:01:25,136
of just a tube train, I want to
show you where I got that from and

17
00:01:25,136 --> 00:01:28,574
how you prepare it for use in this app.

18
00:01:28,574 --> 00:01:32,510
So normally if I'm bored, I'm looking for
images and I don't want to have to pay

19
00:01:32,510 --> 00:01:35,410
huge amounts of royalties,
I go to the Internet Archive.

20
00:01:35,410 --> 00:01:37,230
If you've never been to
the Internet Archive,

21
00:01:37,230 --> 00:01:39,120
have you ever been on the Internet?

22
00:01:39,120 --> 00:01:42,204
I don't know if that is
probably the best or

23
00:01:42,204 --> 00:01:47,188
one of the best sites on the Internet and
one of the longest standing.

24
00:01:47,188 --> 00:01:49,022
You can do some cool things
on the Internet Archive.

25
00:01:49,022 --> 00:01:53,167
You can look up websites and
see the way they were in 1994.

26
00:01:53,167 --> 00:01:54,525
I don't know if that interests you or not.

27
00:01:54,525 --> 00:01:59,398
I guess it's of limited interest,
but you can also

28
00:01:59,398 --> 00:02:04,508
get access to a huge array
of copyright-free video.

29
00:02:04,508 --> 00:02:06,600
And that's great, so
we're going to start there.

30
00:02:06,600 --> 00:02:09,623
The first thing I want to do
is I'm going to type VJ loops,

31
00:02:09,623 --> 00:02:12,110
which is about as easy as it gets.

32
00:02:12,110 --> 00:02:17,390
You'll see there I've got VJ loops,
quickly followed by VJ loops George Bush,

33
00:02:17,390 --> 00:02:22,200
although there aren't any George Bush VJ
loops so you'll have to upload your own.

34
00:02:22,200 --> 00:02:25,630
That's the thing about the Internet
Archive, if you do make some cool video,

35
00:02:25,630 --> 00:02:29,250
you can always upload it there and
it's a nice place for

36
00:02:29,250 --> 00:02:32,640
it to be stored and
it's a nice way of giving back.

37
00:02:32,640 --> 00:02:34,750
But you should be able to
use most of this stuff and

38
00:02:34,750 --> 00:02:39,220
you'll see that there are loads and loads
and loads of VJ loops for you to use.

39
00:02:39,220 --> 00:02:43,319
So for example,
here's a bunch of video stuff,

40
00:02:45,030 --> 00:02:49,805
and this is mainly, I think people dancing
in a club, put through a red filter.

41
00:02:49,805 --> 00:02:54,010
Now you could probably do that yourself,
or if you're at home and

42
00:02:54,010 --> 00:02:57,920
don't happen to be in a club,
you can just go to the archive.

43
00:02:57,920 --> 00:03:00,646
because there's shed loads of stuff
there that you can try and use.

44
00:03:00,646 --> 00:03:04,831
Once you've got a video,
you can manipulate it,

45
00:03:04,831 --> 00:03:09,214
you can treat it using iMovie,
or Adobe Premier, or

46
00:03:09,214 --> 00:03:13,418
any other kind of editing
software that you like.

47
00:03:13,418 --> 00:03:15,867
A lot of people use Final Cut Pro.

48
00:03:15,867 --> 00:03:17,640
We're not going to show you
any of that stuff today.

49
00:03:17,640 --> 00:03:18,310
It's up to you.

50
00:03:19,380 --> 00:03:22,160
What you really need to be able to do
before you can make it work inside

51
00:03:22,160 --> 00:03:25,590
a mobile app is you need to be able
to cut it into individual frames.

52
00:03:25,590 --> 00:03:27,430
Why, why is that?

53
00:03:27,430 --> 00:03:28,640
Well, I'll tell you why.

54
00:03:28,640 --> 00:03:32,392
That's because most mobile devices,
when they play back video, that's fine,

55
00:03:32,392 --> 00:03:34,260
they've got no problem playing back video.

56
00:03:34,260 --> 00:03:37,995
The problem they have is in allowing you
to manipulate that video effectively,

57
00:03:37,995 --> 00:03:43,780
i.e., change the speed of playback or
skip from one frame to another.

58
00:03:43,780 --> 00:03:47,700
These are the sorts of things that when
you're making any kind of multimedia app,

59
00:03:47,700 --> 00:03:49,230
you want to be able to do with video.

60
00:03:49,230 --> 00:03:51,780
It's not enough just to be able
to play a video file back.

61
00:03:51,780 --> 00:03:53,180
That's really simple.

62
00:03:53,180 --> 00:03:56,190
What we want to show you how to do is
how to make something which you can

63
00:03:56,190 --> 00:04:01,020
edit in real time, in time to music,
that's what our DJ Tube app does.

64
00:04:01,020 --> 00:04:03,450
So we need to split it
into individual frames.

65
00:04:03,450 --> 00:04:06,360
And we've written a piece of software for
you to allow you to do that.

66
00:04:07,460 --> 00:04:12,715
So you download a video and
then when you've downloaded the video,

67
00:04:12,715 --> 00:04:18,245
you can run a piece of software
that we've prepared for you.

68
00:04:18,245 --> 00:04:19,480
I'm going to just locate it now.

69
00:04:19,480 --> 00:04:24,279
It will be in your Lesson 2 document,
so go to your Lesson 2 documents.

70
00:04:25,480 --> 00:04:26,780
I'm just going there now.

71
00:04:26,780 --> 00:04:30,760
Bear with me while I look slightly mad.

72
00:04:30,760 --> 00:04:31,450
Here we are.

73
00:04:31,450 --> 00:04:39,200
It's in Coursera > Lessons > Lesson2
> Week2 and it's called ImageSaver.

74
00:04:39,200 --> 00:04:46,160
Now, ImageSaver You might find it's
actually got a bunch of frames in it.

75
00:04:46,160 --> 00:04:48,530
So I'm going to remove those frames,
and I'm going to launch it,

76
00:04:48,530 --> 00:04:49,710
and it's a processing sketch.

77
00:04:50,720 --> 00:04:53,368
It asks you for a QuickTime movie.

78
00:04:53,368 --> 00:04:56,526
And it creates a series
of individual frames, so,

79
00:04:59,579 --> 00:05:03,013
I've got here a movie which is,

80
00:05:03,013 --> 00:05:08,239
I think we recorded
straight from the Internet.

81
00:05:08,239 --> 00:05:09,510
Let me just see if I can find it.

82
00:05:12,120 --> 00:05:13,290
Oh yeah, here we go.

83
00:05:13,290 --> 00:05:18,166
So here it is,
this one's from the Internet Archive.

84
00:05:18,166 --> 00:05:21,164
And it runs through the video and

85
00:05:21,164 --> 00:05:26,280
makes it into a series of
individual frames, like so.

86
00:05:26,280 --> 00:05:29,500
When that's done, click stop and
go to the Data directory.

87
00:05:31,000 --> 00:05:34,960
Actually, you just go to the directory
where your ImageSaver application is,

88
00:05:34,960 --> 00:05:39,328
the one I just showed you about, and
you'll see we've got movie0, movie1,

89
00:05:39,328 --> 00:05:42,880
movie2, movie3, movie4, movie5.

90
00:05:42,880 --> 00:05:47,410
Now, all film is made up of individual
frames as you probably know.

91
00:05:47,410 --> 00:05:50,940
And each frame contains
the same scene often, but

92
00:05:50,940 --> 00:05:54,070
with some elements of the scene moved.

93
00:05:54,070 --> 00:05:58,885
So by stringing these frames together,
we can control that motion.

94
00:05:58,885 --> 00:06:04,387
Now, I'm going to copy this
stuff into my directory here.

95
00:06:04,387 --> 00:06:09,190
I've got DJTube, here it is,
my data folder > Animation_data,

96
00:06:09,190 --> 00:06:11,320
and I'm going to paste it in.

97
00:06:11,320 --> 00:06:13,650
There it is, neatly pasted in.

98
00:06:15,060 --> 00:06:20,848
And when I run this,
let's close the ImageSaver, you'll see,

99
00:06:23,204 --> 00:06:27,965
I've got exactly the same code that
Marco has been telling us about.

100
00:06:27,965 --> 00:06:34,766
Animation_data, movie is the name of the
actual movie, and then we've got a number.

101
00:06:34,766 --> 00:06:39,252
We know there's a 134 images because I
know that's the biggest number on any of

102
00:06:39,252 --> 00:06:40,107
those images.

103
00:06:40,107 --> 00:06:42,743
Let's just check that's true.

104
00:06:42,743 --> 00:06:48,641
Yeah, 134, so that's the last image
in the sequence, and we load it in.

105
00:06:48,641 --> 00:06:53,086
Now, if we run that, you can see it here.

106
00:06:53,086 --> 00:06:57,989
I'm just going to show you how
that works on the iPad because

107
00:06:57,989 --> 00:07:00,563
I think I have it prepared.

108
00:07:00,563 --> 00:07:01,886
Here we go.

109
00:07:01,886 --> 00:07:07,923
Let's have some audio and
when I start, it plays it back.

110
00:07:07,923 --> 00:07:11,185
[MUSIC]

111
00:07:11,185 --> 00:07:12,322
And I can also change it.

112
00:07:12,322 --> 00:07:19,695
[MUSIC]

113
00:07:19,695 --> 00:07:22,867
And you'll notice that when I
change the speed of the app,

114
00:07:22,867 --> 00:07:26,962
it's not just the image that slows down,
it's the audio that slows down.

115
00:07:26,962 --> 00:07:31,118
So it'll synchronizes all those
image frames with the audio frames.

116
00:07:31,118 --> 00:07:32,661
And I can also get two loops at once.

117
00:07:32,661 --> 00:07:41,079
[MUSIC]

118
00:07:41,079 --> 00:07:41,716
That's all right.

119
00:07:41,716 --> 00:07:45,734
[MUSIC]

120
00:07:45,734 --> 00:07:46,731
And scratch them.

121
00:07:46,731 --> 00:07:55,717
[MUSIC]

122
00:07:55,717 --> 00:07:56,994
So let's have a look at how that works.

123
00:08:02,416 --> 00:08:05,011
So, actually,
before we go on to see how that works,

124
00:08:05,011 --> 00:08:08,410
you'll notice there's
also this black record.

125
00:08:08,410 --> 00:08:14,330
This record is spinning round and changing
speed based on how fast it's playing back.

126
00:08:15,420 --> 00:08:16,260
Now I've cheated.

127
00:08:16,260 --> 00:08:18,110
I could do it in two ways.

128
00:08:18,110 --> 00:08:21,480
I could do it by getting one image and
rotating it, or

129
00:08:21,480 --> 00:08:24,410
I could use the same technique
that Marco introduced to you,

130
00:08:24,410 --> 00:08:26,210
which we've just gone
through with our video.

131
00:08:26,210 --> 00:08:30,600
We can make a series of frames
of a record deck rotating, and

132
00:08:30,600 --> 00:08:32,150
we can just animate them in as a sequence.

133
00:08:32,150 --> 00:08:33,910
So that's what we've done in this case.

134
00:08:33,910 --> 00:08:39,073
If I show you in the data folder,
you'll see we've

135
00:08:39,073 --> 00:08:45,092
got black-record.png, and
you'll notice it's a PNG.

136
00:08:45,092 --> 00:08:50,397
The main reason it's a PNG is that
we can have a transparency which

137
00:08:50,397 --> 00:08:55,911
means that we don't see a square
image with a round thing inside it.

138
00:08:55,911 --> 00:08:57,402
It's a PNG file, a PNG file, and

139
00:08:57,402 --> 00:09:00,400
that means it can have
a transparent background.

140
00:09:00,400 --> 00:09:03,510
Actually, PNG files can have
transparent insides as well, so

141
00:09:03,510 --> 00:09:04,380
you can have holes in them.

142
00:09:04,380 --> 00:09:06,858
We have an example of that just here,
I'll show you.

143
00:09:06,858 --> 00:09:08,959
We have a TV.

144
00:09:08,959 --> 00:09:12,418
If I show you the TV image,
it's actually transparent on the inside.

145
00:09:12,418 --> 00:09:16,850
So we have the TV in our application,
and we place the video behind it, and

146
00:09:16,850 --> 00:09:18,290
the TV sits on top of it.

147
00:09:20,135 --> 00:09:23,208
But the black record,
we've got a different position.

148
00:09:23,208 --> 00:09:24,900
If I cycle through all of these images,

149
00:09:24,900 --> 00:09:29,110
we got a different position for
each of the different rotations and

150
00:09:29,110 --> 00:09:33,150
we rotate around, and that's how we
create the illusion of it moving.

151
00:09:33,150 --> 00:09:37,190
And we update this image based
on the speed of playback.

152
00:09:37,190 --> 00:09:39,470
So let's quickly have
a look at how we do that.

153
00:09:39,470 --> 00:09:41,810
You can see here, we load those images in,

154
00:09:41,810 --> 00:09:43,780
we've loaded all
the images from the movie.

155
00:09:43,780 --> 00:09:46,450
We've loaded in the black-record
as a sequence of images.

156
00:09:46,450 --> 00:09:47,450
We've loaded in the TV.

157
00:09:47,450 --> 00:09:48,880
They're the only images that we have.

158
00:09:48,880 --> 00:09:53,390
We've loaded in our sounds in the same
way that we did with last week's session.

159
00:09:53,390 --> 00:09:56,750
And then we're doing exactly
what Marcos described to

160
00:09:56,750 --> 00:09:59,120
position all the elements on the screen.

161
00:09:59,120 --> 00:10:04,188
And then you'll see that
we can change the frame,

162
00:10:04,188 --> 00:10:09,025
the current frame,
based on the speed, okay?

163
00:10:09,025 --> 00:10:13,120
So every time we go through
the draw loop we can add 1 to

164
00:10:13,120 --> 00:10:17,767
the currentFrame number and
multiply by the current speed.

165
00:10:17,767 --> 00:10:20,858
And what that does is it just
tries to go from one part of

166
00:10:20,858 --> 00:10:24,244
the image sequence to the next
part of the image sequence.

167
00:10:24,244 --> 00:10:29,166
But because it's multiplied by the given
speed, it can slow it down or speed it up.

168
00:10:29,166 --> 00:10:32,147
I'll look again at that
in a bit more detail, but

169
00:10:32,147 --> 00:10:36,320
this value currentFrame tells us
what the current frame should be.

170
00:10:36,320 --> 00:10:40,800
And we use that to access
the current record.

171
00:10:40,800 --> 00:10:47,450
Okay, so moving on, how do we know when
we've actually selected a specific record?

172
00:10:47,450 --> 00:10:50,700
What we want to happen is we want to
touch the middle of the record or

173
00:10:50,700 --> 00:10:53,500
anywhere around the record and we want
it to start playing when we do that.

174
00:10:53,500 --> 00:10:55,590
And then when we touch it again,
we want it to stop.

175
00:10:55,590 --> 00:10:57,960
So here's a bit of code that does that.

176
00:10:57,960 --> 00:11:02,930
Basically, it's the dist method again and
we get the distance

177
00:11:02,930 --> 00:11:08,570
from the current mouse position
to the center of the record.

178
00:11:08,570 --> 00:11:12,579
And if that's less than
the width of the record player,

179
00:11:12,579 --> 00:11:16,862
then we basically say it's a hit and
we play back the sound.

180
00:11:16,862 --> 00:11:20,969
Now there's two of these methods,
one for each record deck, and

181
00:11:20,969 --> 00:11:26,198
that means that we can independently know
whether the user has touched one record or

182
00:11:26,198 --> 00:11:29,202
the other and
play back the appropriate sound.

183
00:11:29,202 --> 00:11:31,105
And it's all about
getting the distance and

184
00:11:31,105 --> 00:11:33,630
checking whether it's less than the width.

185
00:11:33,630 --> 00:11:38,290
So what we're basically saying is if
the mouseX and mouseY position are within

186
00:11:38,290 --> 00:11:44,870
the range of the entire graphic, then
that means the user's pressed the record.

187
00:11:44,870 --> 00:11:49,810
And we have one of these methods for
both records as I've said.

188
00:11:49,810 --> 00:11:55,670
I've also got another mouse interaction
which is a drag interaction,

189
00:11:55,670 --> 00:11:57,910
and this changes the speed adjustment.

190
00:11:57,910 --> 00:12:01,669
So how do we synchronize the two loops?

191
00:12:01,669 --> 00:12:07,833
[MUSIC]

192
00:12:07,833 --> 00:12:10,411
Now, they're not actually the same speed.

193
00:12:10,411 --> 00:12:15,310
What they are, are two loops trimmed in
the same way that Matt was showing you.

194
00:12:15,310 --> 00:12:19,221
So that they have the same number of
pauses, the same number of actual pauses,

195
00:12:19,221 --> 00:12:22,089
but that doesn't mean they're
the same length in time.

196
00:12:22,089 --> 00:12:24,710
They could be entirely different speeds.

197
00:12:24,710 --> 00:12:27,420
So, there's an easy way of
synchronizing these two loops together.

198
00:12:28,660 --> 00:12:31,250
One loop acts as the master, and
the other acts as the slave.

199
00:12:32,560 --> 00:12:34,220
If we know the length of each loop,

200
00:12:34,220 --> 00:12:36,500
we can synchronize the master
loop to the slave loop.

201
00:12:37,890 --> 00:12:44,814
So, the speed of the second record
player is basically a ratio.

202
00:12:44,814 --> 00:12:48,265
So if it was a one, it would be,
the speed ration of one,

203
00:12:48,265 --> 00:12:50,259
which means the current speed.

204
00:12:50,259 --> 00:12:55,160
If it's naught 0.5, it would be a speed
ratio of one half, so it's half the speed.

205
00:12:55,160 --> 00:12:58,650
If it's two,
it's a speed ratio of twice the speed.

206
00:12:58,650 --> 00:13:02,750
Now if we get the length of
the second player in milliseconds and

207
00:13:02,750 --> 00:13:06,270
we divide it by the length of
the first player in milliseconds.

208
00:13:06,270 --> 00:13:08,860
So we take the first loop,
we get the length in milliseconds, and

209
00:13:08,860 --> 00:13:10,750
we divide it by the length.

210
00:13:10,750 --> 00:13:15,210
Sorry, we get the second loop, we get the
length of the second loop in milliseconds,

211
00:13:15,210 --> 00:13:17,820
and we divide it by
the length of the first loop.

212
00:13:17,820 --> 00:13:18,840
Then that gives us a ratio,

213
00:13:18,840 --> 00:13:23,420
which tells us how fast the second
record player should go.

214
00:13:23,420 --> 00:13:25,283
And that's what this is doing here.

215
00:13:25,283 --> 00:13:32,093
player2.speed is player2.getLengthMs
divided by player1.getLengthMs.

216
00:13:32,093 --> 00:13:34,400
And that gives us our actual speed ratio.

217
00:13:36,050 --> 00:13:38,610
So player2's speed is found
by dividing it's length

218
00:13:38,610 --> 00:13:40,050
by the length of the master loop.

219
00:13:40,050 --> 00:13:41,490
And in this case,
player1 is the master loop.

220
00:13:44,050 --> 00:13:45,635
But as I've already described,

221
00:13:45,635 --> 00:13:48,360
we can change the speed using
the speedAdjust variable.

222
00:13:49,530 --> 00:13:54,680
And basically, the mouse and touch
interaction changes the multiplier, and

223
00:13:54,680 --> 00:13:56,540
you can see there's a bit of
code here that handles that.

224
00:13:56,540 --> 00:14:01,420
player1.speed is always going to be
equal to the same speed adjustment.

225
00:14:01,420 --> 00:14:06,315
So if I've got my mouse over here,
that's the master loop and

226
00:14:06,315 --> 00:14:08,396
that's the speed for it.

227
00:14:08,396 --> 00:14:10,462
[MUSIC]

228
00:14:10,462 --> 00:14:15,341
Player2's speed is as I've just described,
it's the length of player2

229
00:14:15,341 --> 00:14:19,929
divided by the length of player1
multiplied by the speed adjustment.

230
00:14:20,930 --> 00:14:24,667
And then the current frame, which is the
frame of the video, is current frame plus

231
00:14:24,667 --> 00:14:28,373
one times the speed adjustment and that's
what gives us this nice interaction.

232
00:14:28,373 --> 00:14:32,170
[MUSIC]

233
00:14:32,170 --> 00:14:35,924
So they're both really fast and
then they're both really slow and

234
00:14:35,924 --> 00:14:37,406
the video stays in synch.

235
00:14:37,406 --> 00:14:40,864
[MUSIC]

236
00:14:40,864 --> 00:14:43,210
I think I like it when
it's like this the best.

237
00:14:43,210 --> 00:14:45,752
[MUSIC]

238
00:14:45,752 --> 00:14:47,191
Out of time and really slow.

239
00:14:47,191 --> 00:14:56,869
[MUSIC]