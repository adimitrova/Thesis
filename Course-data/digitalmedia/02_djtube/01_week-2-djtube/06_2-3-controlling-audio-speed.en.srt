1
00:00:17,911 --> 00:00:20,236
[MUSIC]. 
Right in this weeks audio class we're 

2
00:00:20,236 --> 00:00:25,622
going to learn about how we can get more 
control over the audio. 

3
00:00:25,622 --> 00:00:28,566
You've already had a bit of a preview of 
that last week where towards the end of 

4
00:00:28,566 --> 00:00:31,740
the exercises you would have got into the 
depths of controlling audio and using the 

5
00:00:31,740 --> 00:00:35,863
various functions. 
What we're going to do this week is look 

6
00:00:35,863 --> 00:00:39,202
at a bit more detail about how audio is 
represented in the computer's memory 

7
00:00:39,202 --> 00:00:42,919
Wha-what's this thing we're telling it to 
play? 

8
00:00:42,919 --> 00:00:45,760
Wha-what's in there and what's it, what's 
happening? 

9
00:00:45,760 --> 00:00:48,260
So we're trying to, pick a few of those 
details. 

10
00:00:48,260 --> 00:00:54,100
And then we'll look at some more, control 
methods, for, for controlling audio 

11
00:00:54,100 --> 00:00:59,000
playback using RAPI. 
So here's a, here's a starter slide 

12
00:00:59,000 --> 00:01:02,960
showing you how Computers represent 
sound. 

13
00:01:02,960 --> 00:01:07,110
So what have we got? 
We've got this, two blocks here. 

14
00:01:07,110 --> 00:01:11,130
So, the, the block, the, the has the 
number zero through seven. 

15
00:01:11,130 --> 00:01:13,992
So imagine that's a short snippet of 
sound. 

16
00:01:13,992 --> 00:01:18,880
Only seven, seven little snapshots of 
sound. 

17
00:01:18,880 --> 00:01:24,150
that would last a very, very short time. 
Because sound in a, in a machine is 

18
00:01:24,150 --> 00:01:26,010
typically represented with a lot of 
numbers. 

19
00:01:26,010 --> 00:01:29,480
So it's, it's very similar to, something 
that you might be more familiar with, 

20
00:01:29,480 --> 00:01:34,910
which is the idea of, of a video, and, 
and film being chopped into frames. 

21
00:01:34,910 --> 00:01:36,620
We do the same thing with sound in a 
computer. 

22
00:01:36,620 --> 00:01:40,740
We slice it into frames, called samples, 
and then we just play those out through 

23
00:01:40,740 --> 00:01:46,710
the sound card in sequence. 
Now, if we, if we look at those frames, 

24
00:01:46,710 --> 00:01:49,300
what's actually in them, it's slightly 
different from the video. 

25
00:01:49,300 --> 00:01:53,690
So in the, in the case of audio, there 
are a lot of frames, there could be up 

26
00:01:53,690 --> 00:01:59,940
to, well, a typical sample, right say, 
for a good quality audio, would be 44,100 

27
00:01:59,940 --> 00:02:04,080
of these frames, of these samples per 
second, which is a lot of data. 

28
00:02:04,080 --> 00:02:11,440
So this is, this is way compressed audio 
formats exists like mp3 because it makes 

29
00:02:11,440 --> 00:02:15,900
it possible to reduce the amount of data 
required to store the audio but maintain 

30
00:02:15,900 --> 00:02:18,520
the quality. 
But in this example we're going to be 

31
00:02:18,520 --> 00:02:22,902
working with uncompressed data, which is 
just the raw numbers that represent that 

32
00:02:22,902 --> 00:02:24,320
audio signal. 
So let's have a look. 

33
00:02:24,320 --> 00:02:29,120
So in the first box here, you can see, 
I've illustrated what the real contents 

34
00:02:29,120 --> 00:02:32,340
of a, of a single sample might be in the 
computer's memory. 

35
00:02:32,340 --> 00:02:37,780
So I've represented it with the binary 
number, which, which converts to 27 in 

36
00:02:37,780 --> 00:02:40,630
base ten. 
Those of you, in, in the numbers you'll 

37
00:02:40,630 --> 00:02:44,420
be more familiar with. 
So you don't need to worry too much about 

38
00:02:44,420 --> 00:02:47,000
that conversion. 
But it's just to show you that the 

39
00:02:47,000 --> 00:02:50,550
computer's memory is taking up 16 of 
these zeros and ones to represent one of 

40
00:02:50,550 --> 00:02:54,480
those samples. 
Sometimes it might take 24 if it's a 

41
00:02:54,480 --> 00:02:57,650
higher quality audio. 
But in the examples we're working with 

42
00:02:57,650 --> 00:03:02,340
here, typically it's going to be 16. 
So we use 16 zeros and ones to represent 

43
00:03:02,340 --> 00:03:08,400
one single snapshot of sand. 
And, we use say, 44,100 of those 

44
00:03:08,400 --> 00:03:12,169
snapshots to represent one second of 
sound. 

45
00:03:12,169 --> 00:03:17,280
Okay, so what I've, I've, I've shown you 
here is that, that chunk of memory which 

46
00:03:17,280 --> 00:03:21,920
is represented by those boxes can extend 
to you know, many thousands of, of spaces 

47
00:03:21,920 --> 00:03:27,180
in the memory So we talk about the sample 
rate which is the number of those samples 

48
00:03:27,180 --> 00:03:29,560
that are used to represent the signal per 
second. 

49
00:03:29,560 --> 00:03:34,610
The higher the sample rate the more 
accurate the representation of the sound, 

50
00:03:34,610 --> 00:03:36,910
the wider range of sounds we can 
represent. 

51
00:03:38,250 --> 00:03:43,204
the bit depth is another property which 
is as I said earlier the number of 0s and 

52
00:03:43,204 --> 00:03:47,350
1s that I use to represent each of those. 
Snapshots. 

53
00:03:47,350 --> 00:03:50,440
So if we have a very low bit depth, what 
happens is the samples are very 

54
00:03:50,440 --> 00:03:54,710
inaccurate. 
Because they don't have enough range to 

55
00:03:54,710 --> 00:03:58,025
represent all the possible values that 
sample might have. 

56
00:03:58,025 --> 00:04:02,580
But if you have a higher bit depth. 
then you can, you can store a much more 

57
00:04:02,580 --> 00:04:05,820
accurate representation of sound. 
Now I've got a, an animation which shows 

58
00:04:05,820 --> 00:04:07,680
that. 
Perhaps more clearly. 

59
00:04:07,680 --> 00:04:13,060
So the first animation I'm going to show 
illustrates what happens if you increase 

60
00:04:13,060 --> 00:04:15,220
the sample rate. 
So we'll start with a very low sample 

61
00:04:15,220 --> 00:04:20,400
rate and we'll see what a typical smooth 
signal looks like. 

62
00:04:20,400 --> 00:04:23,860
Now, it will start off very blocky and 
then get much smoother as it goes. 

63
00:04:23,860 --> 00:04:25,368
So let's have a look at the animation 
now. 

64
00:04:25,368 --> 00:04:31,050
So, as the, as the pointer moves across 
the screen, the sample rate increases. 

65
00:04:39,240 --> 00:04:42,260
So, you can see the signal is, kind of, 
getting smoother and smoother. 

66
00:04:45,480 --> 00:04:50,040
And the smoother the signal, the more 
accurate It is in, as a representation of 

67
00:04:50,040 --> 00:04:52,896
the original sound. 
So remember, earlier, I was recording 

68
00:04:52,896 --> 00:04:56,970
myself hitting something. 
And and when I play that back, I want to 

69
00:04:56,970 --> 00:05:01,250
hear an accurate recording of that. 
I don't just want to hear a really rough 

70
00:05:01,250 --> 00:05:04,960
inaccurate recording of it. 
So, having a high sample rate allows 

71
00:05:04,960 --> 00:05:08,670
that. 
So, on the next slide, we're going to see 

72
00:05:08,670 --> 00:05:13,610
what the, what the representation looks 
like, as we increase the bit depth, is a 

73
00:05:13,610 --> 00:05:17,750
kind of similar effect, in that it 
becomes less blocky as you increase the 

74
00:05:17,750 --> 00:05:27,780
bit depth, but it's totally different. 
Okay. 

75
00:05:27,780 --> 00:05:31,940
What we might say is that increasing the 
bit depth increases the vertical 

76
00:05:31,940 --> 00:05:37,560
resolution, the resolution from top to 
bottom on the y axis, which represents 

77
00:05:37,560 --> 00:05:39,980
how loud the signal was at any given 
time. 

78
00:05:39,980 --> 00:05:45,990
Whereas increasing the sample rate 
changes the horizontal resolution, which 

79
00:05:45,990 --> 00:05:48,140
is, if you like, how precise it is in 
time. 

80
00:05:49,910 --> 00:05:52,770
So the sample rate represents the, the 
precision in time. 

81
00:05:52,770 --> 00:05:56,810
Whereas the bit depth represents the 
precision in, in the actual measurements 

82
00:05:56,810 --> 00:05:58,334
that we're taking. 
Okay. 

83
00:05:58,334 --> 00:06:03,750
So that's the end of the theory section. 
We're now going to look at how we can get 

84
00:06:03,750 --> 00:06:07,430
more control over this, this sound. 
And, and, and to, to understand what, 

85
00:06:07,430 --> 00:06:09,250
what we're doing when we're changing 
those controls. 

86
00:06:09,250 --> 00:06:14,090
So the first thing we're going to try and 
do It's to create an interactive speed 

87
00:06:14,090 --> 00:06:18,350
slider which allows us to vary the speed 
of the playback. 

88
00:06:18,350 --> 00:06:22,030
So you can see in this code here that I'm 
first calculating a ratio. 

89
00:06:24,700 --> 00:06:29,770
So now I'm going to demonstrate how you 
can vary the speed of the sample 

90
00:06:29,770 --> 00:06:33,790
playback. 
So remember the speed, relates to the 

91
00:06:33,790 --> 00:06:36,830
sample rate if you like. 
So it's the speed of playback is how 

92
00:06:36,830 --> 00:06:39,630
quickly we're flinging those numbers at 
the sound card. 

93
00:06:39,630 --> 00:06:42,960
So, if you increase the speed, it's 
going to zip through that, that, that 

94
00:06:42,960 --> 00:06:45,440
section of memory that, that's storing 
the sound faster. 

95
00:06:46,810 --> 00:06:50,180
So if we double the speed, it should get 
through twice as fast. 

96
00:06:50,180 --> 00:06:52,760
So let's just remind ourselves by playing 
it at normal speed. 

97
00:06:52,760 --> 00:06:58,440
So player, speed, one. 
Let's just run this app and see how it 

98
00:06:58,440 --> 00:07:00,280
sounds. 
So I'm running it now. 

99
00:07:02,390 --> 00:07:04,350
So it's now building for the Android 
device. 

100
00:07:04,350 --> 00:07:20,570
[SOUND] So that's, that's speed one, 
that's, that sounds very similar to how 

101
00:07:20,570 --> 00:07:22,380
it did when I actually played it in the 
real world. 

102
00:07:24,080 --> 00:07:30,153
What happens if I double the speed? 
Speed [NOISE] It's the 2. 

103
00:07:30,153 --> 00:07:41,410
[MUSIC] So that you can see that it 
sounds higher. 

104
00:07:41,410 --> 00:07:46,510
[MUSIC] So what's doing it, it's scanning 
through those [UNKNOWN] twice as fast as 

105
00:07:46,510 --> 00:07:50,246
sending them out to the sound card. 
Obviously, it's really boring, having to 

106
00:07:50,246 --> 00:07:53,470
continue, edit, and then run it on the 
device. 

107
00:07:53,470 --> 00:07:57,200
It'd be much nicer if we could experiment 
with the speed in an interactive way. 

108
00:07:57,200 --> 00:08:01,448
So what we're going to do is make a 
simple, if you like, slider that allows 

109
00:08:01,448 --> 00:08:07,133
us to slide the mouse pointer across the 
screen, or a finger across the screen, 

110
00:08:07,133 --> 00:08:08,280
and. 
Increase the speed. 

111
00:08:09,960 --> 00:08:14,060
Now speed is, is useful so in the range 
zero to two. 

112
00:08:14,060 --> 00:08:16,845
So that gives us an interesting range. 
'Kay, we just heard what it sounds like 

113
00:08:16,845 --> 00:08:21,080
if you play at speed two? 
Speed zero, it doesn't play at all, and 

114
00:08:21,080 --> 00:08:25,470
then and so on, up to two. 
So let, let's just listen to that by 

115
00:08:25,470 --> 00:08:30,650
making interactive slider. 
So what I'm going to do Is, in the draw 

116
00:08:30,650 --> 00:08:34,150
function I'm going to continually 
calculate a new speed for the player. 

117
00:08:39,030 --> 00:08:43,450
So I'm going to calculate, first of all, 
the ratio of the position of the mouse to 

118
00:08:43,450 --> 00:08:47,020
the width of the screen. 
And you'll see all this, these float, 

119
00:08:47,020 --> 00:08:49,549
things there. 
I'll explain what they are, they're for. 

120
00:08:50,000 --> 00:08:55,000
So, I do float ratio.
Now remember, float is a number that 

121
00:08:56,000 --> 00:08:59,000
is not a whole number, it's a
real number, so we can have

122
00:08:59,100 --> 00:09:04,000
say, 0.5 or 0.6. And in this case
we want to, because we've only got the

123
00:09:05,000 --> 00:09:10,000
range 0 to 2 for the speed in this example
we want to be able to specify that very precisely.

124
00:09:10,110 --> 00:09:15,740
So I'm going to take the floating point 
version of the mouse position and 

125
00:09:15,740 --> 00:09:19,520
floating point version of the width,and 
that, that would cause it to do the 

126
00:09:19,520 --> 00:09:26,010
calculation with these accurate numbers. 
If I didn't do this, it would do it in 

127
00:09:26,010 --> 00:09:28,690
whole numbers and I wouldn't get my 
accurate ratio. 

128
00:09:28,690 --> 00:09:31,640
So that's the ratio of the MouseX to the 
width. 

129
00:09:31,640 --> 00:09:34,380
What that means is, when they're on the 
far left of the screen it'll be zero and 

130
00:09:34,380 --> 00:09:36,350
when they're on the far right it'll be 
one. 

131
00:09:36,350 --> 00:09:44,292
Now I'm just going to scale that up by 
two, so that's in the range zero to two. 

132
00:09:44,292 --> 00:09:52,803
And then, I'll just call it player.speed 
with that value. 

133
00:09:52,803 --> 00:09:57,360
Okay. 
So that should mean I can now, change the 

134
00:09:57,360 --> 00:10:02,710
speed dynamically. 
What I might do, when I tap it should 

135
00:10:02,710 --> 00:10:06,950
queue it back to the beginning again. 
We'll set it to loop. 

136
00:10:06,950 --> 00:10:10,870
We'll set looping to true so that it's 
kind of You can continue to hear what's 

137
00:10:10,870 --> 00:10:12,970
going on. 
So let's play this sketch now, let's just 

138
00:10:12,970 --> 00:10:15,770
review that before we do it actually. 
So I'm just going to review what I just 

139
00:10:15,770 --> 00:10:19,750
typed. 
Player set looping is set to true, so 

140
00:10:19,750 --> 00:10:24,820
that it continually plays the sound. 
I've calculated the ratio of the position 

141
00:10:24,820 --> 00:10:27,960
of the mouse or the, or the finger tap on 
the screen. 

142
00:10:27,960 --> 00:10:32,630
Across the screen, scout it by two, and 
then sent into, for the speed, so I will 

143
00:10:32,630 --> 00:10:38,130
be setting a speed to a range from zero 
to two, so the idea is that when it's on 

144
00:10:38,130 --> 00:10:40,990
the far left of the screen you should 
play it slowly, when it's on the far 

145
00:10:40,990 --> 00:10:44,240
right of the screen it should play 
quickly. 

146
00:10:44,240 --> 00:11:08,000
Let's see what it does... 
[SOUND] Okay, so what you heard there was 

147
00:11:08,000 --> 00:11:16,006
me moving my finger around and varying 
the speed of the playback, as, as it was 

148
00:11:16,006 --> 00:11:19,722
playing the sample. 
Now if you do that with, with the break 

149
00:11:19,722 --> 00:11:26,928
beat, just as, by comparison, you'll see 
that it has a slightly different effect. 

150
00:11:26,948 --> 00:11:58,230
[MUSIC] Okay, so then you're getting 
towards more of a musical deejaying 

151
00:11:58,230 --> 00:12:03,780
experience where you can slow the sound 
down and then speed it back up again. 

152
00:12:03,780 --> 00:12:07,870
And it has a more performance feel to it 
rather than playing with the sound. 

153
00:12:07,870 --> 00:12:07,870
[MUSIC]. 