1
00:00:01,260 --> 00:00:04,235
This week's additional programming 
lecture is on arrays. 

2
00:00:04,235 --> 00:00:09,547
So last week we talked about variables. 
And I talked about how a variable is a 

3
00:00:09,547 --> 00:00:13,879
place in memory or a box in memory where 
you can put some data. 

4
00:00:13,879 --> 00:00:19,274
and that's obviously very useful for 
storing most types of data, and being 

5
00:00:19,274 --> 00:00:25,493
able to access it via name. 
But it's really suitable only for one 

6
00:00:25,493 --> 00:00:30,800
particular item of data, a single number, 
a single image. 

7
00:00:30,800 --> 00:00:34,222
Now part of the benefit of using a 
computer, is that you can compute lots 

8
00:00:34,222 --> 00:00:40,087
and lots of data. 
and we'll see in this week's lecture, how 

9
00:00:40,087 --> 00:00:44,189
we can use lots and lots of images to 
create an animation. 

10
00:00:44,189 --> 00:00:46,724
But to do that you need, a way of storing 
all of those images in a convenient way, 

11
00:00:46,724 --> 00:00:48,986
and not having a hundred variables, if 
you have a hundred images in one 

12
00:00:48,986 --> 00:00:55,770
dimension. 
And, that is where you have we use 

13
00:00:55,770 --> 00:01:04,114
something called an array. 
Now an array variable is created very 

14
00:01:04,114 --> 00:01:10,489
much like any other variable, except you 
have these two little square brackets. 

15
00:01:10,489 --> 00:01:15,039
makes it look a little like a box, but 
I'll come to exactly what those mean in a 

16
00:01:15,039 --> 00:01:18,914
minute. 
But we just put between the type of the 

17
00:01:18,914 --> 00:01:22,385
variable, int, and the variable name plus 
X. 

18
00:01:22,385 --> 00:01:26,417
We put these square brackets in that, it 
tells us that it's an array variable, 

19
00:01:26,417 --> 00:01:31,650
which is to, stor, study, storing one 
int, can store many integers. 

20
00:01:31,650 --> 00:01:36,770
And if we see down here at the bottom in 
memory, rather than a single box, it's a 

21
00:01:36,770 --> 00:01:43,265
lot of boxes, each with their own value 
of memory and number. 

22
00:01:43,265 --> 00:01:47,336
And you can access with a single name, 
posX with this, all of those boxes 

23
00:01:47,336 --> 00:01:50,934
together. 
It's a single variable, we can have lots 

24
00:01:50,934 --> 00:01:56,666
of different bits of data. 
So how do you access an individual item 

25
00:01:56,666 --> 00:02:00,066
of data? 
You access it with a number, and you use 

26
00:02:00,066 --> 00:02:04,060
these square brackets, this is where the 
square brackets come in. 

27
00:02:05,080 --> 00:02:09,640
There the way you get access to a 
particular item of the array, and inside 

28
00:02:09,640 --> 00:02:17,006
the square brackets, you put a number. 
So each of those boxes has a number, and 

29
00:02:17,006 --> 00:02:25,956
this is the way you get box number three, 
and you would get an item out that. 

30
00:02:25,956 --> 00:02:33,063
one thing to note, very importantly, is 
that it starts at 0, so the first element 

31
00:02:33,063 --> 00:02:39,370
in an array is element 0. 
you would naturally think it's element 1. 

32
00:02:39,370 --> 00:02:42,684
It is not, it's 0. 
And that will influence how you do 

33
00:02:42,684 --> 00:02:47,240
everything right. 
It's very important to be clear on that. 

34
00:02:47,240 --> 00:02:51,020
And that means if you've got a number 
element with 10 elements in and an array 

35
00:02:51,020 --> 00:02:54,800
with 10 elements in, the first element is 
on 0, and the last one is over 9, it is 

36
00:02:54,800 --> 00:03:00,890
not over 10, because it starts with 0. 
It can be a little bit confusing. 

37
00:03:00,890 --> 00:03:04,916
Unfortunate, that's just the way it 
works, and you will get used to it very 

38
00:03:04,916 --> 00:03:08,544
quickly. 
So this is how you set an element to the 

39
00:03:08,544 --> 00:03:14,143
array, just like you would set a variable 
to be, using the equals command. 

40
00:03:14,143 --> 00:03:18,498
You can set element 3 here, again using 
equals, but we have to use the square 

41
00:03:18,498 --> 00:03:22,899
brackets to get hold of that value. 
It's just like any ordin, ordinary 

42
00:03:22,899 --> 00:03:26,132
variable. 
This is how you create an array, one way 

43
00:03:26,132 --> 00:03:31,148
of creating an array. 
in the example we'll actually use a 

44
00:03:31,148 --> 00:03:36,250
function to create an array, but we 
declare a new variable. 

45
00:03:36,250 --> 00:03:42,046
there many type of create box in memory, 
to do this you say the type It's a, 

46
00:03:42,046 --> 00:03:47,558
called a floating point. 
When we have the square brackets, those 

47
00:03:47,558 --> 00:03:51,220
square brackets tell us it's not just one 
floating value, it's an array. 

48
00:03:52,230 --> 00:03:55,680
Give it a name, like any other variable. 
And then you create an array. 

49
00:03:55,680 --> 00:03:59,760
And this is, these curly brackets and a 
list of numbers. 

50
00:03:59,760 --> 00:04:01,930
That gives you an array. 
But we'll see in the actual example, 

51
00:04:01,930 --> 00:04:04,828
we'll do a different, use a different 
mechanism, and next week we'll use yet 

52
00:04:04,828 --> 00:04:08,245
another mechanism. 
but, but here is an example of creating a 

53
00:04:08,245 --> 00:04:11,100
very simple array, and then you can use 
element zero. 

54
00:04:11,100 --> 00:04:15,130
And you can use this syntax with the 
square brackets, the name of the array, 

55
00:04:15,130 --> 00:04:19,226
square brackets and number, to get any 
element. 

56
00:04:19,226 --> 00:04:23,384
And once you've got that element, you can 
use it in any way you'd use any other 

57
00:04:23,384 --> 00:04:30,100
variable, by any way you'd use a number. 
So it can just print it out, or you can 

58
00:04:30,100 --> 00:04:35,306
use it as inputs to do any command you 
like. 

59
00:04:35,306 --> 00:04:42,378
So you could do translate vals at zero, 
rotate, wrecked, any of these commands 

60
00:04:42,378 --> 00:04:49,688
that you're familiar with. 
So we can use rectval zero, we could use 

61
00:04:49,688 --> 00:04:55,360
fill vals zero, any of the commands 
you're used to. 

62
00:04:55,360 --> 00:04:58,660
Wherever you would use a normal variable, 
you could use an array variable, plus 

63
00:04:58,660 --> 00:05:03,660
squared brackets and a number. 
And that would just give you a number 

64
00:05:03,660 --> 00:05:07,388
value, like any other value. 
Very simple, and we'll in the main 

65
00:05:07,388 --> 00:05:12,483
example how you can use them with images, 
to create an animation. 