this lecture i'll talk about 
conditionals. 
which statements, which of the mechanisms 
we use in programs to make decisions. 
so, up to now, our programs have been 
responding to use an input in various 
ways, but always kind of doing the same 
thing. 
sometimes we want to do different things, 
depending on whether the user does 
different stuff, or different conditions 
happen in our program. 
so, we want to do a different thing when 
the mouse button is down from when it's 
up. 
we've seen some ways of doing that for 
the mouse button being up and down. 
we used the dragging mouse, mouse 
dragging method. 
and we'll look at a very general way for 
making that kind of decision in 
programming. 
so let's look at an example. 
so this is a very simple program that 
does roughly what we've done before. 
it draws points at the mouse position. 
this is not very different from the 
programs we've looked at last week except 
for. 
this draw method. 
rather than doing it in mouse drags, so 
when the mouse was moved, we're doing it 
in draw, and that means it's happening 
every front. 
that's a useful thing. 
we'll talk about it this week in terms of 
doing animations, where rather than 
simply responding to input from the user, 
we're. 
we're proactively animating the stuff. 
we need to do, do drawing actions and do 
animation actions constantly. 
not just when there's user input. 
that's why [inaudible] so what's 
happening is every frame we're drawing a 
point and, for the moment this doesn't 
get us very much but uh, [unknown] but 
we'll see there are other things we can 
do and draw in todays lecture. 
but in particular i'd like to look at 
copying the kind of functionality we had 
with mouse dragged using this draw 
method. 
now the main difference here is that when 
we use mouse dragged it would only work 
when the mouse is down, now it's working 
when the, both when the mouse is up and 
when it's down. 
if we do it this way, how would we go 
about, only drawing the point, when the 
mouse is pressed. 
so, we need to only draw the point, if 
the mouse is pressed. 
we need to make that decision, if the 
mouse is pressed, draw a point. 
if not, don't draw it. 
and the way we do that is use a method 
called an if statement. 
so we say, if mouse is pressed. 
draw a point [inaudible] this. 
if i drag the mouse pointer around the 
window, without the mouse pressed does 
nothing, the minute i press the mouse we 
start drawing. 
so that's really nice. 
now, i'm going to go back my slides to 
explain that. 
so this is roughly what we saw, i'm using 
an elipse rather than mouse points but 
pretty much is the same code of what if. 
and something inside the if, which is 
mousepressed, it's a variable. 
and this is a variable which takes on two 
values, it's either true, or it's false. 
i'll come back to that in more detail. 
and then, depending on whether it's true 
or false it does different things. 
so what that if does is if, the thing 
inside the brackets, the variable inside 
the brackets, in this case mousepressed 
is true, then we do that line that comes 
after it. 
good. 
we draw the, we draw the ellipse to the 
point. 
and then we carry on and do the rest of 
the program. 
if this thing inside the brackets is 
false, is not true - mousepressed is not 
true, so the mouse isn't pressed (no 
period) we don't do the line after each 
statement we just carry on straight 
ahead. 
so this if allows us to make a decision 
based on whether something is true or 
false. 
wherever in this case, when the mouse is 
pressed or not, we do different things. 
if the mouse is pressed, we draw the 
ellipse. 
if it isn't pressed, don't. 
we can do more complicated things. 
so the first thing is, well what if i 
want to do something special when the 
mouse isn't pressed. 
this is another example. 
if the mouse is pressed, if mousepressed 
is true, we draw a white background. 
then we do whatever else we want. 
but in this case, we've also got 
something different. 
we've got, as long as the if, we've got 
this thing, else. 
what this means what happens when the if 
bit isn't true. 
so when mousepressed is false. 
we do this other line, background zero, 
we do the bit that's attached to else. 
so we have an else, if which happens when 
it's true and and else which happens when 
it's false. 
we draw the background and then we carry 
on and do the rest of the [unknown]. 
note that i've indented the two bits of 
code that controlled by the if and the 
else. 
that's not necessary, it's not a, a 
crucial part of the program. 
the program won't complain if you don't 
do that. 
but it makes it a lot clearer to 
understand your code if every time you do 
an if, you indent it a bit. 
and that's just telling you. 
o so you better move it in a bit. 
and that tells you that this bit is 
controlled by the if statement. 
so this bit, is part of the code that's 
controlled by the if statement. 
another thing you can do, is you can have 
multiple commands from a single if 
statement. 
by combining them in these special curly 
brackets. 
you saw those curly brackets before, at 
the start and end of setup and draw, and 
mousepressed this is another instance. 
and they're really, curly brackets are 
always used to glue bits of code 
together. 
so that they can be used as if they were 
a single line of code instead of context. 
in this context, they're grouping them 
together, so they're all controlled by 
the mousepressed, and in this context, 
your, or both these lines of code will 
only happen if mousepressed is true. 
[noise] so let's look. 
what is mousepressed? 
well, i've shown you the slide a number 
of times now. 
there's lots of different types of data 
that could be, you know represents on the 
computer. 
mousepressed is a variable that can only 
take on two values, true and false. 
it's what we call a boolean variable. 
it's named after the magician george 
bool, who developed a system of 
mathematical logic based on values true 
and false. 
we can create a boolean variable just 
like any other variable. 
we give it a title, we need to give the 
title to the variable. 
that is boolean. 
and when we set a value, we have to set 
it either to false or to true. 
so if we want to, can have a variable 
which says whether the, background is 
black, we can set that to true or false. 
we can change the value of that variable 
just like any other variable and this is 
like a clever trick to do that. 
the exclamation mark means not. 
what that means is it means the opposite. 
so not black is the opposite of black. 
so if black is true, not black is false. 
black is false, not black is true. 
so it inverts it. 
and by setting black equals not black, we 
switch it to its opposite. 
so it's like, just like a little switch, 
light switch 
if we, if black is true and we hit not 
black, black equals not black then 
becomes false. 
if it is false, it becomes true. 
this is very useful because we can for 
example when we click, we can have put a 
line of code like this in mouse clicks. 
and, as we as we turn that varlible, 
variable on and off, whenever it's, mouse 
is clicked we can switch the value of one 
of our variables. 
and maybe we can see that as an example. 
so, let's first give an exam, a different 
example of using the example i gave with 
the else, [unknown] background. 
[sound] just going to swap things round. 
so now we're using both an if bit and an 
else bit. 
so that something different will happen 
in either case if the mouse is pressed. 
or the mouse is, to code the in 
background. 
and i'm not holding the mouse button 
down. 
and the background is white. 
the minute i do it turns black. 
okay, let's try creating our own reading 
variable. 
our own version of mousepressed. 
and we can make that bo, be created 
boolean variable. 
give, give it type boolean. 
set it, call it black. 
and set it initially to false. 
[noise] and we can use the variable black 
in this if statement and, and, when you 
run the program, it's not going to do 
anything in interesting because black is 
always false, you can't change it. 
so let's change it when we click the 
mouse. 
[noise] so you put it in the 
mousepressed, and we did, black equals 
not black, exactly what i showed you. 
and every time i click the mouse the 
value of our black boolean variable 
switches, and the color of this, the 
window changes. 
now, we can do other useful things. 
we don't just have to use boolean 
variables. 
what's happening here? 
well, this is what's called a boolean 
expression. 
so we, we can use expressions as well as 
variables, and a boolean expression is a 
bit of maths that is a literal false. 
this boolean expression is checking the 
value of a key. 
has been pressed on keyboard. 
what it's saying, if this key expression 
is equal to the character bits so i'll 
press the b key. 
now you notice i'm using two equal signs. 
that's because a single equal sign as we 
saw last week, means becomes equal to. 
so, we're setting the value of the 
variable. 
two equals signs, we're not setting the 
value of the variable key doesn't become 
b, we're checking if it is b. 
we're, we're checking the value of a 
variable. 
so, we have to remember the difference 
between these two equals signs, and 
that's an common thing to trip up on. 
it's easy to forget when there's single 
equals and when there's double equals. 
if you're using inside an if statement, 
you should always be using a double 
equals. 
just to let you know, just, the single 
quotation marks means i'm working with a 
single character. 
double quotes means i'm working with 
words and not strings of characters. 
[sound] so we've got a bunch of specials, 
we've seen a double equals and that's our 
first boolean expression. 
so if we have two values, a variable or a 
value, we can check if they are equal to 
each other and that's true if they're the 
same, false if otherwise. 
we can also test out things like we can 
test whether one value is less than 
another value. 
so this little arrow here is true if the 
thing on the left of it is less than the 
thing on the right of it. 
you've got a variant of that called less 
than or equals. 
the straight less than is false if the 
two are the same. 
less than or equals is true if they're 
the same, and if they're, if the thing on 
the left is less than the thing on the 
right. 
same goes for the greater than, the thing 
on the left is more than the thing on the 
right, or more than or equal to it. 
we've already seen not, that means the 
opposite of a boolean value, and we also 
have not equal to, so we can check if 
something is worth checking they are the 
same, we can check if they are different. 
[noise] so we can think of, look at some 
more complicated examples. 
for example, what if we want the position 
of the mouse to change the background 
color? 
and this is a boolean expression which 
checks if the mouse position is less than 
half the width of the screen, so the 
mouse position is less than the middle of 
the screen the mouse x, so the mouse is 
on the left of the screen. 
so if we look here we have mouse position 
there, where the red circle is. 
well, mouse x is going to be less than 
half the width. 
that's going to be true. 
you're going to draw the background in 
black. 
if the mouse pointer is there on, where 
the other circle is. 
mouse actually is going to be more than 
the width of the screen. 
so it's going to hit the else part. 
which is going to about them once. 
we can even combine these things. 
so we can have an if statement inside an 
if statement. 
so we can check if the mousex is less 
than the width divided by 2 and inside 
that, we can check even further down, 
divide this screen up again check this. 
more than the width divided by 4. 
so we can create a little line down the 
middle of the screen. 
so, if we look at the red point there, 
that's less than half the width. 
that's true. 
it's more than a quarter of the width. 
so that's true. 
so we draw the background in black. 
put a point there. 
then it's still less than half, half the 
width but it's more than a quarter of the 
width. 
so it's less than a quarter of the width. 
so that the second if statement is false. 
and we can engage down to this else bit. 
which is the else bit that the e no if 
statement. 
the secondary statement. 
[unknown] in white. 
the point's all the way over there. 
the first if statement is false. 
we never get to the second if statement 
because the second if statement is inside 
the first one. 
we just get to the else part of the if 
statement and it draws the screen white. 
[sound] we can also combine together 
boolean expressions in other ways. 
so if you have two boolean expressions a, 
a and b, we can combine them together 
with this double ampersand here which 
says if a, both a and b are true, so both 
of these things are true, do something. 
or we could do it the other way around 
and do these two lines, which say if a is 
true or b is true, or both are true, so 
only one of them have to be true and 
[inaudible]. 
together. 
let's have a look at this example. 
this is a, an easier way of writing what 
i've just done. 
doing this line. 
so what that double-edge statement i 
showed you a couple of slides back did, 
was check basically if the mousex is on 
the left or the middle of the screen and 
on the right is a line that's a quarter 
of the way across the screen. 
instead of doing 2 if statements, we can 
use an and. 
which checks, this expression. 
if this point it's true. 
checks that expression, which is also 
true. 
for the total expression here both of 
them have to be true 'cause i'm using 
that double and, what we call and, and 
because they're both true we do the true 
part of the if statements. 
if we move here, the first part is still 
true, but the second part is false. 
they're not both true so we'll move down 
to the else part. 
assuming over there they're both false, 
neither of them are true, use the else. 
now if we change from and to or we have a 
different effect, so we're looking this 
time if mousex is more than the width 
over two or less than width divided by 
four, so we're doing kind of the 
opposite. 
we're looking at, you know, the side of 
that little bar down the middle of the 
screen. 
so if we look at this one here, it's not 
more than the width divided by two, but 
it is less than width divided by four. 
so that's true. 
so one of them is true, so only one of 
those needs to be true to, for the whole 
all statement to be true, if we're using 
all. 
so we do the true part of the if 
statement. 
if we look there, well, mouse x greater 
than width is still false, it's still not 
true. 
and this time, but it's no longer less 
than width divided by 4, so that part's 
also false. 
they're both false, so we get the else. 
if you look over here, well, mousex is 
more than width, that's true. 
the other part is not true, it's still 
false. 
so we've, but one of them is still true, 
so we go to the if path, because we use 
them all. 
so, that's the end of my lecture on 
conditionals, if statements and we'll be 
using some examples of if statements in 
the main lectures. 
thank you very much. 
