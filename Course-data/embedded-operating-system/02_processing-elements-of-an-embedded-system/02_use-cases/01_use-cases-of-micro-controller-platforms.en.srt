1
00:00:00,088 --> 00:00:06,193
[MUSIC]

2
00:00:06,193 --> 00:00:09,460
Hello, I'm good to see
you back in our course.

3
00:00:09,460 --> 00:00:11,230
Before we start with this video,

4
00:00:11,230 --> 00:00:15,480
let me remind you what has been
covered in earlier videos.

5
00:00:15,480 --> 00:00:21,210
By now, you should have an idea of what
an embedded processor is and how it works.

6
00:00:21,210 --> 00:00:25,320
You should also be familiar with
the features of an embedded processor.

7
00:00:25,320 --> 00:00:26,850
I must remind you again,

8
00:00:26,850 --> 00:00:30,700
that in this course we make
emphasis on microcontrollers.

9
00:00:30,700 --> 00:00:33,410
Therefore, the large field
of embedded processors

10
00:00:33,410 --> 00:00:35,500
is now reduced to only microcontrollers.

11
00:00:37,970 --> 00:00:42,560
After you learn about microcontrollers,
the next step would be to somehow

12
00:00:42,560 --> 00:00:45,620
put your hands on them and
start actually working with them.

13
00:00:47,060 --> 00:00:51,500
One way to do so
is to buy a microcontroller breadboard,

14
00:00:51,500 --> 00:00:57,910
set of resistors, capacitors, wires, and
whatever else is necessary to build proper

15
00:00:57,910 --> 00:01:02,210
electrical circuits and assemble all the
circuits by yourself on the breadboard.

16
00:01:03,300 --> 00:01:07,150
Well, it doesn't sound cool
because it's a long process.

17
00:01:07,150 --> 00:01:11,480
And you know there is always one resistor
that you need that is missing, and

18
00:01:11,480 --> 00:01:15,775
in the end there will be little motivation
to continue playing with microcontrollers.

19
00:01:16,930 --> 00:01:21,070
Luckily, there is another option
to buy a ready made platform

20
00:01:21,070 --> 00:01:24,800
with a mounted microcontroller and
to start working with it immediately.

21
00:01:25,900 --> 00:01:29,110
And in this video we're going
to talk about these platforms.

22
00:01:30,730 --> 00:01:32,690
Let's start with Arduino.

23
00:01:32,690 --> 00:01:36,250
Arduino is a widely known platform for
fast prototyping.

24
00:01:37,250 --> 00:01:41,490
The platform uses Atmel
microcontrollers at its core.

25
00:01:41,490 --> 00:01:45,620
Overall there are about
24 boards available.

26
00:01:45,620 --> 00:01:49,980
On the website, you can find them
organized according to application areas,

27
00:01:49,980 --> 00:01:53,400
such as Internet of Things,
wearable, and others.

28
00:01:54,720 --> 00:01:59,100
Besides the boards, there are many
shields built specifically for

29
00:01:59,100 --> 00:02:00,760
our Arduino devices.

30
00:02:00,760 --> 00:02:03,909
The functionality of
these shields vary a lot.

31
00:02:03,909 --> 00:02:09,650
For example, with an MP3 shield you can
build your own MP3 player if you need one.

32
00:02:10,910 --> 00:02:14,480
A Wi-Fi shield is a great
tool to build applications

33
00:02:14,480 --> 00:02:17,720
let's say in the domain
of Internet of things.

34
00:02:17,720 --> 00:02:20,729
And a joystick shield is suitable for
control purposes.

35
00:02:21,780 --> 00:02:25,020
So if you want to extend
the functionality of the board and

36
00:02:25,020 --> 00:02:27,250
your application,
you can plug in a shield.

37
00:02:28,390 --> 00:02:32,420
Luckily it can easily be done thanks
to the sockets installed in Arduino.

38
00:02:33,710 --> 00:02:38,800
Arduino also provides its own integrated
development environment for software

39
00:02:38,800 --> 00:02:44,390
development, which is easy to use and
really speeds up the development process.

40
00:02:46,880 --> 00:02:52,320
The second platform that I would like
to mention is the STM Nucleo platform.

41
00:02:52,320 --> 00:03:01,140
At its core there are STX complex
Cortex M microcontrollers from M0 to M4.

42
00:03:01,140 --> 00:03:04,570
So we can choose here between speed and
energy consumption.

43
00:03:05,690 --> 00:03:08,780
The boards also have extension connectors,
and

44
00:03:08,780 --> 00:03:13,870
the connectors are compatible with
Arduino shields which is very convenient.

45
00:03:13,870 --> 00:03:18,309
And also there is the so-called Morpho
connector for other kind of shields.

46
00:03:19,540 --> 00:03:22,140
A very convenient feature of this platform

47
00:03:22,140 --> 00:03:25,800
is that the programmer/debugger
is mounted on the board.

48
00:03:27,000 --> 00:03:29,490
There in an online ID available for

49
00:03:29,490 --> 00:03:34,490
this platform as well as a whole set
of tools including operating system,

50
00:03:34,490 --> 00:03:38,479
tools, and developer ecosystem for
building Internet of Things solutions.

51
00:03:39,800 --> 00:03:42,581
Offline IDEs are also available.

52
00:03:42,581 --> 00:03:45,952
They are more complex than Arduino's one,
but

53
00:03:45,952 --> 00:03:49,162
they give you more
freedom to the developer.

54
00:03:49,162 --> 00:03:52,700
I would say that this platform is for
more experienced users.

55
00:03:54,390 --> 00:03:58,700
Here I mentioned two kinds
of general purpose platforms

56
00:03:58,700 --> 00:04:03,880
that can be extended with the help of
shields to target some specific areas.

57
00:04:03,880 --> 00:04:06,310
There are, of course,
more platforms available on the market.

58
00:04:07,320 --> 00:04:12,200
Some of them target one specific area and
might not be extensible.

59
00:04:12,200 --> 00:04:15,080
So there is a legit
question you might have.

60
00:04:15,080 --> 00:04:18,883
How do I select a certain
platform from this diversity?

61
00:04:18,883 --> 00:04:24,310
First of all, the choice obviously
should be application-oriented.

62
00:04:24,310 --> 00:04:28,200
For example, if you want to do
some digital signal processing,

63
00:04:28,200 --> 00:04:33,680
you might want to use microcontroller
that supports some DSP operations.

64
00:04:33,680 --> 00:04:37,670
If you need high computational power,
then cortex M4 or

65
00:04:37,670 --> 00:04:42,290
cortex M3 microcontrollers would suit you
well since they have the highest clock

66
00:04:42,290 --> 00:04:45,204
frequency among the previous
mentioned MCUs.

67
00:04:46,505 --> 00:04:53,962
Therefore your choice would be either
Arduino Due or STM Nuclear Cortex M4 M3.

68
00:04:53,962 --> 00:04:58,461
If the small size is crucial for you and
there is no need of high performance,

69
00:04:58,461 --> 00:05:01,290
then you probably want
to check Arduino micro.

70
00:05:02,450 --> 00:05:07,250
It is also important to consider that
platforms are interchangeable in

71
00:05:07,250 --> 00:05:12,270
the sense that the same application can be
implemented on two different platforms.

72
00:05:13,710 --> 00:05:18,450
Something I would like to emphasize
is that a community is crucial

73
00:05:18,450 --> 00:05:20,340
when it comes to choosing a platform.

74
00:05:21,490 --> 00:05:26,190
The bigger the community is, the more
likely the problems you might face

75
00:05:26,190 --> 00:05:30,650
have already been solved by someone else,
in which case you can

76
00:05:30,650 --> 00:05:35,590
probably find the answer in the Internet.

77
00:05:35,590 --> 00:05:39,775
Now I would like to show you a real
project that was implemented using

78
00:05:39,775 --> 00:05:41,590
microcontrollers.

79
00:05:41,590 --> 00:05:42,740
It is a metering system.

80
00:05:43,880 --> 00:05:48,120
Imagine that we have a tube, and there is
some liquid flowing through that tube.

81
00:05:49,330 --> 00:05:52,660
The goal of the system is to
measure the liquid's flow speed.

82
00:05:53,930 --> 00:05:55,830
Since we know the size of the tube,

83
00:05:55,830 --> 00:06:00,000
we need to calculate the volume of
the liquid during that time interval.

84
00:06:00,000 --> 00:06:04,860
And finally, we need to store
those measurements in a memory.

85
00:06:04,860 --> 00:06:09,660
What is more, the device should have
user interface, like a keyboard and

86
00:06:09,660 --> 00:06:10,370
a small screen.

87
00:06:11,450 --> 00:06:12,550
So, where to start?

88
00:06:13,570 --> 00:06:17,630
Well, we start by dividing
the tasks in two components,

89
00:06:17,630 --> 00:06:19,800
the metering unit and the control unit.

90
00:06:22,010 --> 00:06:26,479
The next thing to do would be to decide
how to measure liquid flow speed.

91
00:06:27,620 --> 00:06:30,460
This can be done using ultrasound.

92
00:06:30,460 --> 00:06:35,360
We need to emit an ultrasonic sound,
receive it back,

93
00:06:35,360 --> 00:06:38,640
and do some spectral analysis to
estimate the liquid flow speed.

94
00:06:39,710 --> 00:06:43,590
Don't worry if you don't understand
what a spectral analysis is.

95
00:06:43,590 --> 00:06:46,090
Here what I want to show
you is the approach.

96
00:06:47,170 --> 00:06:51,040
So we need to do some digital signal
processing to get the liquid flow speed.

97
00:06:52,300 --> 00:06:56,010
After we get those measurements,
we do some simple averaging, and

98
00:06:56,010 --> 00:06:58,690
finally we store those
processed measurements.

99
00:06:59,800 --> 00:07:04,890
Okay, so we have a set of tasks,
signal processing, averaging,

100
00:07:04,890 --> 00:07:07,790
storing, and the user interface.

101
00:07:07,790 --> 00:07:12,760
It would make sense to map the set
of tasks onto two microcontrollers.

102
00:07:12,760 --> 00:07:15,240
Let's say signal processing
will be done on MCU 1, and

103
00:07:15,240 --> 00:07:18,370
we will call this part the metering unit.

104
00:07:19,390 --> 00:07:24,590
The other tasks will run on the control
unit, which will be implemented on MCU2.

105
00:07:26,230 --> 00:07:30,400
Both parts will be connected
together using a UART interface.

106
00:07:31,540 --> 00:07:35,250
Since MCU1 does spectral analysis,

107
00:07:35,250 --> 00:07:40,970
Cortex M4 microcontroller would suit well,
since it has DSP extensions.

108
00:07:40,970 --> 00:07:44,620
And we will also need an ADC to
sample the ultrasonic signal.

109
00:07:46,720 --> 00:07:51,177
On the other hand, MCU2 does not
need to support DSP operations.

110
00:07:51,177 --> 00:07:54,781
But it need to be fast enough
to communicate with a screen and

111
00:07:54,781 --> 00:07:58,110
a keyboard while doing
the averaging at the same time.

112
00:07:59,440 --> 00:08:03,610
It should have enough pins to
work with a keyboard and at least

113
00:08:03,610 --> 00:08:08,600
two UART units to work with the screen and
to communicate with the metering unit.

114
00:08:10,500 --> 00:08:12,560
Cortex M3 would fit well.

115
00:08:14,370 --> 00:08:17,480
It is useful to leave some room for
expansion.

116
00:08:17,480 --> 00:08:21,310
This means you might want to have some
extra functionality to the device

117
00:08:21,310 --> 00:08:22,680
in the future.

118
00:08:22,680 --> 00:08:25,290
Therefore, the selected microcontrollers

119
00:08:25,290 --> 00:08:29,290
should have enough resources in
terms of performance and memory.

120
00:08:30,910 --> 00:08:34,970
Finally, it is important to notice
that the system can be implemented

121
00:08:34,970 --> 00:08:36,050
in many other ways.

122
00:08:37,920 --> 00:08:40,790
In this video we discussed
the ways on how to

123
00:08:40,790 --> 00:08:44,910
actually start working with
microcontrollers using platforms.

124
00:08:44,910 --> 00:08:48,844
Hopefully, now you have an idea of how
to pick an appropriate platform for

125
00:08:48,844 --> 00:08:49,930
your application.

126
00:08:49,930 --> 00:08:51,479
Good luck.

127
00:08:51,479 --> 00:08:55,559
[SOUND]