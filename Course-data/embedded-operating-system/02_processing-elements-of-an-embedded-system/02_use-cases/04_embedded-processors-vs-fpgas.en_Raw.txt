[music]
hello and welcome back to the course.
by now,
i hope you know about microcontrollers and
netfpgas as well as about their features.
in this video, we will show the steps you
need to follow to make them actually work
this sequence of steps is
called a design of work flow.
obviously, design flows for
microcontrollers and spgas are different.
we will start with microcontrollers, so
after the application that you
want to implement is selected.
and the choice of the appropriate
microcontroller platform is done,
it is time to actually start
building the solution.
first, you may want to select
a programming language that you will use.
there are three popular
programming languages for
microcontrollers, assembler, c, and c++.
sometimes developers use the language
which they know the best or
the choice may be dictated
by the project itself.
if, for example,
the project is built using c and
it will cause less trouble if a project
extension will be done on c as well.
however, the solution can benefit from
each programming language differently.
assembler is a very efficient
way to build a solution where
the generated code is fast and
takes less memory.
also, assembler lets you investigate
the inner structure of the hardware.
but unluckily, it is less convenient for
humans to read a program
written in assembler.
what is more,
the larger the solution becomes,
the more difficult it is to maintain and
debug assembly code.
fortunately, memory cost is low and
micro controllers nowadays
are cheaper than they used to be.
this fact enables the use of more
human friendly programming languages,
such as c or c++.
these languages allow
developers to build vigor and
more complex solutions,
which are easier to maintain and extend.
though, it is still possible
to write assembly code for
critical parts of the program,
combining c and assembler.
even though all required tools,
such as compilers,
linkers, can be used manually, to build
an executable for a microcontroller.
it is often more convenient,
to build a solution in an integrated
development environment.
some vendors develop their own ids.
for example, admil, has admil studio but
there, of course, more options.
eclipse ide is one of them.
this is a free ide for our range of
platforms and programming languages.
usually vendors release supplementary
libraries to ease the use of their devices
and speed up the design process.
after the code is written and an
executable file is built, the firmware can
be loaded via programming interface such
as or be a bootloader if it is installed.
the next steps will be to execute
the solution, verify it and
refine the program if needed.
the design flow for
fpgas comprises design entry,
design synthesis, design
implementation and device programming.
design entry creation includes
creating a project and
adding it to the project design files.
those files include the actual description
of the hardware that you want to have in
one of the hardware description languages
such as for example, vhdl or verilog.
also the design entry might include pin
assignment and area constraint files.
in a simplified way an fpga
design can be represented
as module that has inputs and outputs.
the top module can include many other
smaller modules connected together.
bhdl which is a widely used for
outdoor development supports such
modular style of development.
to make a simple example, let's see how a
basic or gate can be implemented in bhdo.
the description consists of two parts,
entity and architecture.
entity declares inputs and outputs as
well as their types in later stages,
this inputs and outputs can be mapped
to certain physical pings of an fpga.
the architecture describes
the actual implementation.
in other words, in the architecture
section inputs are mapped to outputs.
a certain entity may have several
architectures before the design synthesis,
it is important to verify the design
entry by running simulations.
simulation allows to check if the
functionality of the design is correct.
during the design synthesis stage,
the code syntax will be checked.
the hierarchy of the design
will also be analyzed,
which ensures that the design is
optimized for the chosen architecture.
the result of this stage is a netlist,
which is a textual representation of
a circuit diagram or a schematic.
design implementation
consists of four phases.
they are translate, map,
place and route, and program.
during the translate phase,
all the input netlists generated
by synthesis are merged together
with design constraints.
the output of this phase
is a database file
which describes the logical
design reduced to primitives.
during the map phase,
the logic defined by the database file
is mapped into the fpga
elements such as logic blocks.
the output of this phase is a circuit
description file which contains
a fiscal representation of the design,
map to the components of the fpga.
place and route process takes
the circuit description file, places and
routes the design and
produces another circuit description file
that will be used as input for
the bit stream generation.
finally, during the last phase
fo programming file generation,
the actual file that will be used to be
uploaded to the hardware is generated.
now i hope you have an insight of
where and how to apply a processor and
fpgas, as well as you know
the application areas.
as it very often happens, the optimal
solution, lies between extremes.
in a sense, it is also true in our case,
where we choose between a processor and
an fpga.
but how to find a solution that is
flexible, energy efficient, and
fast at the same time?
this is where hybrid platforms, or
systems on chips, come into the picture.
an soc is a microchip
circuit that integrates
all the necessary components for
a system into a single chip.
an soc might leverage advantages of
embedded processors and an fpga.
indeed, an embedded processor,
surrounded by programmable logic,
is a powerful tool for
building complex, flexible solutions.
when comparing an soc implementation
with another one where all
the components are not in a single chip.
but let's say spread over
the printed circuit board,
the soc will provide a lower cost
solution that benefits from fast
data transfers higher speeds,
smaller sizes, and is more reliable.
as an example of an soc let's take
a look at the xilinx zynq-7000 chip.
the zynq-7000 is a hybrid
platform that has dual arm cortex
a9 processors and or programmable logic.
an axi bus serves as a messenger between
a processor and the programmable logic.
the design flow for hybrid platforms
comprises both hardware and
software development and testing, as well
as system integration as the final step.
there are several representatives
of zynq-7000 family.
they are different in many parameters
such as the maximum speed of the hardcore
processor, amount of available fpg logic,
ram size, etc.
there are also several zynq-7000-based
platforms on the market.
they've arrived in the amount
available resources, sizes and costs.
from picozed, that is the smallest and
the cheapest option,
to zynq mini-itx that is the same
size as the standard pc mother board.
there are obviously many more
platforms available in the market
than the ones that we
mentioned in the course.
each one of them with different
features,platforms are just tools
to build on application.
although the tool itself is important, the
purpose it serves is even more important.
in other words, when selecting a tool,
the approach should be application based.
this is all i have for this lesson.
in this video,
we discussed the possible design flows for
microcontrollers and fpgas.
we also covered hybrid platforms which
can provide a more flexible solution for
certain applications.
this lesson is also the last
one of this morning but
i hope to see you in the next one.
thank you for watching.
