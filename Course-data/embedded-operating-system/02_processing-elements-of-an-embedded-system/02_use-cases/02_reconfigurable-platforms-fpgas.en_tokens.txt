[
music
]
hello
and
welcome
back
.
in
this
video
,
i
'm
going
to
explain
what
a
reconfigurable
architecture
is
,
and
i
will
also
talk
about
the
main
features
of
field
programmable
gate
arrays
as
an
example
of
reconfigurable
architectures
.
several
fpga
platforms
would
be
introduced
to
you
as
well
as
their
main
features
.
the
most
efficient
approach
in
terms
of
energy
consumption
and
performance
to
implement
an
embedded
system
is
to
develop
an
application
,
a
specific
integrated
circuit
.
however
,
one
of
the
main
drawbacks
of
this
approach
is
the
cost
.
indeed
,
asic
development
cost
is
much
higher
than
let
's
say
,
software
development
for
a
processor
.
on
the
other
hand
,
a
processor
is
much
cheaper
option
to
be
then
embedded
system
on
,
but
it
does
not
give
you
a
good
energy
performance
trade
off
.
asics
processors
are
in
a
way
,
two
extremes
,
but
what
do
we
have
in
between
?
the
configurable
architectures
are
a
good
compromise
here
.
these
devices
can
be
almost
as
fast
as
the
special
purpose
hardware
and
at
the
same
time
,
their
inner
architecture
can
be
changed
which
brings
some
degree
of
flexibility
.
field
programmable
gate
arrays
are
an
example
of
reconfigurable
architectures
,
that
we
are
going
to
focus
on
.
an
fpga
is
a
semiconductor
device
which
can
be
configured
to
implement
different
algorithms
.
i
would
like
to
emphasize
that
an
fpga
implementation
is
a
hardware
base
approach
to
realize
a
certain
task
.
meaning
that
hardware
changes
,
whereas
if
you
use
a
processor
,
the
underlying
hardware
stays
the
same
,
but
the
software
can
be
changed
.
so
what
is
the
inner
structure
of
an
fpga
that
allows
these
devices
to
reconfigure
its
hardware
?
its
core
compromises
a
matrix
of
logic
blocks
,
which
can
be
connected
to
each
other
via
special
interconnects
.
as
mentioned
before
,
an
fpga
should
be
configured
to
realize
a
certain
application
.
for
that
it
can
be
programmed
with
a
new
design
.
program
availability
wise
,
fpgas
can
be
one
time
programmable
.
these
type
of
fpga
's
is
not
meant
for
applications
where
in
field
reprogrammability
is
needed
.
on
the
other
hand
,
reprogram
level
fpgas
can
be
reconfigured
by
our
user
many
times
without
using
any
special
equipment
.
now
let
's
go
deeper
in
to
the
details
about
the
inner
structure
of
fpgas
.
the
logic
block
plays
the
central
role
and
it
can
be
considered
as
the
building
block
of
an
fpga
.
the
features
of
these
block
might
be
different
depending
on
certain
types
of
an
fpga
.
but
it
usually
has
combinational
logic
inside
which
is
represented
by
look
up
tables
.
the
lookup
table
style
of
the
logic
was
chosen
because
it
makes
easy
to
derive
the
functionality
of
the
logic
block
.
additionally
,
the
logic
block
contains
a
register
to
implement
sequential
logic
,
which
introduces
clocking
and
synchronization
into
the
design
and
it
's
a
fundamental
component
of
digital
logic
.
there
are
also
multiplexers
inside
of
the
logic
block
,
which
allow
to
select
either
the
lookup
table
or
the
flip
flop
output
.
although
the
logic
block
is
flexible
obviously
with
only
one
logic
block
,
it
is
impossible
to
implement
any
kind
of
logic
function
.
complex
designs
will
require
many
logic
blocks
to
be
connected
together
.
the
special
interconnects
inside
of
an
fpga
serve
this
purpose
.
these
interconnects
are
an
important
and
one
of
the
most
complex
aspects
of
an
fpga
since
wiring
is
a
global
property
of
a
logical
designer
.
note
that
the
interconnection
between
logic
elements
might
be
very
complex
.
and
therefore
,
not
only
connections
between
logic
elements
are
required
but
also
between
wires
themselves
.
an
sram
based
fpga
uses
a
sram
to
hold
the
information
used
to
program
the
interconnects
.
in
a
design
,
it
is
often
necessary
to
source
some
data
.
for
this
purpose
,
there
are
ground
blocks
available
,
these
blocks
use
the
same
storage
that
is
used
for
the
look
up
table
function
.
the
majority
of
fpgas
nowadays
are
sram
based
.
sram
based
fpgas
store
the
configuration
data
in
static
memory
.
the
drawback
of
sram
is
that
it
is
volatile
and
ca
n't
keep
the
data
without
power
source
.
because
of
that
such
fpgas
must
be
programmed
or
configured
upon
start
.
there
are
two
basic
ways
of
programming
an
fpga
.
it
can
be
either
done
in
a
master
mode
when
the
fpga
gets
the
configuration
data
from
an
external
source
for
example
,
from
external
flash
memory
or
in
a
slave
mode
.
when
fpga
is
configured
by
an
external
master
device
.
for
example
,
a
processor
.
this
can
be
done
via
dedicated
programming
interfaces
.
it
is
also
worth
mentioning
that
some
types
of
fpga
support
partial
reconfiguration
,
and
there
are
two
types
of
it
.
first
of
them
is
dynamic
partial
reconfiguration
,
that
allows
you
to
change
the
part
of
the
design
while
the
rest
of
an
fpga
is
running
.
another
one
is
the
static
partial
reconfiguration
when
the
fpga
is
not
running
during
the
reconfiguration
.
before
we
continue
,
let
's
mention
the
upsides
and
the
downsides
of
fpga
implementation
.
so
compared
to
software
solutions
,
an
fpga
implementation
is
faster
and
more
efficient
in
terms
of
energy
consumption
.
on
the
other
hand
,
fpgas
lose
in
many
aspects
such
as
performance
and
energy
consumption
to
asics
.
however
,
fpga
design
development
is
much
cheaper
than
asic
designs
.
in
other
words
fpgas
provide
a
tool
that
lies
in
between
fully
software
and
fully
hardware
implementations
.
due
to
their
reconfigurable
nature
fpgas
are
good
for
different
applications
and
markets
because
of
the
high
cost
of
asic
manufacturing
,
it
is
important
to
model
the
design
before
then
.
therefore
,
asic
prototyping
is
one
of
the
application
areas
for
fpgas
which
allows
accurate
modeling
and
verification
as
well
as
rapid
software
and
firmware
development
and
reduces
the
risk
of
design
errors
.
the
wide
domain
of
digital
signal
processing
can
also
benefit
from
fpgas
.
indeed
,
fpgas
provide
high
computational
throughput
by
using
parallel
architectures
.
their
ability
to
reconfigure
the
inner
hardware
enables
designers
to
develop
customized
architectures
for
ideal
implementation
of
their
algorithms
.
fpgas
provide
cheaper
solutions
and
faster
time
to
markets
for
low
to
medium
volume
productions
.
compared
to
asics
which
usually
require
a
lot
of
money
and
time
to
get
the
first
device
.
so
you
can
buy
fpga
platforms
directly
from
the
fpga
vendors
.
the
biggest
fpga
manufacturers
are
xilnx
,
altera
,
and
actel
.
on
their
websites
,
you
can
find
a
lot
of
information
about
their
fpga
chips
as
well
as
about
the
platforms
they
sell
.
it
is
sensible
to
make
the
platform
choice
based
on
the
application
that
you
would
like
to
implement
.
however
,
if
you
are
in
the
phase
of
discovering
what
fpga
is
,
the
choice
can
be
done
based
on
other
parameters
.
for
example
,
the
platform
can
be
picked
according
to
performance
or
overall
amount
of
resources
it
has
.
another
way
to
select
the
proper
device
is
to
choose
it
based
on
the
field
where
you
like
to
apply
it
in
.
i
will
introduce
you
fpga
platforms
based
on
xilinx
fpgas
.
xilinx
separates
its
chips
into
families
.
there
are
four
of
them
.
low
end
devices
,
7
devices
,
ultrascale
and
ultrascale+
.
all
families
are
different
from
each
other
depending
on
the
amount
of
available
resources
,
performance
and
application
area
.
for
example
,
spartan-6
based
platforms
are
the
most
cost
optimized
solutions
,
whereas
ultrascale+
family
provides
the
highest
performance
and
integration
capabilities
.
here
,
i
would
like
to
introduce
you
to
spartan-6
based
fpga
platform
.
this
platform
is
a
good
development
environment
for
discovering
and
evaluating
a
spartan
6
fpga
family
.
the
evolution
kit
has
all
the
basic
components
for
system
development
,
and
also
provides
some
example
designs
to
speed
up
the
discovery
of
the
features
such
as
integrated
memory
interface
core
.
so
such
development
platform
is
a
good
starting
point
to
discover
fpgas
.
in
this
video
,
we
covered
important
aspects
of
recomforial
architectures
,
take
a
fpga
as
an
example
.
we
covered
the
main
building
blocks
of
fpgas
and
discussed
the
platform
which
might
serve
as
a
good
start
point
for
you
if
you
want
to
discover
fpgas
.
[
music
]
