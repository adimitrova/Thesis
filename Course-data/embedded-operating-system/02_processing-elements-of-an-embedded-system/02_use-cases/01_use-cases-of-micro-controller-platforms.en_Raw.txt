[music]
hello, i'm good to see
you back in our course.
before we start with this video,
let me remind you what has been
covered in earlier videos.
by now, you should have an idea of what
an embedded processor is and how it works.
you should also be familiar with
the features of an embedded processor.
i must remind you again,
that in this course we make
emphasis on microcontrollers.
therefore, the large field
of embedded processors
is now reduced to only microcontrollers.
after you learn about microcontrollers,
the next step would be to somehow
put your hands on them and
start actually working with them.
one way to do so
is to buy a microcontroller breadboard,
set of resistors, capacitors, wires, and
whatever else is necessary to build proper
electrical circuits and assemble all the
circuits by yourself on the breadboard.
well, it doesn't sound cool
because it's a long process.
and you know there is always one resistor
that you need that is missing, and
in the end there will be little motivation
to continue playing with microcontrollers.
luckily, there is another option
to buy a ready made platform
with a mounted microcontroller and
to start working with it immediately.
and in this video we're going
to talk about these platforms.
let's start with arduino.
arduino is a widely known platform for
fast prototyping.
the platform uses atmel
microcontrollers at its core.
overall there are about
24 boards available.
on the website, you can find them
organized according to application areas,
such as internet of things,
wearable, and others.
besides the boards, there are many
shields built specifically for
our arduino devices.
the functionality of
these shields vary a lot.
for example, with an mp3 shield you can
build your own mp3 player if you need one.
a wi-fi shield is a great
tool to build applications
let's say in the domain
of internet of things.
and a joystick shield is suitable for
control purposes.
so if you want to extend
the functionality of the board and
your application,
you can plug in a shield.
luckily it can easily be done thanks
to the sockets installed in arduino.
arduino also provides its own integrated
development environment for software
development, which is easy to use and
really speeds up the development process.
the second platform that i would like
to mention is the stm nucleo platform.
at its core there are stx complex
cortex m microcontrollers from m0 to m4.
so we can choose here between speed and
energy consumption.
the boards also have extension connectors,
and
the connectors are compatible with
arduino shields which is very convenient.
and also there is the so-called morpho
connector for other kind of shields.
a very convenient feature of this platform
is that the programmer/debugger
is mounted on the board.
there in an online id available for
this platform as well as a whole set
of tools including operating system,
tools, and developer ecosystem for
building internet of things solutions.
offline ides are also available.
they are more complex than arduino's one,
but
they give you more
freedom to the developer.
i would say that this platform is for
more experienced users.
here i mentioned two kinds
of general purpose platforms
that can be extended with the help of
shields to target some specific areas.
there are, of course,
more platforms available on the market.
some of them target one specific area and
might not be extensible.
so there is a legit
question you might have.
how do i select a certain
platform from this diversity?
first of all, the choice obviously
should be application-oriented.
for example, if you want to do
some digital signal processing,
you might want to use microcontroller
that supports some dsp operations.
if you need high computational power,
then cortex m4 or
cortex m3 microcontrollers would suit you
well since they have the highest clock
frequency among the previous
mentioned mcus.
therefore your choice would be either
arduino due or stm nuclear cortex m4 m3.
if the small size is crucial for you and
there is no need of high performance,
then you probably want
to check arduino micro.
it is also important to consider that
platforms are interchangeable in
the sense that the same application can be
implemented on two different platforms.
something i would like to emphasize
is that a community is crucial
when it comes to choosing a platform.
the bigger the community is, the more
likely the problems you might face
have already been solved by someone else,
in which case you can
probably find the answer in the internet.
now i would like to show you a real
project that was implemented using
microcontrollers.
it is a metering system.
imagine that we have a tube, and there is
some liquid flowing through that tube.
the goal of the system is to
measure the liquid's flow speed.
since we know the size of the tube,
we need to calculate the volume of
the liquid during that time interval.
and finally, we need to store
those measurements in a memory.
what is more, the device should have
user interface, like a keyboard and
a small screen.
so, where to start?
well, we start by dividing
the tasks in two components,
the metering unit and the control unit.
the next thing to do would be to decide
how to measure liquid flow speed.
this can be done using ultrasound.
we need to emit an ultrasonic sound,
receive it back,
and do some spectral analysis to
estimate the liquid flow speed.
don't worry if you don't understand
what a spectral analysis is.
here what i want to show
you is the approach.
so we need to do some digital signal
processing to get the liquid flow speed.
after we get those measurements,
we do some simple averaging, and
finally we store those
processed measurements.
okay, so we have a set of tasks,
signal processing, averaging,
storing, and the user interface.
it would make sense to map the set
of tasks onto two microcontrollers.
let's say signal processing
will be done on mcu 1, and
we will call this part the metering unit.
the other tasks will run on the control
unit, which will be implemented on mcu2.
both parts will be connected
together using a uart interface.
since mcu1 does spectral analysis,
cortex m4 microcontroller would suit well,
since it has dsp extensions.
and we will also need an adc to
sample the ultrasonic signal.
on the other hand, mcu2 does not
need to support dsp operations.
but it need to be fast enough
to communicate with a screen and
a keyboard while doing
the averaging at the same time.
it should have enough pins to
work with a keyboard and at least
two uart units to work with the screen and
to communicate with the metering unit.
cortex m3 would fit well.
it is useful to leave some room for
expansion.
this means you might want to have some
extra functionality to the device
in the future.
therefore, the selected microcontrollers
should have enough resources in
terms of performance and memory.
finally, it is important to notice
that the system can be implemented
in many other ways.
in this video we discussed
the ways on how to
actually start working with
microcontrollers using platforms.
hopefully, now you have an idea of how
to pick an appropriate platform for
your application.
good luck.
[sound]
