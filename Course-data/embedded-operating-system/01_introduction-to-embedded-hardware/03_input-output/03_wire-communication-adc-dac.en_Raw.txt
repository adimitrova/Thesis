[music]
hello, and welcome back to the course.
in this video, we are going to
talk about wired communication and
we will also cover adcs and dacs.
since these units convert analogue
values that are fundamental in
our world to a digital form and
vice versa.
let's start with wired communication.
the definition is quite simple.
and as you might guess,
wired communication is
the transmission of data over wires.
wire-based communication.
communication, regardless
whether it is wired or
wireless, is guided by certain rules.
the set of such rules is called
a communication protocol.
two devices can communicate with each
other if they use the same protocol.
the analogy that you can think of is two
people who try to talk to each other.
they successfully understand each
other if they use the same language.
there are many communication protocols.
some of them are parallel, which
enables high data rate communication.
and some of them are serial like usb.
which is resource efficient.
if we think of the number of
physical connections needed
to enable the communication.
for embedded systems where we deal
with resource constrained devices,
communication is mostly
done via serial protocols.
such as usb, spi, uart, and others.
apart from serial-parallel
type of classification,
the communication protocols can
be synchronous or asynchronous.
synchronous communication protocols
utilize common clock between
the receiver and the transmitter.
the upside is higher throughput since
no synchronization data is needed.
asynchronous protocols do
not use a common clock.
instead, synchronization
between the receiver and
the transmitter is done
using synchronization data.
for example, start and stop bits in rs-232
protocol are for synchronization purposes.
a good analogy might be
two speaking people.
the listener starts listening attentively
only when the speaker starts speaking.
in this case, the first two words of
the speaker are for synchronization.
they make the listener start
receiving the verbal information.
the upside of asynchronous communication
protocols is that there is no need
of an additional wire or a common clock.
however, such communication
protocols are slower
because some part of the transmitted
data is used for synchronization.
full duplex, half duplex.
you might have come across such words
if you have read about communication
protocols.
what do they mean?
full duplex communication is
a bidirectional communication
that can operate in both
ways at the same time.
a mobile phone is an example
of full duplex communication.
you and your interlocutor
can speak at the same time.
you may not understand anything but
still you will hear your partner and
your partner will hear you.
however, half duplex communication
allows only one side to talk.
it is either you or your partner.
a good example of these type of
communications are walkie-talkies.
for instance, usb versions 1 and
2 are half duplex prodigals,
whereas usb 3 has two
additional pairs of wires.
and this enables full
duplex data transfers.
now that we mentioned usb, let's give more
details about this communication protocol.
usb stands for universal serial bus.
in the beginning,
usb was using only four wires.
as the protocol evolved,
some additional wires were added.
for example, usb 3.0,
apart from the mentioned four wires,
uses two additional twisted pairs.
as mentioned before,
these additional wires introduce
full duplex capabilities to usb.
data rates also vary
quite significantly if we
compare the initial versions
of the protocol and
the later ones,
from 1.5 mbit/s to 10 gbit/s.
the structure of a usb
network is a tire star.
it consists of one or more usb devices.
one or more hubs and host or controller.
only one host exists in the network.
the hubs are the nodes to which
devices and other hubs can connect to.
the host polls the hubs for
changes in the network.
thus, if a new device
appears in the network, or
if the device is unplugged,
hubs will notify the host about that.
all devices that can use usb
are grouped into several categories.
each category represents the functionality
that the device can provide to the host.
so what is a structure
of the protocol itself?
data is sent using transfers.
transfers consist of packets.
there are four main types of
transfers in usb protocol, control,
bulk, isochronous, and
an interrupt transfer.
each packet consists of bytes, and
each byte serves for a certain purpose.
for example, sync byte is used for
synchronization.
and pid byte contains the packet id.
the packets can also
be of different types,
token, data, handshaking, or a descriptor.
spi is another communication protocol
widely used in embedded systems.
spi stands for
serial peripheral interface and
uses four wires for its operation.
the protocol can operate with one
master and one or several slaves.
the data is being shifted bit by bit
from the master to the the slave.
as well as from the slave to the master.
shift registers are connected
into a circle in a way that
when a bit is shifted in a slave register,
a bit from the other
end of the register is shifted out and
shifted into the master's register.
there is also a possibility to connect
slave devices in a daisy chain manner.
in this case, the shift register of,
let's say, slave 0,
will be connected with
the shift register of slave 1.
in order to make a processing element
deal with the outer physical world,
the physical values which represent,
for example, the amount of light or
pressure, temperature, or
voltage should be converted to numbers.
and all the way around, they should
be a possibility to convert a number
into a physical value,
let's say a voltage level.
luckily there are special kinds of
converters which can solve this problem.
they are analog to digital converters and
digital to analog converters.
their main objective is to convert
voltage levels to a number,
and back from a number to a voltage level.
among the large variety of parameters
which describe these units,
let's emphasize some of them.
resolution is the minimal deviation of the
voltage that can be detected by an adc.
or, if we reformulate the definition for
a dac, the resolution of the dac
is the minimal difference
of an input number that yet
leads to a different voltage level.
the resolution is the quantity
of digits in a number.
which is the result of
a conversion from an adc or
the initial value of a conversion for
a dac.
thus, if we have 8-bit resolution, adc,
that means that the result
can take 256 possible values.
other parameters are the conversion
rate which defines the number
of conversions that the adc or
dac can make in one second.
and the conversion time which specifies
time needed for a single conversion.
how does the conversion actually happen?
there are several methods and
one of them i will elaborate on,
is successive approximation.
an adc which exploits this
method has a dac inside.
it works using binary search.
initially, we apply an input
voltage level to the adc.
and we set the most significant
bit of the resulting number to 1.
then this number is converted
by the dac to voltage.
if the obtained voltage is
higher than the input voltage,
then the most significant bit stays 1,
or else it should be set to 0.
then we shift to the next bit, set it
to 1, convert the number to a voltage,
compare the resulting
voltage to the input voltage.
and if the resulting voltage is
higher than the input voltage,
then the bit remains 1.
otherwise, it resets to 0.
thus, we go through each bit
until we obtain the final number.
for dac, one of the methods is
called pulse-width modulator.
the input number defines
a duty cycle/period
ratio of the generated pulse signal.
the generated signal is fed
to a low-pass filter, and
at the output,
we have a constant voltage level.
adcs and dacs can be either
part of bigger divisors,
for example, microcontrollers, or
they can work as a stand alone unit.
particles, we also explain how
analog to digital conversion and
digital to analog conversion work.
thanks for watching, and
i'll see you in the next video.
[music]
