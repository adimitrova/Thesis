[music] hello and welcome to the first lecture of the course.
this course if called embedded hardware and operating systems.
this course is a practice oriented guide on how to build an embedded system.
nowadays, computers are literally everywhere.
they run engines, they encode voice, and construct radio signals to use them for mobile communication.
they even control your microwave.
this non-visible computers that make it all possible are called embedded systems.
although embedded system have received much attention from researcher in the past, the community has just recently recognized that new approaches are needed to develop and analyze them.
mainly because they are one of the most rapidly growing fields in the computer industry.
considering the transient technology, we can say that such kind of systems will soon be integrated into more things.
computer will be everywhere information will be available anytime, any where.
as an example of embedded systems, we can think of airplanes.
an airplane is full of embedded computers in it.
seats have entertainment systems with video, audio and gaming capabilities.
there is an air conditioning system adjusting the temperature and pressure of the cabin.
on the other hand, the flight management system is heavily equipped with embedded systems.
there are plenty of different sensors reporting the situation to the pilot.
location, weather, altitude, speed, orientation, all these values are constantly monitored.
the autopilot system significantly reduces the pilot workload.
wings, jet engines, landing gear, brakes, and so on are controlled electronically from the cockpit.
so as we see, an airplane is full of computers embedded in different locations with different functionalities and purposes and with different requirements too.
what are the main characteristics and constraints of an embedded system used in airplanes?
well first and the most important one, they have to be reliable.
sensors should report correct values all the time.
the control system should not make any mistake under any circumstances and must react according to deadlines.
wings, brakes, landing gear, and so on should follow exactly what the pilot demands.
if any of these reliability requirements are not fulfilled, then a catastrophe can easily happen.
what do we mean by reliability, and how to measure it?
anyway, we will discuss it in future lessons.
on the other hand, embedded systems should be secure.
no one must be able to break in to the control system or the airplane and override the sensors and command data.
what else can we think of?
well another important concern is the real time behavior of the airplane's systems both in the passenger cabins and in the cockpit.
passenger expects to watch smooth movies with no interruption or jitter.
the pilots commands should take effect at the right time, and the autopilot system must not make late decisions.
another good example that reflects the idea that computing will be everywhere is the internet of things.
indeed, the aim is to spread nodes around the world.
a node, it's the small embedded system connected to sensors and activators.
nodes will collect data of any kind.
it may be temperature measurements or acceleration.
the data then will be pre-processed in the fog layer an sent to the cloud.
there are many problems to tackle in this field.
nodes may be located in remote areas, and it is desirable to make the nodes work for longer.
so energy efficiency is one of the issues that the internet of things pulls out.
another issue is making the gathered data meaningful.
in other words, it is about getting information out from the messy data.
here machine learning is coming into the picture.
so internet of things will provide people with a lot of data, which can be used, for example, to optimize processes.
there are many other examples of embedded systems that are applied in different fields of industry, from home appliances to aerospace.
now that you probably have a basic idea of what an embedded system is, let's talk about how we can describe such system.
well an embedded system is typically reactive.
this means that such system is constantly interacting with its environment and executes with that environment say so.
reactive systems being in some state is waiting for an input, performs computations, produces an output, and transits to a new state.
thus such systems can be modeled as automata.
in other words, it is a set of states, inputs, and outputs.
so the abstract model of an embedded system consists of inputs, outputs, a unit to perform computations, and communication interfaces to exchange data with other embedded systems.
inputs provide the computation unit with data.
sensors can play the role of inputs.
sensors can convert physical quantities into numbers.
actuators for example, electrical moderators can be outputs.
in between inputs and outputs there is a unit called processing element that makes computations on the input and produces output.
a persisting element is the digital device.
during the course, we will talk about two types of processing elements and better processors and fpga's.
in the course, we will talk about what a processing element is, and how to pick an appropriate one for certain applications.
we will discuss how embedded processors and fpga's are built, and how to deal with them.
we also will cover most popular embedded platforms, this will be of great interest for those who want to get hands on experience on building an embedded system.
we will also talk about sensors and actuators, and how to interface with them.
embedded hardware works guided by software.
that's why embedded operating systems will also be covered in the course.
indeed, the right choice of embedded operating system may not only simplify the development, but also affect crucial parameters of the system, such as energy consumption, or computational performance.
this course is intended for those who want to obtain knowledge on how to build an embedded system.
this is, selecting the appropriate components, based on the requirements you have for your application.
to ease the process of selection, it maybe important to know how those components work and what their main characteristics are.
after selecting those components, they are assembled together, program may have needed and used.
all these steps from selection to assembly are going to be covered during the course.
so if you want to design your own embedded system, this course is a good starting point for that.
[music]
