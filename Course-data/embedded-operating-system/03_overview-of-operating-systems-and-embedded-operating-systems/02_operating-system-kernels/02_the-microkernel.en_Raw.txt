[music]
welcome.
it is good to see you back for
this lesson.
in previous videos, we explored
a monolithic kernel and its main features.
now, we will move into another
kind of kernel, the microkernel.
in this video, we will cover
the definition of microkernel,
how it compares to the monolithic kernel,
and its advantages and disadvantages.
let's begin with some
interesting questions.
what is microkernel, and
what is the main difference between
a monolithic kernel and the microkernel?
before answering these questions,
let's go back briefly to our
lesson monolithic linux kernel.
in a monolithic kernel, all important
functions and services of the operating
system, such as file system and device
drivers, are executed in kernel mode.
as a result, the kernel is very large
with millions of lines of code inside.
in contrast, in a microkernel,
almost all functions and
services are removed from the kernel
mode and relocated into the user mode.
as a result, the kernel size is minimal.
at this point, there may be
a question raising in your mind.
what is the main function of the kernel,
and
what does it do if almost all
functions are removed out of it?
when comparing a microkernel based
system with a conventional one,
the main difference is that most
of the operating systems code
runs as a separate process,
mostly outside the kernel.
then, the tasks left for
the kernel are only interrupt handling,
low-level process management and
message passing handling.
now, let's talk about interprocess
communication in microkernels.
a common communication method in
microkernels is message passing.
to better understand it,
we must address three issues.
what is interprocess communication?
what is a message, and
how does message passing work?
interprocess communication, or ipc for
short, refers to the mechanism that
an operating system provides for
exchanging information among
processes a message is simply
the data that is transferred from
one process to another using ipc.
in a microkernel, messages
are passed using message registers.
this is a sending process,
writes a message to the register of
the receiving process, and only then
the receiving process can read the data.
sometimes the data to be sent can be
larger than the receiver's register,
in which case,
the message contains a reference
to a shared memory region
where the data is stored.
ipc is synchronous,
meaning that when a message is
sent from one process to another,
both processes must call
the corresponding ipc operation.
a sender will log until either
the receiver has performed the ipc call,
or a specified time of
interval has lapsed.
it is important to mention that ipc
does not use intermediate buffers.
therefore, improving efficiency and
reducing the complexity of the operation.
let's move on to the advantages
of microkernels.
one of the main advantages of
a microkernel is that its code is minimal.
it is often the case that
the less code is written,
the less probability
that an error can occur.
other benefits, due to a minimal kernel
are small trusted computing base and
suitability for verification.
trusted computing base
is related to security.
in computer security terminology,
the trusted computing base is the set
of all hardware, software and
procedural components that
enforce the security policy.
this means that in order
to break security,
an attacker must subvert one or
more of them.
regarding verification, the benefit
of a small quote size is obvious.
the less code we have,
the simpler it is verifying it.
finally, due to the modularity
of microkernel,
it is easy to add software to the system,
thus making it scalable and extensible.
we have already talked about
the advantages of microkernels, but
what are their drawbacks?
why didn't microkernel
actually win the race?
although they seemed to
be a better idea in 1992.
to answer this question, let's go through
a simple example like creating a file.
in order to create a file
in a monolithic kernel,
it is necessary to perform
a context to switch only two times.
the first one occurs when the system
switches from the application
to the kernel, so
the file operation can be executed.
the second one occurs when the kernel
gives control back to the calling process.
now, in the case of a microkernel,
how expensive is the file operation
in terms of context switching?
well, it turns out it takes a lot more
context switching between kernel and
the user process.
the reason for
this is that now it is necessary to
switch among multiple processors.
each one controlling a small function.
in this particular example, one process
may be in charge of the file system
while another handles the device driver.
as a result, the overall system
response becomes slower.
this overhead is not limited
to input-output operations.
other kernel services, such inter-process
communication, are also affected.
in this video, we'll describe the most
important features of microkernels.
however, to get a deeper
understanding of its details,
i recommend you go through
the suggested materials.
thanks for watching, and
see you in coming videos.
[sound]
