[
music
]
hello
,
it
is
good
to
see
you
back
.
in
previous
videos
,
we
explored
several
kernel
architectures
,
such
as
monolithic
,
microkernel
,
and
modular
.
now
,
we
're
going
to
focus
on
an
embedded
operating
system
intended
for
iot
devices
named
contiki
.
contiki
is
a
good
example
of
a
modular
kernel
,
and
in
this
video
,
we
will
discuss
it
's
most
important
features
.
contiki
was
originally
created
by
adam
dunkels
in
2002
as
an
open
source
embedded
operating
system
.
contiki
is
designed
for
networked
and
memory
constraint
systems
.
it
's
main
focus
is
a
low
power
wireless
sensor
systems
and
internet-of-things
devices
.
therefore
,
contiki
always
is
lightweight
enough
to
fulfill
the
requirements
of
an
embedded
device
equipped
with
a
low
end
micro
controller
,
small
memory
and
battery
powered
.
a
good
example
of
this
is
contiki
's
code
foot
print
,
which
only
needs
about
10
kilobytes
of
ram
and
30
kilobytes
of
rom
.
currently
there
are
a
lot
of
companies
and
universities
involved
in
contiki
's
development
,
such
as
texas
instruments
atmel
,
eta
surik
,
oxford
university
,
and
others
.
after
this
introduction
,
let
's
take
a
look
at
the
most
important
features
of
contiki
.
contiki
uses
protothreads
,
software
flow
control
.
but
,
what
is
a
protothread
?
for
now
,
it
suffices
to
say
that
protothreats
is
a
mechanism
that
mixes
an
event-driven
model
and
threats
to
provide
sequential
flow
control
without
using
complex
state
machines
.
protothreats
are
an
extensive
topic
that
we
will
cover
in
depth
in
another
video
.
as
we
mentioned
earlier
,
contiki
is
built
for
embedded
network
systems
.
therefore
,
it
provides
powerful
,
low
power
internet
communication
stack
that
includes
internet
standards
ipv6
and
ipv4
along
with
the
recent
low
power
wireless
standards
,
such
as
6lowpan
,
rpl
and
coap
.
in
addition
,
due
to
the
limited
power
supply
and
resource
constraints
in
embedded
network
system
,
contiki
provides
mechanisms
for
efficient
memory
allocation
.
furthermore
,
contiki
is
based
on
a
modular
kernel
that
supports
dynamic
loading
and
linking
at
.
as
a
result
,
software
modules
are
loaded
only
when
the
system
requires
their
particular
functionality
.
it
is
an
advantage
for
system
administrators
and
users
to
know
for
how
long
a
system
has
been
running
,
or
the
system
's
working
hours
when
a
particular
power
supply
is
used
.
in
order
to
address
this
issue
,
contiki
provides
a
mechanism
for
estimating
the
system
's
power
consumption
.
contiki
can
run
in
different
types
of
embedded
networked
drives
,
such
as
and
other
arm
based
devices
.
these
hardware
are
popular
and
easy
to
buy
with
low
prices
.
in
addition
,
it
is
possible
to
port
contiki
to
new
hardware
with
a
little
effort
.
as
we
all
know
,
it
is
not
easy
to
set
up
a
large
wireless
network
.
it
requires
a
lot
of
time
and
effort
to
debug
and
deploy
devices
.
to
address
this
issue
,
contiki
provides
the
cooja
network
simulator
.
cooja
allows
simulator
large
scale
networks
comprising
10s
of
nodes
running
on
fully
emulated
hardware
devices
.
using
contiki
's
examples
is
the
easiest
way
to
implement
simple
or
complicated
applications
in
a
short
time
.
some
examples
show
how
to
develop
application
code
,
while
others
demonstrate
system
features
.
in
addition
,
there
is
a
common
line
shell
,
suitable
for
debugging
operations
.
shell
commands
can
be
combined
in
powerful
ways
using
unix
style
pipelines
.
it
is
also
possible
for
an
application
to
define
its
own
shell
commands
that
work
together
with
the
existing
ones
.
there
are
other
interesting
features
of
contiki
that
it
was
not
possible
to
cover
in
these
lessons
.
therefore
we
strongly
encourage
you
to
read
the
recommended
materials
.
before
ending
this
video
,
i
would
like
to
show
you
how
to
implement
the
classic
hello
world
example
in
contiki
.
if
you
run
this
code
,
the
phrase
hello
world
,
will
be
printed
to
the
terminal
of
the
device
.
to
get
the
details
on
how
to
write
a
program
and
drawn
an
application
in
contiki
.
you
should
come
back
to
our
lectures
who
have
more
detail
be
use
.
thank
you
for
watching
and
see
in
next
videos
.
[
music
]
