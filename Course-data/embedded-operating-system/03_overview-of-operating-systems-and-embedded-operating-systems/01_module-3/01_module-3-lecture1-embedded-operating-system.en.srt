1
00:00:00,147 --> 00:00:05,749
[MUSIC]

2
00:00:05,749 --> 00:00:06,501
Hello.

3
00:00:06,501 --> 00:00:08,460
It is good to see you back.

4
00:00:08,460 --> 00:00:11,440
Welcome to the module
embedded operating systems.

5
00:00:11,440 --> 00:00:15,110
In this module, we'll give an introduction
to the operating systems and

6
00:00:15,110 --> 00:00:16,580
the Linux kernel.

7
00:00:16,580 --> 00:00:18,770
A review of several kernel types,

8
00:00:18,770 --> 00:00:22,510
I wield first popular Internet of
things embedded operating systems.

9
00:00:23,580 --> 00:00:24,780
Let's begin with an example.

10
00:00:25,822 --> 00:00:28,500
Every day we use computers and
smartphones for

11
00:00:28,500 --> 00:00:33,990
daily activities, such as playing games,
working, or surfing the internet.

12
00:00:33,990 --> 00:00:38,900
Each of these devices uses a particular
operating system, such as Mac,

13
00:00:38,900 --> 00:00:42,820
iOS, Windows, or
some Linux based operating system.

14
00:00:43,840 --> 00:00:48,400
The reason for this is that an operating
system is absolutely necessary

15
00:00:48,400 --> 00:00:50,600
to provide users with
high quality service.

16
00:00:51,730 --> 00:00:56,400
In complex devices such as smartphones,
it is simple to install and

17
00:00:56,400 --> 00:01:01,375
run an OS, due to their powerful hardware,
such as large memory size,

18
00:01:01,375 --> 00:01:04,720
high-frequency microcontroller,
and a large storage space.

19
00:01:05,930 --> 00:01:11,350
However, have you ever wondered if
it's possible to run an OS in a tiny,

20
00:01:11,350 --> 00:01:12,990
and resource-constrained, device?

21
00:01:14,060 --> 00:01:16,500
The answer to this question is yes.

22
00:01:16,500 --> 00:01:19,980
It is completely possible if we
use an embedded operating system.

23
00:01:21,120 --> 00:01:23,210
During the next videos in this module,

24
00:01:23,210 --> 00:01:25,770
we will provide a deeper
answer to this question.

25
00:01:27,670 --> 00:01:32,300
However, the first question we should
answer is what is an operating system?

26
00:01:33,480 --> 00:01:36,940
An operating system is a collection
of several pieces of software.

27
00:01:38,110 --> 00:01:42,650
It works as an intermediate layer between
application software and the hardware.

28
00:01:44,340 --> 00:01:48,890
The main function of an operating
system is to manage resources, and

29
00:01:48,890 --> 00:01:51,700
to provide an environment for
executing applications.

30
00:01:53,860 --> 00:01:58,280
In this course, we will focus on
embedded operating systems for

31
00:01:58,280 --> 00:02:00,680
the Internet of Things, or IoT.

32
00:02:01,990 --> 00:02:05,870
This is due to the large number
of embedded devices used for

33
00:02:05,870 --> 00:02:07,440
IoT applications nowadays.

34
00:02:08,790 --> 00:02:13,780
We can find them in very diverse fields,
such as entertainment, healthcare,

35
00:02:13,780 --> 00:02:16,840
military, industrial automation,
and education.

36
00:02:18,190 --> 00:02:23,240
According to an IHS report,
it is projected that the number of devices

37
00:02:23,240 --> 00:02:28,900
in IoT applications will be
approximately 50 billion by 2020.

38
00:02:28,900 --> 00:02:31,060
Therefore, it is important for

39
00:02:31,060 --> 00:02:34,780
you to become acquainted with
IoT embedded operating systems.

40
00:02:37,190 --> 00:02:41,050
To give you a clear view of
an operating system's functionality,

41
00:02:41,050 --> 00:02:45,380
I will describe the most fundamental
tasks that an OS performs.

42
00:02:47,490 --> 00:02:52,730
Memory management is a complex task
that enables efficient memory uses

43
00:02:52,730 --> 00:02:55,950
by keeping track of the status
of each memory location.

44
00:02:57,190 --> 00:03:02,380
In short, it checks how much memory
is used by a particular process and

45
00:03:02,380 --> 00:03:03,220
how much is left.

46
00:03:04,690 --> 00:03:06,000
In most cases,

47
00:03:06,000 --> 00:03:10,960
the management system makes the decision
on when to allocate memory for a process.

48
00:03:12,810 --> 00:03:18,350
One example of memory usage is when
calculating an effective address.

49
00:03:18,350 --> 00:03:21,970
Which involves fetching from instruction,
and using an index object.

50
00:03:23,760 --> 00:03:29,270
Another example of memory management is
mapping virtual memory to physical memory.

51
00:03:29,270 --> 00:03:34,110
In which case, a virtual memory address
generated by the CPU is generated

52
00:03:34,110 --> 00:03:36,303
into a physical memory address.

53
00:03:38,248 --> 00:03:43,228
Processor management refers to the process
of deciding when a particular process

54
00:03:43,228 --> 00:03:47,860
is granted access to the processor, and
for how long the process can use it.

55
00:03:48,990 --> 00:03:50,040
In particular,

56
00:03:50,040 --> 00:03:55,280
processor management keeps track of the
status of both processors and processes.

57
00:03:56,550 --> 00:03:58,200
When the processor is available,

58
00:03:58,200 --> 00:04:01,070
it is allocated to the process
with the highest priority.

59
00:04:02,730 --> 00:04:06,880
Finally, the processor management will
deallocate processors when they are no

60
00:04:06,880 --> 00:04:07,490
longer needed.

61
00:04:09,930 --> 00:04:14,720
All devices in a system are managed
by an OS via their dot drivers.

62
00:04:15,940 --> 00:04:17,920
This is known as input output control.

63
00:04:19,200 --> 00:04:23,860
The device management system keeps
track of the status of all devices and

64
00:04:23,860 --> 00:04:25,600
their drivers.

65
00:04:25,600 --> 00:04:30,506
In particular, the system manages
queues and book and buffers.

66
00:04:30,506 --> 00:04:34,200
For example,
in case of a suspended process,

67
00:04:34,200 --> 00:04:38,110
this means the process is
not currently using the CPU.

68
00:04:38,110 --> 00:04:43,330
The device manager instructs the buffer to
receive input data from the device, and

69
00:04:43,330 --> 00:04:46,120
to stop sending it to
the suspended process.

70
00:04:47,280 --> 00:04:50,270
When the suspended process
becomes active again,

71
00:04:50,270 --> 00:04:54,870
which means that the CPU is
currently allocated to this process,

72
00:04:54,870 --> 00:04:59,850
the device management system instructs the
buffer to send data to the active process.

73
00:05:02,380 --> 00:05:06,930
Finally, the operating system
must handle the organization and

74
00:05:06,930 --> 00:05:10,180
tracking of files and
directories safe in a computer disk.

75
00:05:11,410 --> 00:05:12,980
This is called file management.

76
00:05:14,200 --> 00:05:20,030
A file management system allows the user
to perform tasks such as creating files

77
00:05:20,030 --> 00:05:25,390
and inventories, renaming, copying,
moving, and deleting files.

78
00:05:27,050 --> 00:05:29,600
The operating system keeps track of

79
00:05:29,600 --> 00:05:32,789
where the files are located in the hard
drive through the file system.

80
00:05:35,250 --> 00:05:38,550
There are many other aspects
of an operating system,

81
00:05:38,550 --> 00:05:42,730
such as system performance control,
job accounting,

82
00:05:42,730 --> 00:05:47,610
error detection aids, and coordination
between other software and users.

83
00:05:48,670 --> 00:05:50,980
Too much to cover here.

84
00:05:50,980 --> 00:05:55,490
Let's move on to the Linux kernel, which
is a popular kernel used in many systems.

85
00:05:57,630 --> 00:06:00,860
Let me give you a brief history to
the history of the Linux kernel.

86
00:06:02,230 --> 00:06:06,740
The Linux kernel was created by a Finnish
student named Linus Torvalds in 1991.

87
00:06:06,740 --> 00:06:12,989
The Linux kernel is the most vital part
of a Linux-based operating system.

88
00:06:14,010 --> 00:06:19,090
Nowadays, the Linux kernel is very
popular, and it's used in many general

89
00:06:19,090 --> 00:06:24,010
purpose operating systems, as well as
in IoT embedded operating systems.

90
00:06:25,340 --> 00:06:29,390
The reason for
this is its code is open source, and

91
00:06:29,390 --> 00:06:33,720
can easily be integrated with software and
libraries from third parties.

92
00:06:35,060 --> 00:06:39,010
Many researchers and
programmers have contributed to develop

93
00:06:39,010 --> 00:06:42,580
Linux kernels to offer high
quality service to the users.

94
00:06:44,330 --> 00:06:48,770
The Linux kernel is extensive, and we
cannot cover it in detail in this video.

95
00:06:50,060 --> 00:06:54,180
In order to provide a comprehensive
understanding of the Linux kernel,

96
00:06:54,180 --> 00:06:58,370
we will analyze different types of
kernels altogether with their pros and

97
00:06:58,370 --> 00:07:00,490
cons in the incoming video.

98
00:07:00,490 --> 00:07:01,345
Thank you for watching.

99
00:07:01,345 --> 00:07:06,364
[SOUND]