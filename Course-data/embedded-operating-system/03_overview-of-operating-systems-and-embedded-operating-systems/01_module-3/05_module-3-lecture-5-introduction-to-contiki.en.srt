1
00:00:00,000 --> 00:00:05,956
[MUSIC]

2
00:00:05,956 --> 00:00:08,880
Hello, it is good to see you back.

3
00:00:08,880 --> 00:00:12,590
In previous videos,
we explored several kernel architectures,

4
00:00:12,590 --> 00:00:16,870
such as monolithic,
microkernel, and modular.

5
00:00:16,870 --> 00:00:21,190
Now, we're going to focus on an embedded
operating system intended for

6
00:00:21,190 --> 00:00:23,560
IoT devices named Contiki.

7
00:00:24,640 --> 00:00:29,140
Contiki is a good example of
a modular kernel, and in this video,

8
00:00:29,140 --> 00:00:31,660
we will discuss it's
most important features.

9
00:00:33,360 --> 00:00:36,860
Contiki was originally
created by Adam Dunkels

10
00:00:36,860 --> 00:00:40,770
in 2002 as an open source
embedded operating system.

11
00:00:42,110 --> 00:00:46,100
Contiki is designed for networked and
memory constraint systems.

12
00:00:47,110 --> 00:00:51,765
It's main focus is a low power
wireless sensor systems and

13
00:00:51,765 --> 00:00:53,270
Internet-of-Things devices.

14
00:00:54,380 --> 00:00:58,700
Therefore, Contiki always is
lightweight enough to fulfill

15
00:00:58,700 --> 00:01:04,080
the requirements of an embedded device
equipped with a low end micro controller,

16
00:01:04,080 --> 00:01:06,370
small memory and battery powered.

17
00:01:07,920 --> 00:01:11,260
A good example of this is
Contiki's code foot print,

18
00:01:11,260 --> 00:01:15,790
which only needs about 10 kilobytes
of ram and 30 kilobytes of rom.

19
00:01:17,310 --> 00:01:21,710
Currently there are a lot of companies and
universities involved in Contiki's

20
00:01:21,710 --> 00:01:25,709
development, such as
Texas Instruments Atmel,

21
00:01:25,709 --> 00:01:29,630
ETA Surik, Oxford University, and others.

22
00:01:31,230 --> 00:01:35,910
After this introduction, let's take a look
at the most important features of Contiki.

23
00:01:37,550 --> 00:01:41,290
Contiki uses protothreads,
software flow control.

24
00:01:42,550 --> 00:01:45,450
But, what is a protothread?

25
00:01:45,450 --> 00:01:50,010
For now, it suffices to say that
protothreats is a mechanism

26
00:01:50,010 --> 00:01:52,970
that mixes an event-driven model and

27
00:01:52,970 --> 00:01:58,590
threats to provide sequential flow control
without using complex state machines.

28
00:02:00,050 --> 00:02:05,160
Protothreats are an extensive topic that
we will cover in depth in another video.

29
00:02:06,950 --> 00:02:12,330
As we mentioned earlier, Contiki is
built for embedded network systems.

30
00:02:12,330 --> 00:02:17,580
Therefore, it provides powerful,
low power Internet communication stack

31
00:02:17,580 --> 00:02:21,520
that includes Internet standards IPv6 and

32
00:02:21,520 --> 00:02:26,250
IPv4 along with the recent
low power wireless standards,

33
00:02:26,250 --> 00:02:31,050
such as 6LoWPAN, RPL and CoAP.

34
00:02:31,050 --> 00:02:34,730
In addition,
due to the limited power supply and

35
00:02:34,730 --> 00:02:38,750
resource constraints in
embedded network system,

36
00:02:38,750 --> 00:02:42,230
Contiki provides mechanisms for
efficient memory allocation.

37
00:02:44,110 --> 00:02:49,760
Furthermore, Contiki is based on a modular
kernel that supports dynamic loading and

38
00:02:49,760 --> 00:02:52,660
linking at.

39
00:02:52,660 --> 00:02:56,260
As a result,
software modules are loaded only

40
00:02:56,260 --> 00:02:58,710
when the system requires their
particular functionality.

41
00:03:00,560 --> 00:03:03,630
It is an advantage for
system administrators and

42
00:03:03,630 --> 00:03:08,240
users to know for
how long a system has been running, or

43
00:03:08,240 --> 00:03:12,460
the system's working hours when
a particular power supply is used.

44
00:03:13,650 --> 00:03:17,850
In order to address this issue,
Contiki provides a mechanism for

45
00:03:17,850 --> 00:03:20,010
estimating the system's power consumption.

46
00:03:21,770 --> 00:03:25,566
Contiki can run in different types
of embedded networked drives,

47
00:03:25,566 --> 00:03:31,500
such as and other arm based devices.

48
00:03:32,700 --> 00:03:36,630
These hardware are popular and
easy to buy with low prices.

49
00:03:37,760 --> 00:03:38,680
In addition,

50
00:03:38,680 --> 00:03:42,600
it is possible to port Contiki to
new hardware with a little effort.

51
00:03:44,970 --> 00:03:48,979
As we all know, it is not easy to
set up a large wireless network.

52
00:03:50,270 --> 00:03:53,710
It requires a lot of time and
effort to debug and deploy devices.

53
00:03:55,030 --> 00:03:58,680
To address this issue, Contiki
provides the Cooja Network Simulator.

54
00:04:00,040 --> 00:04:04,750
Cooja allows simulator large
scale networks comprising

55
00:04:04,750 --> 00:04:08,519
10s of nodes running on fully
emulated hardware devices.

56
00:04:09,960 --> 00:04:14,420
Using Contiki's examples is
the easiest way to implement simple or

57
00:04:14,420 --> 00:04:16,860
complicated applications in a short time.

58
00:04:18,260 --> 00:04:21,960
Some examples show how to
develop application code,

59
00:04:21,960 --> 00:04:24,380
while others demonstrate system features.

60
00:04:25,800 --> 00:04:30,269
In addition, there is a common line shell,
suitable for debugging operations.

61
00:04:31,630 --> 00:04:37,340
Shell commands can be combined in
powerful ways using Unix style pipelines.

62
00:04:38,580 --> 00:04:41,290
It is also possible for an application

63
00:04:41,290 --> 00:04:45,780
to define its own shell commands that
work together with the existing ones.

64
00:04:47,210 --> 00:04:49,990
There are other interesting
features of Contiki

65
00:04:49,990 --> 00:04:53,155
that it was not possible
to cover in these lessons.

66
00:04:53,155 --> 00:04:57,180
Therefore we strongly encourage you
to read the recommended materials.

67
00:04:58,900 --> 00:05:01,920
Before ending this video,
I would like to show you

68
00:05:01,920 --> 00:05:05,730
how to implement the classic
hello world example in Contiki.

69
00:05:07,130 --> 00:05:10,250
If you run this code,
the phrase hello world,

70
00:05:10,250 --> 00:05:12,489
will be printed to
the terminal of the device.

71
00:05:14,010 --> 00:05:17,230
To get the details on how
to write a program and

72
00:05:17,230 --> 00:05:18,800
drawn an application in Contiki.

73
00:05:18,800 --> 00:05:23,000
You should come back to our lectures
who have more detail be use.

74
00:05:24,080 --> 00:05:26,629
Thank you for watching and
see in next videos.

75
00:05:26,629 --> 00:05:31,509
[MUSIC]