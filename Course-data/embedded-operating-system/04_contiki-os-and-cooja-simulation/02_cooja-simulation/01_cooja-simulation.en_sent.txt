[sound] >> hello and welcome to the last lecture of this module.
in previous videos, we studied the main structures of contiki core, and other important features.
we are now going to cover the last piece, the cooja simulator.
cooja is a simulation software for wireless sensor network applications.
it works with kontiki seamlessly.
by using cooja simulator, wireless sensor network applications running in kontiki can be ported to different platforms, such as ti 2258, secuduino, and sit one mode.
the simulator allows several libraries to be loaded in the same cooja simulation.
for example, a large wireless sensor network application can be formed from heterogeneous sensor nodes, which vary in terms of hardware platform.
in addition, cooja provides several features for analyzing and controlling a contiki system.
cooja can be used for different oss, including windows, linux, and even mac os.
the cooja simulator is located in the tools folder of your contiki distribution.
for convenience, i will continue the discussion with the latest version, which is contiki 3.0. however, please note that all steps and commands performed here are similar in contiki 2.7. you start the cooja simulator with the following commands shown in this slide.
if the simulator does not start after the second command and shows an error, don't panic.
the problem is that in the newest version, contiki 3.0, the folder mspsim is empty.
in order to fix this issue, you have to download msp from this link, and then follow the shown steps.
once cooja opens, you create a new simulation by choosing file > new simulation.
this opens a window to create a new simulation, as shown in the slide.
there are several boxes that allow you to fine tune your simulation.
they have default values, but you can also set your application's requirements.
for most applications, unit disc graph medium, udgm.
distance loss is suitable for radio medium.
the delay to start a mode is set in mode startup delay(ms).
final setting is the seed for random number generator in random seed.
when you finish the settings, click on create butter to have your new simulation open as shown in this light.
the interface has five windows.
these are: the network window in the upper left corner shows the network's physical layout.
the simulation control window in the middle top part is used to control the simulation.
you can stop, start, and reload the simulation.
the mote output window at the center shows any serial output generated by all motes.
the timeline window at the bottom.
shows events that occur on each mode over the timeline of the simulation.
and finally the notes window in the right side for temporary notes in the simulation.
let's now start to setup a whole network of a single rpl border router.
we start by adding single border router.
to do this, go to motes then add motes followed by create new mote type, and select sky mote.
in this example we work with the sky mote.
you can choose any types of mote depending on your application's requirements.
remember to give the mote type a useful description.
create border router and several nodes now the slide shows a form for creating a new mode type.
now, we will need to fill all the boxes.
the first one is the mode name.
in this case, we set the name as border router.
in the second box, we provide the path to the source of the node.
there are two types of sources we can provide here.
the first one is the source file in c, and the second one is a compiled file.
in this example, we did not compile any source for a sky node.
therefore we provide a c source file of the rpl for the router.
now, we can compile the source file by clicking the compile button.
it is recommended that you click clean before compiling.
when the compilation is successful, you can create a border router by selecting the create button.
now, a new window appears.
you must fill all the empty boxes.
it is also fine to leave the default settings here.
the only box that you must fill or edit is the box labeled as number of new nodes.
in our network we only need one border router, so the value is one.
after choosing av node, a single border router node appears in the network window.
we need to repeat these same steps to create additional nodes.
the only two differences are the source for the nodes and the number of nodes.
in this case, we provide caesar's file from the directory, which you can find on the slide.
please follow the detailed steps in the slide to add more notes.
once everything is successfully done you will see a total of six randomly placed notes on the network window as shown in the slide.
out of the six nodes, node one is the border router.
and the rest are the nodes which will execute unicasts sender code.
note that you can click, drag nodes, and locate them at your preferred location, to create your own network topology.
when you click on a node, it also shows the radio environment in green and grey color.
please note that to have radio enviornment and network traffic displayed, you must choose these options in the view menu.
even though the network layout is now set up.
it is not jet complete.
before starting the simulation a bridge with the rpl network must be created.
the bridge is responsible for the connection of the local network with the internet.
it means that bridging helps the border router become connective with the outside world.
subsequently ip address of the border router can be pinged.
we create the bridge using the command shown on the slide.
and the results should be similar to those shown on the bottom.
we verify this using a web browser to connect to the router using this address.
if you also get a results similar to the one shown here congratulations, you have successfully created an rpl network.
i hope that after this video you can simulate your own one application with and use it for a capstone project.
with this video we conclude the module.
i hope you enjoyed watching.
[music]
