so, we want to integrate in a coupled way.
so, let's talk about this as you can be writing code like that.
let's just use sigmas.
i'm using my attitude being explicit here all right?
the other set of stakes that i have to integrate now are omegas.
so, we're going to put in an omega b relative to n. so, your code you've written earlier to integrate just the attitude rates can even omega.
it all works, it's just instead of omega being looked up in a separate sine and cosines or some function, it's now computed every time step and updated as well.
so you have to do everything simultaneously.
your x dot equals to f function.
f is basically the first part is nothing but sigma dot.
and the second part is omega dot.
that's what you have to find.
in your code, you already have this part.
so you know that and it's based on the current omega, the integration, that's fine.
and now this one, also depends on the current omega but it also needs the inertia tensor representation.
and it needs to know what the external torques are and that's it.
so you can see once you have those nice clean writings set up for dynamical systems, we can then easily expand.
later on if we have reaction wheels, we have to keep track, those are extra states, cmgs, extra states.
you just start expanding the state vector.
but you can build on your prior work, and that makes life much easier, okay.
any questions on this?
so, these are basic equations of motion.
h dot equal to l you saw.
it's like two lines with the right arguments, and you get the equations of motion in a very general tensor form.
