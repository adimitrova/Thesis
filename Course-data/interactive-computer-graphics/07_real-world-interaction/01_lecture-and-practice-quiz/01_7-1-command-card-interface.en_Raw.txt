[noise] hello, this is week seven of
interactive computer graphics course.
the topic we discuss here
is real world interaction.
[cough]
so real world interaction,
we mean a user interface for computing
systems, working in the real world.
so, so far, we have discussed user
interface between computer and the user.
so user do something, and then computer do
something, and there's interaction here.
so through here,
we extend this into the real world.
so some computers can be connected to real
world objects like a robot or appliances,
home appliances so we discuss here
the interaction between this kind of
computing systems working in the real
world robots or home appliances and so on.
so here's original topics
we discussed this week.
so we discussed command card interface for
home robots.
and style-by demonstration for
teaching robot's behavior, and
the actuated puppet device, for
posing a steady characters and the robotic
light systems and the fur display.
so first topic, we discuss is
command card interface, where this one is,
this work was published as magic cards.
and question here is, how to command
a robot, walking robot in your home.
now, typical approach is
i think is two extremes.
one, it's very simplified, easy to
use control with speech or gesture.
it's very abstract control.
however, in some cases,
this is too abrupt, too simple.
you know, you cannot specify details with
very simple command like create here,
or do it, or go there.
it's too abstract.
and also,
these kind of commands are volatile.
you know, as soon as you say
something it disappears.
it's kind of a difficult to confirm
whether you actually gave a command or
the source.
and also you need to remember what command
is available when you speak or gesture.
the other extreme is direct control,
using joystick or gampad or somthing.
so you continuously provide command
the system continuously follows a command.
so you can do everything with
this control details, however.
in some cases,
this is too little control, and
it's very tedious to control continuously.
so what we try to do here is to hit some
middle ground between these two extremes.
so this is a method we propose here.
we propose paper card interface for
giving command.
so in the, inter-environment the user
leaves a command card giving instruction
to the robot, such as clean here, or
deliver this object here, and so on.
and when she goes out,
everything happens, and the robot
does its task when she is going out.
so the user puts the instruction
card in the environment, and
the robot does the job
while the user is out.
so that's the idea.
let me show you a video.
so, first part of this
video is a futuristic view.
so this is a concept video,
not to be implemented.
but i hope you get the idea
from this sequence.
so suppose you have a house, messy room,
messy kitchen,
throw all trash bins is full.
so we need,
i want robot system to take care of it.
so, she pulls out a command card set.
so this one is a combinatory list,
of possible operations you
can give to the robot system.
only you pick up appropriate command
card and leaves it in the environment,
like wash this kitchen, and
deliver this to the garbage or bin,
take out this garbage,
make bed, so, clean here.
so a good thing about this kind
of paper card couple things.
so, first you can see a list of available
commands just by looking is the cards set
so you do not need to
remember possible commands.
and also leaving a card is
a very clear instruction and
if you want to cancel
you just pick up a card.
and also a card is a very appropriate for
space time physical location.
like clean here, deliver here and
here is very ambiguous, but
color location exactly
space wise location.
so that's a benefit.
and after she goes out a robot
appears to do the task.
and again this is a concept video
not real implementations so
again this case our robot appears and
it does the job.
so, here what we try to do
is mimic interaction with
human human interaction you know a human
can give a message card to another human.
and then they can do the job.
so we try to do the same
as computer system.
so that's it.
and in the evening the user comes back and
everything is done.
so this is the kind of
envisioned futuristic view.
and now let me show you
actual implementation.
so, current implementation, not too fancy,
but there is a basic saying.
we built a system using roomba robots.
so we have a couple of
robots working together.
and also, we put it in the environment,
where everything is observed
by the ceiling mounted camera.
and the system continues to
track the command card and
also the lowered locations.
so yeah here's the system in the view in
what, is it actually walking system so
user give instruction like deliver
this box from here to there.
this location.
and the vacuum clean this spot.
and, also, remembers the task.
and then the user goes out and
the system starts walking.
and see it in camera captures
all of the command cards.
first, system picks up the command cards.
he is in this card pickup.
and after that,
the system start to do the job.
first request was to deliver here,
this to here.
so, pushing robot starts to walking and
it push it over to the target location.
and next, using a grid system
to vacuum clean this spot.
so vacuum cleaner appears and
then clean it.
so, that's system and
also, another interesting aspect
is that reporting errors.
so, user gives instructions to robot,
as a paper card.
and, but sometimes system also
provided feedback to the user.
for example, system makes an error,
then system should present
error report to the user.
an interesting point about
the system is that error report is
also given as a paper card
left in the environment.
let's see it.
so if the robot fails,
like the power is out.
and the small printer,
mobile printer robot appears and
then they have a printed message to
the user, such as, i'm sorry, i failed.
so this may disclose a loop, you know,
user provides command on paper card and
the system provides
feedback as a paper card.
in this way, user can interact with
the robotic system without touching any
computer, just using paper card.
so yeah, as again the environments like
this we have ceiling mounted cameras and
central computers and
then remotely controlled robots.
and we use visual tab using 2-dimensional
augmented reality visual code.
and backside you see instruction for
the user.
so that's a system.
and here let me briefly describe pushing
algorithm developed for this system.
so this is a pushing algorithm for a non
pre, prehensile, which means no grabbing.
so yeah, so naive approach is
two binary state approach.
so first half your robot should
go behind the object, and after
reaching the behind object the robot going
to the pushing state and initialize push.
but in the middle then robot's mo,
may object may move sideways, and
in that case robot go back to the behind.
and after reaching the behind
goes the pushing state.
so in reality the robot
needs to go back and.
force between these two states.
and this is not very desirable.
so, this is unstable.
so, robot can, into an unstable status,
between just go back and
force between these states.
and also this requires very
careful parameter setting.
you know, you need some threshold
distinguish these two states.
and this parameter can be very sensitive.
so, what we propose it to avoid this.
we propose to use a dipole field
to achieve pushing behavior.
so suppose you have object here,
and you want to move this object to the,
this direction.
so, given this object position and
orientation, we compute
a dipole field at the center.
and that the object and
the oriented tower's target direction.
and after that, simply we close the lower,
according to this dipole field.
there are a couple benefits.
first, there's no clear mode switching,
going behind and
pushing it smoothly emerge so there's
no sudden change between the two modes.
another thing is that scale invariance.
so, as you see dipole field it doesn't
change, even if you scale up or
scale down.
always the same shape depend,
regardless of it's scale.
so which means you can
apply the same allowances,
the same parameters to the object
with different scales.
so here's a little bit more details.
so you have object and pushing direction,
desired pushing direction,
direction and you first compute
local coordinate plane defined by
the object position and orientation.
and then you compute the position.
of the robot, relative to this
object in this coordinate frame.
so, you get cos sin theta and
sin theta, is a distance r.
after having this theta angle,
the other one is very simple.
what you have to do is,
just compute sin2 theta, sin2 theta.
it gives you the direction.
where is it robot should look?
this is just a the finishing with
right field, dipole field, and
you can implement this kind of here.
very, very few lines of cords.
so, let me show you a brief video.
so, yeah this is the basic idea.
and the system consists of
a seating camera and robots.
and then, this is a computed dipole field.
and then robot flows along the,
flow field.
so in this examples,
the robot pushes a very small cup.
and then the movement is very small.
there is no distinct two modes.
it's molds together.
and here the robot tries to push the large
dish exactly using the same dipole field.
and you can apply the same
algorithm to the roomba box,
to push things on the floor.
by the way, this robot is very
easy to control, from computer.
so, if you want to try robotic system,
i recommend to try this system.
another interesting thing is here,
cooperative pushing.
if the object is too heavy for
one once to push,
two robots should cooperate together.
traditional approach is the power pushing,
you know?
there's always that other two, always
act side by side, robot push together.
but here,
we tested single-line serial pushing.
so the other one was very simple,
just apply two dipole fields.
here, this robot tries to push this
box this way, but it's too heavy.
then this robot pushes this second,
the fast robot.
the second robot pushes the fast robot,
again, using a dipole field.
so by combining two [inaudible] then,
you know,
robots can push relatively heavy object.
and again motion is going to be smooth.
so that's it.
so, yeah, so
we introduce command car based interaction
and pushing outer wards in to achieve it.
and original paper was called magic cards,
paper tag interface for
implicit robot control.
and the paper id we used is a popular one.
they are visual two dimensional
bar code to measure a dipoles,
frequently used in
augmented reality systems.
original paper was published in
1998 by has metrics real time
object identification and
registration method for augmented reality.
and if you want to use it and then there's
a popular toolkit called ar toolkit, and
i recommend you to try it, if you want.
and for the pushing algorithm, we
published a paper on the dipole field for
object delivery by pushing
on a flat surface.
so if you want to look at the pushing
algorithm please take a look
at this paper.
thank you.
