1
00:00:00,500 --> 00:00:04,470
Next topic we discuss is control
of robotic lighting system.

2
00:00:05,860 --> 00:00:09,920
The work we introduce here is titled
Lighty, A Painting Interface for

3
00:00:09,920 --> 00:00:12,710
Room Illumination by Robotic Light Array.

4
00:00:14,140 --> 00:00:17,460
So as a program, we want to address
here is that it is difficult to

5
00:00:17,460 --> 00:00:21,650
control many light, especially
when they can change orientations.

6
00:00:21,650 --> 00:00:27,220
So here an example destination, so suppose
we have many lights in the ceiling,

7
00:00:27,220 --> 00:00:30,480
and the individual lights
can change its orientation.

8
00:00:30,480 --> 00:00:34,070
And this is a very huge
control parameter space, and

9
00:00:34,070 --> 00:00:37,880
it's very hard to control
appropriate parameters.

10
00:00:37,880 --> 00:00:40,200
And typical user
interfaces look like this.

11
00:00:40,200 --> 00:00:44,590
You have many sliders to change
brightness and orientation, and so on.

12
00:00:44,590 --> 00:00:47,230
And this is not very useful for

13
00:00:47,230 --> 00:00:50,630
people to quickly sketch
desired lighting configuration.

14
00:00:51,850 --> 00:00:54,710
So our approach is to
use painting interface.

15
00:00:54,710 --> 00:00:56,580
So configuration looks like this.

16
00:00:56,580 --> 00:00:58,200
We have an environment, and

17
00:00:58,200 --> 00:01:02,510
we have many robotic lights, and they
can change brightness and orientation.

18
00:01:02,510 --> 00:01:06,260
And we have a camera here
to capture our environment.

19
00:01:06,260 --> 00:01:11,300
And then in this kind of view,
there's a paint, desired lighting this up.

20
00:01:11,300 --> 00:01:14,890
So this part should be bright,
this should be, this part should be dark.

21
00:01:14,890 --> 00:01:17,730
We just paint desired configuration.

22
00:01:17,730 --> 00:01:20,890
And then the system learns
inverse relation, and

23
00:01:20,890 --> 00:01:23,540
then obtain desired parameter setting.

24
00:01:23,540 --> 00:01:25,500
So that's the idea.

25
00:01:25,500 --> 00:01:26,953
Let me show you a video.

26
00:01:33,974 --> 00:01:36,196
So again, this is a system work view.

27
00:01:36,196 --> 00:01:40,224
So you have actuated the light on
the ceiling and the UI in the environment.

28
00:01:40,224 --> 00:01:45,265
And then you would attempt to control
the light you pick up a tablet and

29
00:01:45,265 --> 00:01:48,939
they use these environment and
they paint on it.

30
00:02:00,932 --> 00:02:03,580
So this is a prototype
hardware we developed.

31
00:02:03,580 --> 00:02:08,290
We the, we built a miniature
room with miniature lights and

32
00:02:08,290 --> 00:02:14,260
miniature furniture and
this is a array of robotic lights.

33
00:02:14,260 --> 00:02:17,621
So, they can change
orientation individually, and

34
00:02:17,621 --> 00:02:19,795
also can change brightness.

35
00:02:25,137 --> 00:02:27,240
So, each light has three
degrees of freedom.

36
00:02:27,240 --> 00:02:32,580
So if we have 12 light,
which means 36 yeah, degrees of freedom.

37
00:02:34,760 --> 00:02:36,410
So, here's a painting user interface.

38
00:02:36,410 --> 00:02:41,670
So, given this screen,
you're going to pick up a color and paint.

39
00:02:44,040 --> 00:02:45,270
Yeah.

40
00:02:45,270 --> 00:02:47,730
Okay.
So here lots of things happening here.

41
00:02:47,730 --> 00:02:52,540
So this view is always a real-time
capture of the camera view.

42
00:02:52,540 --> 00:02:54,010
So you see camera view.

43
00:02:54,010 --> 00:02:55,260
And as I use a paint,

44
00:02:55,260 --> 00:02:59,870
user's paint is actually feedback
is given as these quanta lines.

45
00:02:59,870 --> 00:03:03,080
So this area bright,
this area is a little bit dark.

46
00:03:03,080 --> 00:03:07,720
And then given this control on user
request, system continuously learns

47
00:03:07,720 --> 00:03:11,790
optimization to get desired parameters,
and it's a real-time.

48
00:03:11,790 --> 00:03:15,500
The environment con
moves around the light.

49
00:03:15,500 --> 00:03:20,400
And then up, and you see the result
in real-time in this camera view.

50
00:03:20,400 --> 00:03:22,428
So, there's a lots of
happening behind the scene.

51
00:03:27,361 --> 00:03:32,350
Yeah, so user paint system searches for
the, the parameter setting interactively.

52
00:03:32,350 --> 00:03:35,230
And then you see the layout
result immediately.

53
00:03:35,230 --> 00:03:36,692
So, you always see the camera view.

54
00:03:48,178 --> 00:03:50,209
Yeah.
So, depending what the user input,

55
00:03:50,209 --> 00:03:52,668
system automatically computes
the parameters said and

56
00:03:52,668 --> 00:03:54,195
then derives the robotic system.

57
00:04:03,276 --> 00:04:06,120
So, this is more rapid example.

58
00:04:06,120 --> 00:04:11,540
So, if you touch down, and move around,
it will actually paint uncommitted.

59
00:04:11,540 --> 00:04:16,788
But, if you hover, you paint it on
top of the surface, you can still see

60
00:04:16,788 --> 00:04:22,231
the preview of the painting without
actually committing the paint.

61
00:04:36,841 --> 00:04:41,410
So this is a mimic of oh,
simulation of traditional approach.

62
00:04:41,410 --> 00:04:43,010
So you have 12 lights and

63
00:04:43,010 --> 00:04:48,050
then you individually control
brightness and orientation.

64
00:04:48,050 --> 00:04:50,350
So, and this a typical interface, and

65
00:04:50,350 --> 00:04:54,269
it's very tedious control one by one,
to get the desired result.

66
00:05:06,076 --> 00:05:09,690
So we compare this interface
with our painting interface, and

67
00:05:09,690 --> 00:05:13,780
if you want to bright somewhere,
if you want to illuminate somewhere,

68
00:05:13,780 --> 00:05:15,290
it's relatively easy.

69
00:05:15,290 --> 00:05:18,530
You just turn on, you edit right,
and then delete it.

70
00:05:18,530 --> 00:05:21,710
However, if you want to
make some part dark,

71
00:05:21,710 --> 00:05:26,570
it suddenly turns out to be very difficult
using traditional interface because it

72
00:05:26,570 --> 00:05:28,690
involves control of many lights.

73
00:05:28,690 --> 00:05:33,920
You know, you move like sideways,
moving away, looking away and turn off.

74
00:05:33,920 --> 00:05:37,940
But there's lots of interruptions behind,
between multiple lights, so

75
00:05:37,940 --> 00:05:39,226
that's a difficulty.

76
00:05:43,101 --> 00:05:46,120
Okay, so that's the video I think.

77
00:05:46,120 --> 00:05:50,860
So all the benefit of our
system is that in addition,

78
00:05:50,860 --> 00:05:54,800
make specific regions bright,
you can also make specific regions dark.

79
00:05:54,800 --> 00:05:56,140
This is kind of negative light.

80
00:05:56,140 --> 00:06:00,810
So you ask a specific region to
get darker, and the system do it,

81
00:06:00,810 --> 00:06:06,860
and looks like a negative light, and
if you, figure it out from our user study,

82
00:06:06,860 --> 00:06:10,960
in the painting if the user asked to
make up a upper left corner dark,

83
00:06:10,960 --> 00:06:14,800
just paint a region darker and
you get this result.

84
00:06:14,800 --> 00:06:19,040
However, if you use traditional
direct controller, it takes time and

85
00:06:19,040 --> 00:06:21,170
it's very difficult to
get this kind of result.

86
00:06:23,630 --> 00:06:27,390
And let me briefly describe the algorithm,
behind the scene.

87
00:06:27,390 --> 00:06:28,800
So, this is what's happening.

88
00:06:28,800 --> 00:06:31,850
So, this is the light parameters,
so you have many parameters.

89
00:06:31,850 --> 00:06:34,980
Light orientations, brightness and so on.

90
00:06:34,980 --> 00:06:39,970
And then if you derive the light, and
if you get this out, then you know,

91
00:06:39,970 --> 00:06:43,980
physics will happen and
then you will get this camera view.

92
00:06:45,700 --> 00:06:49,470
And then, after that I use a paint,
desired painting result.

93
00:06:49,470 --> 00:06:53,760
So, system compares these two, and
then optimize the parameter setting and

94
00:06:53,760 --> 00:06:55,600
then we'll get it.

95
00:06:55,600 --> 00:07:00,680
And in order to run optimization, you need
to do this iteratively many times, so

96
00:07:00,680 --> 00:07:05,030
instead of using actually driving
physical lights, we run simulation.

97
00:07:05,030 --> 00:07:08,430
You know, what happens if this
parameter setting is given,

98
00:07:08,430 --> 00:07:14,010
and the system simulates the illumination
result and then compare the result compare

99
00:07:14,010 --> 00:07:18,450
it to the user input, and then again last
simulation and so, so that's the idea.

100
00:07:20,710 --> 00:07:23,680
So the physical process
again is the process,

101
00:07:23,680 --> 00:07:27,470
physical process is too complicate
to obtain analytic model.

102
00:07:27,470 --> 00:07:32,010
So in order to do this simulation,
we use a data-driven prediction method.

103
00:07:33,390 --> 00:07:37,580
So we, so we capture many,
many illumination results.

104
00:07:37,580 --> 00:07:40,380
So you have many parameters,
like lighting parameters.

105
00:07:40,380 --> 00:07:44,270
So this light and brightness,
the second right query orientation.

106
00:07:44,270 --> 00:07:48,760
So you have many parameters and then this,
you get many, many camera views.

107
00:07:48,760 --> 00:07:51,380
So you capture many images.

108
00:07:51,380 --> 00:07:57,000
And then based on this data, you predict
the resulting elimination results for

109
00:07:57,000 --> 00:07:59,498
a new given parameter set.

110
00:07:59,498 --> 00:08:03,890
And in order to do this,
we basically individually control

111
00:08:03,890 --> 00:08:08,750
the lighting parameter for individual
light, and then we add them together.

112
00:08:10,510 --> 00:08:13,360
However, important point is

113
00:08:13,360 --> 00:08:18,630
naive summation of image data
where pixel values does not work.

114
00:08:18,630 --> 00:08:23,830
So suppose you have pixel A illumination
rays out here, no, suppose you have

115
00:08:23,830 --> 00:08:28,530
a illumination result over A here and then
illumination result over light B here.

116
00:08:28,530 --> 00:08:32,240
But id you are tired of,
to doing pixel values, it does not

117
00:08:32,240 --> 00:08:37,600
correspond to the result, eliminated
by light A and B simultaneously.

118
00:08:37,600 --> 00:08:42,550
That is because of the non-linear
radiation set between radiance.

119
00:08:42,550 --> 00:08:49,880
So, physical physical value of
the brightness is not directly linear.

120
00:08:49,880 --> 00:08:54,550
Relate, linearly related to the pixel
value, because there's a non-linearity.

121
00:08:54,550 --> 00:08:56,800
So in order to handle this,

122
00:08:56,800 --> 00:09:01,916
you, we first need to convert pixel
values into a radiance value.

123
00:09:01,916 --> 00:09:04,760
So re-award brightness value.

124
00:09:04,760 --> 00:09:08,160
After converting pixel
value to radiance value you

125
00:09:08,160 --> 00:09:14,140
can accurately predict the summation
of two light illumination.

126
00:09:14,140 --> 00:09:20,090
Then after that we can again convert it
to the pixel body to get the prediction.

127
00:09:20,090 --> 00:09:23,600
So that's what you need to do
to get this kind of system.

128
00:09:25,610 --> 00:09:31,650
So in summary, we, I just shows Robotic
lighting system with painting interface.

129
00:09:31,650 --> 00:09:36,030
And I briefly discussed what you need
to do, to implement this kind of thing.

130
00:09:36,030 --> 00:09:40,390
So, you need to compute
a simulation in the radiance space,

131
00:09:40,390 --> 00:09:44,990
instead of pixel space,
pixel brightness value space.

132
00:09:44,990 --> 00:09:48,070
So the reason a paper was
published as design and

133
00:09:48,070 --> 00:09:51,580
the enhancement of painting interface for
room lights.

134
00:09:51,580 --> 00:09:56,490
And if you want to know more
about Radiance Computation, one,

135
00:09:56,490 --> 00:09:59,220
one good starting point is this paper,

136
00:09:59,220 --> 00:10:04,030
recovering high dynamic range,
dynamic radiance maps from photographs.

137
00:10:04,030 --> 00:10:08,600
So this paper discuss, hot to compute
original radiance values from

138
00:10:08,600 --> 00:10:11,130
multiple photographs, over the same scene.

139
00:10:12,540 --> 00:10:17,970
And also our lighting control with
painting interfaces, there are a couple

140
00:10:17,970 --> 00:10:22,600
experiments in 3D graphics, and one
example is this one, lighting with paint.

141
00:10:22,600 --> 00:10:25,480
So user paints desired lighting result,
and

142
00:10:25,480 --> 00:10:29,730
the system computes, appropriate
lighting for the computer graphics.

143
00:10:29,730 --> 00:10:32,479
So what do we do is a real
world version of this one.

144
00:10:33,510 --> 00:10:35,150
So that's it for this week