next
topic
we
discuss
is
,
spatial
key
framing
for
character
animation
.
and
,
the
work
we
introduce
here
was
published
spatial
key
framing
for
performance-driven
animation
.
so
the
motivation
here
is
,
creation
of
character
animation
is
tedious
and
difficult
.
so
here
's
a
list
of
,
popular
techniques
,
so
key
framing
,
motion
capture
,
physics
and
scripting
.
keyframe
is
by
the
way
the
most
popular
technique
.
so
you
set
key
bodies
of
each
time
frame
.
so
,
as
a
program
we
want
to
address
here
is
the
creation
of
character
animation
is
tedious
and
difficult
.
here
are
a
list
of
current
popular
techniques
of
key
framing
,
motion
capture
,
physics
,
and
scripting
.
so
by
ways
the
most
popular
technique
is
key
framing
.
so
you
get
a
character
and
for
each
time
you
place
a
pose
like
time
zero
,
this
pose
,
time
one
,
this
pose
,
time
two
,
this
pose
.
so
individual
key
framing
.
but
however
,
this
is
very
difficult
to
do
.
especially
,
for
now
we
use
to
get
a
smooth
animation
using
this
key
framing
.
if
you
do
it
poorly
,
it
's
like
a
robotic
motion
.
and
the
another
popular
technique
is
motion
capture
.
you
can
directly
record
body
motion
using
the
tracking
systems
.
however
this
one
requires
special
device
,
special
space
,
and
also
scale
,
skilled
actors
which
is
difficult
.
the
physics
simulation
is
also
used
for
but
not
good
for
designing
character
animation
.
and
scripting
is
also
used
for
a
robotic
motion
,
like
change
angle
this
to
change
this
angle
.
however
,
this
is
not
good
for
expressive
character
animation
.
so
what
we
want
to
do
is
easily
sketch
or
create
,
you
know
dynamic
form
motions
or
character
.
so
the
basic
idea
is
very
simple
.
we
believe
that
the
best
,
easiest
way
is
to
directly
manipulate
a
character
in
front
of
the
camera
.
and
then
press
record
,
and
then
manipulate
,
and
then
stop
and
play
back
and
do
the
same
thing
.
so
direct
recording
of
performers
should
be
the
best
way
to
do
it
.
one
problem
here
is
that
the
typical
input
device
is
very
limited
degree
of
freedom
.
so
for
example
,
if
you
use
a
mouse
,
you
only
have
x
and
y
inputs
,
two
dimensional
inputs
.
however
,
character
usually
has
a
high
degree
of
freedom
.
so
each
joint
has
three
degrees
of
rotation
freedom
,
and
you
have
many
many
joints
.
so
you
have
to
control
many
joints
with
single
mouse
,
which
can
be
very
difficult
for
a
performance-based
recording
.
so
our
proposal
is
to
use
spatial
key-framing
,
so
user
or
designer
first
specifies
or
prepares
key
poses
in
the
3d
space
and
then
blend
them
,
depending
on
the
control
handle
.
so
let
me
show
you
a
demo
.
so
,
here
is
a
character
in
the
3d
space
and
then
we
make
an
animation
of
this
character
.
and
as
i
said
,
difficult
project
is
key
framing
.
you
know
,
this
time
,
this
pose
,
next
time
,
this
pose
,
next
time
,
this
pose
and
so
on
.
and
it
's
very
,
very
tedious
to
do
this
for
a
long
animation
sequence
.
so
,
our
process
is
to
directly
record
a
motion
.
particularly
,
if
but
,
if
you
use
one
by
one
,
it
's
very
tedious
.
in
this
you
can
only
head
,
arm
,
or
leg
,
but
you
can
not
manipulate
all
of
them
together
.
so
our
approach
is
to
use
a
predefined
key
frame
.
so
you
say
,
this
pose
is
associated
with
this
position
,
and
then
next
pause
is
associated
with
this
position
.
and
then
,
so
you
have
two
key
frames
.
so
,
standard
key
frames
associate
with
timeline
.
but
here
,
key
frames
are
associated
with
spatial
locations
.
and
by
clicking
you
can
jump
to
the
key
frames
and
by
dragging
you
can
plan
these
too
.
so
now
,
you
can
only
control
three
joints
by
a
single
mass
.
an
interesting
point
here
,
is
that
you
can
add
more
,
and
more
key
poses
very
easily
.
so
,
you
know
have
three
key
poses
.
and
they
blend
together
,
and
then
you
get
a
reasonably
interesting
motion
already
.
and
you
can
add
more
,
and
more
operation
of
key
poses
,
like
a
kick
and
kick
and
so
on
.
all
right
,
let
me
show
you
a
couple
more
examples
.
so
,
so
here
,
again
,
individual
poses
are
not
so
complicated
.
however
,
if
you
hide
,
and
then
start
moving
around
the
ball
,
now
you
can
make
this
teddy
bear
doing
the
juggling
,
just
by
using
a
two-dimensional
mouse
.
and
then
another
example
is
this
one
.
so
again
,
each
individual
coordinates
are
not
so
expressive
.
however
,
as
you
start
moving
them
around
,
you
can
make
him
dance
like
this
way
.
so
here
you
know
,
your
hand
motion
is
directly
appears
in
the
character
motion
,
so
that
the
resulting
motion
is
very
expressive
.
so
of
course
,
you
can
let
go
of
this
motion
:
you
know
,
one
,
two
,
one
,
two
,
mm
.
so
now
you
can
get
this
animation
and
then
now
you
get
a
motion
.
so
you
can
see
it
from
many
different
locations
.
okay
.
now
let
me
show
you
a
couple
more
examples
.
so
here
is
a
kicking
motion
.
so
you
have
many
,
many
couple
of
key
poses
.
and
then
by
dragging
this
lead
ball
you
can
make
the
teddy
bear
make
a
high
kick
,
as
well
as
a
low
kick
.
and
this
is
a
mushroom
,
jumping
,
so
you
have
five
or
six
key
bodies
and
then
by
directly
manipulating
that
ball
you
can
make
this
animation
.
[
blank_audio
]
and
this
is
a
teddy
bear
in
trouble
,
i
think
six
key
poses
.
and
then
,
you
know
,
he
says
no
first
,
and
they
get
idea
,
and
be
happy
.
so
,
you
can
make
this
kind
of
expressive
emotion
by
using
your
hand
motion
integrated
into
the
final
.
[
blank_audio
]
here
this
eyeballs
also
have
a
separate
joint
so
you
can
control
their
rotation
.
[
blank_audio
]
okay
,
so
let
me
briefly
describe
the
algorithm
to
do
this
.
so
input
to
this
system
is
handle
coordinates
.
so
,
you
have
2d
mouse
,
and
then
you
control
the
lead
ball
position
using
a
mouse
.
and
the
output
is
the
orientation
of
each
joint
.
so
,
you
have
many
in
rotation
angles
.
so
,
the
question
here
is
how
to
represent
orientation
angle
,
rotation
joint
angle
.
and
there
are
a
couple
ways
to
represent
joint
angles
like
euler
angles
or
quaternions
but
here
we
use
a
rotation
matrix
,
so
nine
elements
.
like
this
way
,
so
each
joint
has
a
three
by
three
matrix
for
these
represents
also
on
our
axis
for
each
joint
.
and
then
what
we
need
to
control
these
nine
parameters
for
each
joint
depending
on
the
user
input
.
so
let
's
take
this
joint
.
so
,
this
joint
has
suppose
we
have
three
special
key
frames
,
and
then
each
key
frame
has
this
nine
parameters
for
each
joint
.
and
then
as
user
specifies
the
new
handle
position
and
then
we
need
to
compute
three
by
three
matrix
for
this
position
for
this
joint
.
to
do
this
we
basically
blend
these
nearby
three
key
poses
.
so
you
wo
n't
have
to
do
this
.
let
's
take
,
we
compute
interpretation
for
individual
elements
or
individual
entry
of
these
three
by
three
matrix
.
so
this
is
just
a
simple
skeletal
body
interpolation
and
here
we
use
a
technique
called
radial
basis
function
interpolation
.
so
this
is
a
scattered
data
interpolation
using
radial
basis
functions
.
this
is
a
kind
of
stand
out
technique
and
you
can
use
as
a
possible
interpolation
techniques
.
this
is
very
easy
to
implement
,
very
easy
to
use
.
the
idea
is
very
simple
.
so
for
a
supposed
example
you
have
three
skeletal
bodies
with
special
location
.
and
then
for
each
location
,
we
have
a
kernel
function
.
kernel
function
,
and
then
we
eh
,
compute
most
appropriate
waiting
or
coefficients
for
each
kernels
.
and
then
just
by
adding
them
together
,
you
will
get
a
very
smooth
,
interpolating
function
.
and
if
you
want
to
know
more
,
you
can
,
i
recommend
you
to
take
out
paper
by
turk
in
so
after
computing
this
up
line
,
this
skeletal
body
interpolation
for
individual
elements
,
you
have
nine
elements
in
a
three
by
three
matrix
.
but
unfortunately
,
if
you
apply
our
interpolation
independently
to
these
entries
in
resulting
matrix
,
is
not
necessarily
orthonormal
,
you
know
.
rotation
matrix
needs
to
be
,
orthonormal
.
and
also
perpendicular
to
each
other
and
also
the
directions
should
be
equal
to
one
.
so
after
that
we
apply
orthonomalization
operation
to
these
three
by
three
matrix
to
get
this
one
.
i
always
skip
details
of
this
orthonormalization
but
there
's
a
standard
approach
.
okay
,
so
here
's
a
summary
.
so
we
introduce
spatial
key-framing
for
creating
character
animation
quickly
and
easily
.
as
a
user
defines
key
poses
in
the
screen
space
,
and
then
the
system
automatically
blends
nearby
key
poses
.
in
order
to
do
so
,
we
use
rotation
matrix
and
then
we
use
radial
basis
function
interpolation
for
each
element
in
the
matrix
.
so
to
learn
more
,
original
paper
was
published
as
spatial
keyframing
for
performance-driven
animation
,
and
if
you
want
to
learn
more
about
interpolation
by
radial
basis
functions
.
there
's
a
paper
titled
modeling
with
implicit
surfaces
that
interpolate
.
here
's
an
example
.
so
use
a
space
prior
positions
in
3d
space
.
and
then
this
technique
generates
a
very
beautiful
smooth
surface
interpolating
these
points
.
and
interpolation
of
3d
angles
is
popular
topic
discussion
in
graphics
community
.
and
the
popular
technique
used
is
quaternion
interpretation
.
and
then
i
recommend
you
take
a
lot
of
original
paper
published
in
siggraph
85.
thank
you
.
