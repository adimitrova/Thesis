our next topic is procedural deformation.
so, that what we introduce here is called
procdef or local-to-global deformation for
skeleton-free character animation.
so the goal here is design a flexible
character animation
such as jelly fish or worm, or intestine,
like a heart.
so important point here is that they are
full body in motion.
you know, entire body, every detail is
moving, and also there is a dynamic.
you know, it, it's not, how to say freeze
dry animation.
they act as a dynamic.
if you push, then the formation changes,
and so on.
so there are traditional methods.
these are the traditional methods.
one is skeleton-based.
this is most popular skeleton-based
control, like a joint
angle control, just we showed in the last
video.
this is, technique is useful for character
animation like a human or animals.
but you know, if there is no obvious
skeleton structure, like a jellyfish, this
technique doesn't work.
and [inaudible] possible approach is
keyframe-based.
so, for each timeframe, you specify the
shape individually and the system just
[inaudible] them.
however, in order to do this, you have to
specify many, many
key poses manually by pushing, allowing,
many vertices, which is very tedious.
but more importantly, this kind of
keyframe-based cannot calc, handle
dynamics, you know.
the motion is kind of fixed animation and
it cannot respond to the forces from the
environment.
so our approach is the procedure approach.
so the user specifies how local regions of
a h, entire body stretch or shrink.
and then by assembling them together
system generates a global motion.
and the user also designs the patterns of
the local deformations.
like, this is time sequence, you
know, stretch, shrink, stretch, shrink,
very quickly.
or slowly, or fast stretch and slowly
shrink, something like that.
so let me show you a video.
[blank_audio]
hm, yes.
[blank_audio]
so here is our result.
so this kind of animation is our goal,
the full body animation of a flexible body
characters.
so the first task is design orientation
field.
so given as already said, user first
specifies an orientation field.
[blank_audio]
so the the user specifies a layer
structure here actually, so
the red layers are intact inside and the
blue is outside.
so in this way, user specified the layer
structure.
and you will see it like this.
so after user paints red inside, blue
outside,
system interpolates them to compute a
continuous layers.
and after specifyinf layers, user
specifies orientation
of extra field on the layer surface.
so in here you can specify, user specifies
rotational flow field.
so this is a flow field.
so now, we have a flow field along this
layer surface, and then layer surface
directional vectors, gradient vector.
and then you can get the cross-border app
to get a free frame field.
so, in this way, you get the global
representation field, inside of an object.
next we define how each individual element
deforms depending on the time.
[blank_audio]
so, in this example we have three fields,
this primary direction and second
direction, and third direction.
and for each direction, we specify the
pattern, motion pattern.
so the top one specifies a change in the
lengths
direction and then you [inaudible] longer
and shorter, longer and shorter.
[blank_audio]
so, yeah, in this way the user specifies a
change in their open shape
and then global shape is obtained as a
result of the smaller motions.
[blank_audio]
you can easily represent this kind of
squashing operations as well.
so, the previous example, all elements
move simultaneously in the same way.
but in order to make it more interesting
eh, motion, you can specify it's amplitude
field.
so here red and blue has a.
we'll put its direction or put it
amplitude.
so in this way, if the blue stretches, red
shrinks, and red stretches, blue shrinks.
so in this way, you can get this kind of
bending motion.
and the previous one is a fixed body for
the entire body.
but the next one is propagation.
so in this way you can introduce delay.
so the formation starts from here and then
slowly [unknown]
slightly data, the formation propagates
here and later and later.
so there's a delay in the propagation and
then you will get this kind of, of motion.
propagation of motion.
so by combining this kind of phase shift
and amplitude,
and orientation field you can get leech
infor, leech animations.
so here is a couple results.
so this is a worm walking around.
and the important thing here is that this
is dynamically computing.
dynamically computed considered in
physics, so as i use [inaudible] with it,
the system continues animation with the
formation, but also responding to the
environment.
this is not animational pre-programmer
fixed animation.
this is different way of making motion.
[blank_audio]
so, there's another [unknown] as you see
we have a collision of [unknown]
continuously running.
so they're in division and moving around,
but also collide
with each other and then animation
changes, depending on the collision.
and this demonstration is to demonstrate
how fast the algorithm is.
[blank_audio]
and here's another example of a response
to user input.
so as the user touches, and then
deformation propagates starting from the
user instruction.
so you can get this kind of interesting
motion.
yeah, this is a propagation.
this an example of heart animation.
the user manipulates it.
but this is orientation field.
[blank_audio]
and then you can get the heart works as a
pump.
[blank_audio]
so that's it.
so as i said, deformation design consists
of two phases.
one is the design of the orientation
fields.
you have space for a layer structure and a
space for an orientation field.
and the after space finds orientation, the
user specifies for each orie, each
direction.
user specifies a stretch and shrink
pattern, time sequence pattern.
so now we will, i will discuss algorithms
seen
as global motion from a speci,
user-specified local motions.
and in the preprocess is the algorism
consists of
the preprocessing part and the animation
seen as process.
in the preprocessing, the user inputs,
input is a tetrahedral volumetric mesh.
and having the tetrahedral mesh for
individual vertix,
individual vertix and we compute a local
region, n.
like this one for individual vertix by
connecting a one beam.
one beam is a connection of vertices next
and neighboring to each individual vertex.
and after having this local regions in the
animation process, we define local region
n depend, depending on the orientation
field and also the timing chart,
you know the orientation field defines the
orientation of the stretch squash and
then times sequence chart defines, times
sequence
pattern defines whether to stretch or
shrink.
so in this way, you first deform the
individual regions, one by one, stretch or
shrink.
and after that, the system assembled them
together to get a robot shape.
so that's the basic form.
let me describe in a little bit more
detail.
so this is original rest shape.
and then this is the current form of the
shape in physical assimilation.
and then the task is to define the motion
of
the next time frame, starting from this
current time frame shape.
so let me describe how to do it.
so the original shape, you first compute
the local regions in the free computation.
and for each local region, we compute
the next time step local regional target
shape.
some part should be shrinked, some parts
will be squa, stretched, and so.
so this is deformed local shape.
and after that, what the system do is
shape matching.
this is the most important part.
shape matching.
for each local region, we try to find the
most, best matching position.
you know, if you get these three, it tries
to match these three by rotating like this
way.
so, shape matching applied to find the
best matching position now changed,
rotation and translation.
and after matching, you know the current
position and desired position.
so a system applies force from the current
position to the much desired position.
defined by deformed local shape.
and then applied force.
after that this is just the standard
physical assimilation.
applied force will [unknown] applied force
moves towards the position.
so here's a summary.
so i just introduced animation of
deformable
characters like jellyfish, a worm, and so
on.
and [unknown] is a local to global
approach,
so user specifies orientation field and
then the deformation
pattern, and then each local region
changes accordingly, and
then global motion appears as a result of
application.
and inside we use a shape matching
dynamics,
because it's very fast and stable, fast
and stable.
so to learn more, the original paper was
published
as processional deformation prodef,
local-to-global
deformation for skeleton-free character
animation.
and design of orientation is actually
discussing a separate paper
called lapped solid textures: filling a
model with anisotropic textures.
so, they used an orientation field to put,
paste textures inside of an object.
and that, dynamic simulation we use is
called shape matching.
and this is very popular technique in
graphic community, because
it's, it's not necessarily physically
accurate, but it's very, very stable.
depending [unknown] put this very eh,
contradictory, and so on.
and i recommend to take a look at these
papers, because they can be very useful.
thank you.
