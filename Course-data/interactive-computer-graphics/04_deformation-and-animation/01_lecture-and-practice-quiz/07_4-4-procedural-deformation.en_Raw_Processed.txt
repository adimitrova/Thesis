next topic is procedural deformation 
so, that we introduce here is called 
procdef localtoglobal deformation 
skeletonfree character animation 
so goal here is design a flexible 
character animation 
jelly fish worm, intestine, 
like a heart 
so important point here is that 
full body in motion 
you know, entire body, every detail is 
moving, also there is a dynamic 
you know, it, not, to say freeze 
dry animation 
act a dynamic 
if you push, formation changes, 
so 
so there traditional methods 
traditional methods 
one is skeletonbased 
this is popular skeletonbased 
control, like a joint 
angle control, we showed in last 
video 
this is, technique is useful character 
animation like a human animals 
you know, if there is obvious 
skeleton structure, like a jellyfish, this 
technique doesnt work 
inaudible possible approach is 
keyframebased 
so, timeframe, you specify 
shape individually system 
inaudible 
however, in order to this, you to 
specify many, many 
key poses manually pushing, allowing, 
many vertices, is tedious 
importantly, this kind 
keyframebased cannot calc, handle 
dynamics, you know 
motion is kind fixed animation 
cannot respond to forces 
environment 
so approach is procedure approach 
so user specifies local regions 
a h, entire body stretch shrink 
assembling together 
system generates a global motion 
user also designs patterns 
local deformations 
like, this is time sequence, you 
know, stretch, shrink, stretch, shrink, 
quickly 
slowly, fast stretch slowly 
shrink, something like that 
so let show you a video 
blankaudio 
hm, yes 
blankaudio 
so here is result 
so this kind animation is goal, 
full body animation a flexible body 
characters 
so first task is design orientation 
field 
so given already said, user first 
specifies an orientation field 
blankaudio 
so user specifies a layer 
structure here actually, so 
red layers intact inside 
blue is outside 
so in this way, user specified layer 
structure 
you will see like this 
so user paints red inside, blue 
outside, 
system interpolates to compute a 
continuous layers 
specifyinf layers, user 
specifies orientation 
extra field layer surface 
so in here you specify, user specifies 
rotational flow field 
so this is a flow field 
so now, we a flow field along this 
layer surface, layer surface 
directional vectors, gradient vector 
you get crossborder app 
to get a free frame field 
so, in this way, you get global 
representation field, inside an object 
next we define individual element 
deforms depending time 
blankaudio 
so, in this example we three fields, 
this primary direction second 
direction, third direction 
direction, we specify 
pattern, motion pattern 
so top one specifies a change in 
lengths 
direction you inaudible longer 
shorter, longer shorter 
blankaudio 
so, yeah, in this way user specifies a 
change in open shape 
global shape is obtained a 
result smaller motions 
blankaudio 
you easily represent this kind 
squashing operations well 
so, previous example, elements 
move simultaneously in way 
in order to make interesting 
eh, motion, you specify amplitude 
field 
so here red blue a 
well put direction put 
amplitude 
so in this way, if blue stretches, red 
shrinks, red stretches, blue shrinks 
so in this way, you get this kind 
bending motion 
previous one is a fixed body 
entire body 
next one is propagation 
so in this way you introduce delay 
so formation starts here 
slowly unknown 
slightly data, formation propagates 
here later later 
so theres a delay in propagation 
you will get this kind of, motion 
propagation motion 
so combining this kind phase shift 
amplitude, 
orientation field you get leech 
infor, leech animations 
so here is a couple results 
so this is a worm walking around 
important thing here is that this 
is dynamically computing 
dynamically computed considered in 
physics, so i use inaudible it, 
system continues animation 
formation, also responding to 
environment 
this is animational preprogrammer 
fixed animation 
this is different way making motion 
blankaudio 
so, theres another unknown you see 
we a collision unknown 
continuously running 
so theyre in division moving around, 
also collide 
animation 
changes, depending collision 
this demonstration is to demonstrate 
fast algorithm is 
blankaudio 
heres another example a response 
to user input 
so user touches, 
deformation propagates starting 
user instruction 
so you get this kind interesting 
motion 
yeah, this is a propagation 
this an example heart animation 
user manipulates 
this is orientation field 
blankaudio 
you get heart works a 
pump 
blankaudio 
so thats 
so i said, deformation design consists 
two phases 
one is design orientation 
fields 
you space a layer structure a 
space an orientation field 
space finds orientation, 
user specifies orie, 
direction 
user specifies a stretch shrink 
pattern, time sequence pattern 
so we will, i will discuss algorithms 
seen 
global motion a speci, 
userspecified local motions 
in preprocess is algorism 
consists 
preprocessing part animation 
seen process 
in preprocessing, user inputs, 
input is a tetrahedral volumetric mesh 
tetrahedral mesh 
individual vertix, 
individual vertix we compute a local 
region, n 
like this one individual vertix 
connecting a one beam 
one beam is a connection vertices next 
neighboring to individual vertex 
this local regions in 
animation process, we define local region 
n depend, depending orientation 
field also timing chart, 
you know orientation field defines 
orientation stretch squash 
times sequence chart defines, times 
sequence 
pattern defines whether to stretch 
shrink 
so in this way, you first deform 
individual regions, one one, stretch 
shrink 
that, system assembled 
together to get a robot shape 
so thats basic form 
let describe in a little bit 
detail 
so this is original rest shape 
this is current form 
shape in physical assimilation 
task is to define motion 

next time frame, starting this 
current time frame shape 
so let describe to 
so original shape, you first compute 
local regions in free computation 
local region, we compute 
next time step local regional target 
shape 
part shrinked, parts 
will squa, stretched, so 
so this is deformed local shape 
that, system is 
shape matching 
this is important part 
shape matching 
local region, we try to find 
most, best matching position 
you know, if you get three, tries 
to match three rotating like this 
way 
so, shape matching applied to find 
best matching position changed, 
rotation translation 
matching, you know current 
position desired position 
so a system applies force current 
position to much desired position 
defined deformed local shape 
applied force 
that this is standard 
physical assimilation 
applied force will unknown applied force 
moves towards position 
so heres a summary 
so i introduced animation 
deformable 
characters like jellyfish, a worm, so 

unknown is a local to global 
approach, 
so user specifies orientation field 
deformation 
pattern, local region 
changes accordingly, 
global motion appears a result 
application 
inside we use a shape matching 
dynamics, 
fast stable, fast 
stable 
so to learn more, original paper 
published 
processional deformation prodef, 
localtoglobal 
deformation skeletonfree character 
animation 
design orientation is actually 
discussing a separate paper 
called lapped solid textures filling a 
model anisotropic textures 
so, used an orientation field to put, 
paste textures inside an object 
that, dynamic simulation we use is 
called shape matching 
this is popular technique in 
graphic community, 
its, necessarily physically 
accurate, very, stable 
depending unknown put this eh, 
contradictory, so 
i recommend to take a look 
papers, useful 
thank you 
