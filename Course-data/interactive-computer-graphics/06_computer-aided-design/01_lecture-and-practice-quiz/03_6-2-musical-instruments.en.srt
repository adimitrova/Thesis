1
00:00:00,280 --> 00:00:01,710
Okay.
So, next topic is,

2
00:00:01,710 --> 00:00:05,130
the design of novel musical instruments,
like a metallophone.

3
00:00:06,446 --> 00:00:10,399
The title, we introduce, is a work of the,
work, the work we introduce here is

4
00:00:10,399 --> 00:00:14,420
titled Designing Custom-made Metallophone
with Concurrent Eigenanalysis.

5
00:00:16,320 --> 00:00:19,470
So the problem we want to
discuss in here is to,

6
00:00:19,470 --> 00:00:22,340
how to design an original
musical instrument.

7
00:00:22,340 --> 00:00:25,240
So, we pick metallophone, in this project.

8
00:00:25,240 --> 00:00:25,970
And as you see,

9
00:00:25,970 --> 00:00:30,710
it is very difficult to find a proper
shape that produce appropriate sound.

10
00:00:30,710 --> 00:00:33,600
You know, in order to function,
as a musical instrument,

11
00:00:33,600 --> 00:00:36,540
they need to produce appropriate sound.

12
00:00:36,540 --> 00:00:41,660
However, it's very difficult to predict
what sound they produce when they're hit

13
00:00:41,660 --> 00:00:42,860
by a stick.

14
00:00:42,860 --> 00:00:44,170
You know?
So that's a very,

15
00:00:44,170 --> 00:00:46,810
again, very difficult
constrained design problem.

16
00:00:48,240 --> 00:00:51,480
However, if you have a computer,
computer can predict the sound.

17
00:00:51,480 --> 00:00:56,300
And if you run it, continuously, and
rapidly, it can be fairly useful.

18
00:00:56,300 --> 00:01:01,500
So user edits the shape, of a bar, of
a Metallophone and the system continuously

19
00:01:01,500 --> 00:01:07,700
lands physical simulation to predict the
feedback or audio they produce, the tone.

20
00:01:07,700 --> 00:01:09,980
And they user see, hear the sound.

21
00:01:09,980 --> 00:01:10,970
And then, if it's too high,

22
00:01:10,970 --> 00:01:15,460
then it goes back to previous one, or
it's too low, go to the other side.

23
00:01:15,460 --> 00:01:20,520
So in this way, the user can
interactively explore, a body shape,

24
00:01:20,520 --> 00:01:24,410
while also searching for
aesthetically pleasing shape.

25
00:01:24,410 --> 00:01:26,150
So that's the idea.

26
00:01:26,150 --> 00:01:27,780
Let me show you a video.

27
00:01:29,830 --> 00:01:30,950
Okay, so here is a video.

28
00:01:30,950 --> 00:01:33,537
In this example, the to-

29
00:01:33,537 --> 00:01:34,300
[BLEEP].

30
00:01:34,300 --> 00:01:37,353
>> So here, on the right side,
you see a two denominational pattern,

31
00:01:37,353 --> 00:01:39,050
of a Metallophone you are designing.

32
00:01:39,050 --> 00:01:41,900
So this is a standard, editing software.

33
00:01:41,900 --> 00:01:44,000
You can change the shape by dragging.

34
00:01:44,000 --> 00:01:47,350
And on the right side you see
that the simulation is out.

35
00:01:47,350 --> 00:01:52,310
Just visualize what happens if you
hit this metal bar, with your stick.

36
00:01:52,310 --> 00:01:55,030
If your stake is a bar, it vibrates and

37
00:01:55,030 --> 00:01:58,342
it produces sound, and
this is a visualization of vibration.

38
00:01:58,342 --> 00:02:02,090
Of course, this is exaggerated,
but you see the result.

39
00:02:02,090 --> 00:02:06,250
And then, in addition to it
system also produce a sound,

40
00:02:06,250 --> 00:02:08,790
predicting its tone, or pitch.

41
00:02:08,790 --> 00:02:12,380
So user can hear it, using your ears.

42
00:02:12,380 --> 00:02:13,860
So while hearing your sound,
you add it to save.

43
00:02:13,860 --> 00:02:17,497
And so that you get interesting shape.

44
00:02:17,497 --> 00:02:22,477
But also satisfies the desire of a sound.

45
00:02:22,477 --> 00:02:22,992
>> Sound of a Metallophone is calculated
by a Eigenvalue analysis [BLEEP].

46
00:02:22,992 --> 00:02:27,735
As the user edits the Metallophone
shape in the left window,

47
00:02:27,735 --> 00:02:31,847
the system immediately
computes it's Eigenmode.

48
00:02:31,847 --> 00:02:34,870
Show in the right window,

49
00:02:34,870 --> 00:02:39,080
which tells how the Metallophone
oscillating through this space.

50
00:02:39,080 --> 00:02:43,730
It's tone is also updated with oral
feedback using beep sounds, and

51
00:02:43,730 --> 00:02:50,349
visual feedback in the status bar.

52
00:02:50,349 --> 00:02:51,147
[BLEEP].

53
00:02:51,147 --> 00:02:56,230
Because the change of tone caused by the
shape addict is very difficult to predict,

54
00:02:56,230 --> 00:02:59,070
we believe designing a Metallophone
with the desire shape and

55
00:02:59,070 --> 00:03:01,310
tone will be possible only
with a responsive [INAUDIBLE].

56
00:03:01,310 --> 00:03:04,360
>> So, by the way, this visualization
is actually also useful when you,

57
00:03:04,360 --> 00:03:06,115
physically assemble the Metallophone.

58
00:03:06,115 --> 00:03:08,789
You know Metallophone in order to,

59
00:03:08,789 --> 00:03:14,010
in order to make a Metallophone you
have to put this bar, onto the base.

60
00:03:14,010 --> 00:03:16,480
However, it's a question
as to where to fix.

61
00:03:16,480 --> 00:03:19,890
In this view, you can see that
this part is vibrate a lot.

62
00:03:19,890 --> 00:03:21,790
So this part should not be fixed.

63
00:03:21,790 --> 00:03:25,200
But this part and
this part is not moving at all, so

64
00:03:25,200 --> 00:03:27,465
this is a good place to place it down.

65
00:03:27,465 --> 00:03:29,957
[BLEEP].

66
00:03:33,191 --> 00:03:36,041
>> Here are, the designed
Metallophone pieces by an artist.

67
00:03:36,041 --> 00:03:40,113
[SOUND].

68
00:03:40,113 --> 00:03:43,245
And it's actual creation.

69
00:03:43,245 --> 00:03:46,243
[SOUND].

70
00:03:46,243 --> 00:03:49,526
This shows that our analysis
successfully simulates the real world.

71
00:03:49,526 --> 00:03:54,414
[SOUND].

72
00:03:54,414 --> 00:03:55,080
Yeah.
So,

73
00:03:55,080 --> 00:03:59,815
again, I think this kind of design's very,
very difficult with assimilation or

74
00:03:59,815 --> 00:04:01,460
existing measured.

75
00:04:01,460 --> 00:04:05,850
Only with continuous feedback, you can
explore many possibilities very rapidly,

76
00:04:05,850 --> 00:04:10,290
and you can design this kind of
interesting shape, with appropriate sound.

77
00:04:14,300 --> 00:04:18,285
So yeah, in other words, we,
we briefly describe the algorithm.

78
00:04:18,285 --> 00:04:22,140
Again, we use finite elements simulation,
so we do not go to the details.

79
00:04:22,140 --> 00:04:24,245
But I can give you an, a basic idea.

80
00:04:24,245 --> 00:04:28,600
So the problem is to find
the frequency of vibration.

81
00:04:28,600 --> 00:04:32,260
And here,
the method we use is Eigenmode analysis.

82
00:04:32,260 --> 00:04:36,132
Let me give a very,
very brief abstract explanation.

83
00:04:36,132 --> 00:04:39,480
So this a equation
defining this phenomenon.

84
00:04:39,480 --> 00:04:44,330
So, this is basically like
a very basic a spring system.

85
00:04:44,330 --> 00:04:48,200
So u, u, means a displacement,
or location.

86
00:04:48,200 --> 00:04:51,740
And then, you,
this one is acceleration or the position.

87
00:04:51,740 --> 00:04:54,200
Which which is proportion to the force.

88
00:04:54,200 --> 00:04:56,280
So this means that,

89
00:04:56,280 --> 00:05:03,170
the displacement is proportional to
the force, applied to the material.

90
00:05:03,170 --> 00:05:05,160
So this is basically the same as a spring.

91
00:05:05,160 --> 00:05:06,830
You know, if you spring, more, move-

92
00:05:07,880 --> 00:05:12,080
If you move more, than the po,
force to putting back, it gets larger.

93
00:05:12,080 --> 00:05:17,373
So this is a very basic and
governing equations, for the system.

94
00:05:17,373 --> 00:05:25,610
And then you, we represent u,
we assume oscillation, vibration motion.

95
00:05:25,610 --> 00:05:28,070
Which is presented as this one.

96
00:05:28,070 --> 00:05:30,800
So, left side is amplitude field.

97
00:05:30,800 --> 00:05:33,430
So amplitude is depending was X.

98
00:05:33,430 --> 00:05:38,510
This is a view, you see in the right
side of the window, you know, amplitude.

99
00:05:38,510 --> 00:05:42,160
So amount of vibration is
dependent on the location.

100
00:05:42,160 --> 00:05:45,170
Some part moves a lot,
some part doesn't move a lot.

101
00:05:45,170 --> 00:05:46,550
So this is the left side.

102
00:05:46,550 --> 00:05:50,640
On the right side is just sine wave,
in oscillating motion.

103
00:05:50,640 --> 00:05:53,166
And we put this into here.

104
00:05:53,166 --> 00:05:55,820
So amplitude is positional, and

105
00:05:55,820 --> 00:06:01,830
oscillation is depends on time,
and very yeah cyclic motion.

106
00:06:01,830 --> 00:06:06,990
And then if you put it here, and
then swap the equation and beautify it,

107
00:06:06,990 --> 00:06:07,610
you'll get it.

108
00:06:08,960 --> 00:06:11,580
And this is very standard
Eigen value problem.

109
00:06:11,580 --> 00:06:16,760
And you can solve using standard
matrix computation method.

110
00:06:16,760 --> 00:06:22,020
And after solving this one, this w, stays
directly associated with the frequency.

111
00:06:22,020 --> 00:06:26,060
So after solving this Eigen value problem,
you'll get the frequency.

112
00:06:26,060 --> 00:06:29,580
This is the sound we, we produce.

113
00:06:29,580 --> 00:06:30,550
The as a result of simulation.

114
00:06:30,550 --> 00:06:34,060
So here's a summary.

115
00:06:34,060 --> 00:06:38,140
So we presented Metallophone design
with cons, concurrent simulation and

116
00:06:38,140 --> 00:06:39,600
audio feedback.

117
00:06:39,600 --> 00:06:43,690
And in, inside the system we ran
standard Eigen mode analysis.

118
00:06:43,690 --> 00:06:47,850
We assume cyclic motion, and
then we tries to, to find the frequency.

119
00:06:49,100 --> 00:06:49,870
So to learn more.

120
00:06:49,870 --> 00:06:54,330
Original paper is published as
Designing Custom-made Metallophone with

121
00:06:54,330 --> 00:06:56,640
Concurrent Eigenanalysis.

122
00:06:56,640 --> 00:06:58,410
And for if you want to know more ay,

123
00:06:58,410 --> 00:07:03,040
analysis one possible reading is,
Dynamics of Structures.

124
00:07:03,040 --> 00:07:05,200
This is old text book.

125
00:07:05,200 --> 00:07:06,550
And also sound rendering.

126
00:07:06,550 --> 00:07:09,280
So simulation of sound produced,
production.

127
00:07:09,280 --> 00:07:15,780
Sound synthesis and sound propagation is
also hot topic in computer graphics field.

128
00:07:15,780 --> 00:07:17,740
So it's called sound rendering.

129
00:07:17,740 --> 00:07:21,010
And one interesting paper
to read is recent one,

130
00:07:21,010 --> 00:07:23,480
is Precomputed Acoustic Transfer.

131
00:07:23,480 --> 00:07:26,990
Output-Sensitive, Accurate
Sound Generation for

132
00:07:26,990 --> 00:07:29,320
Geometrically Complex vibration.

133
00:07:29,320 --> 00:07:32,230
So, these are the recommended readings,
if you want to know more.

134
00:07:33,970 --> 00:07:34,470
Thank you.