Hello this is Interactive Computer
Graphics week 1. The topic we discuss this week is
Graphical User Interfaces. Graphical user interface is windows,
icons, menus and so on, and it turns computer controlled program
into visual problem solving. So whenever you interact with computers or
your smart phone you always have to solve some video
problem solving. Visual problem. In this lecture, this week we introduce
five attempts to improve current graphical user
interface operations. And here the list of topics we discuss
here in this week. The first is scrolling interfaces. The second is manipulation of desktop
icons. And then pointing by mouse cursor. And then handling of digital ink. And then finally we will introduce a
technique for voice interaction. The first one is scroll interface. The work we introduce here is called speed dependent automatic zooming for
browsing large documents. And the problem we want to address here,
is that a navigation of a large document is
difficult. currently, dominant techniques is
scrolling and zooming. So scrolling usually use a scroll bar. However, it can be tedious sometimes to
control very small knob. And you can also use light based speed
depending scrolling. But it's very hard to control when you are
moving too fast. Typical approach is to use zooming
interfaces to largen [UNKNOWN] documents, but we have to
combine scrolling and zooming. And can be confusing. Let me describe with specific examples. So here is an example. Okay, so here you have a very long
document. And then, if you want to scroll, if you
first acquire a very small knob. And then you start logging. However, if the document is very long, very small mouse movement, causes a big
jump. And can be difficult. And also one difficult, important problem
is that this kind of chapter structure, is not
visible. So, if you want to go to, for example,
chapter 9. And it 's very time consuming to find
chapter 9. And another possible interface is write
based scrolling or speed dependent scrolling, so you press
wheel of a mouse and you get this the widget and then you can start scrolling without
controlling speed. And it's okay when you're moving slowly,
but as soon as you move too fast. You know, you have no idea of what's going
on. It, it's very difficult to navigate. For example, if you want to go to Chapter
6, you know it's very hard to do it using
this interface. [SOUND] And The similar program happens in as
operate, applications. This is an example of map navigation. And again if you are moving slowly it's
fine. But as you start moving faster and faster, it's very hard to understand what's going
on. So typical approach is to manually zoom
out. And acquire target and move, and zoom in,
and move, and zoom in. But you have to switch, go back and forth,
between scrolling and zooming. And it can be very inefficient and
tedious. And now. So what we propose here is to
automatically zoom in and zoom out depending on your
speed. So. If you're moving, you start from slowly,
and then moving fast, and then slow down. And as you change the speed in this way, system automatically changes the
scale of the screen. So in this way, is the user can navigate through large information space,
just by controlling speed. So, let me show you a demo again [SOUND]
So here the same program, but here we enabled automatic
zooming. So when you are moving slowly, nothing
happens. But as you move faster and faster, system
automatically changes scale. So here. Your speed in the information space is
very fast now. But thanks to the zooming, the peak cell
flow speed is consistent, constant. And you move faster, and then acquire
target and slow down. So in this way, you can navigate through a large information space very smoothly,
and efficiently. Just by controlling speed. And you can do the same thing with a web
browsing. Again, without zooming, if you move fast, it's very hard to understand what's going
on. With automatic zooming, when you're moving
faster. System starts to shrink, so here, your
speed is already very fast. So it can be difficult to understand
what's going on without zooming. But thanks to zooming, pixel flow remains
constant, constant, and you can keep track of what's going on. And in addition, the system makes chapter
structures visible. So it's very easy to. Go to specific chapter, using this
interface. Like chapter 4. And these techniques can be very useful,
[INAUDIBLE] as our applications too. So this is an image browser. And again, without zooming, it's very hard
to understand what's going on. So, neighbouring adjacents, snapshot, and
then, next, and then two blocks. It's [UNKNOWN] to understand what's going
on. But with zooming, you know, system automatically zoom out, depending on
speed. And it's very easy to understand, what's
going on. Next image, and then two image, after this
one. So this is like reading a very big
newspaper. You know, when you are reading here, and
moving to the next, you go to see the entire overview, and
then go to the next. And this interface naturally [UNKNOWN],
represent this kind of interaction. So that's a demonstration. And let me briefly describe, discuss some
implementation issues behind the scene. So, the basic algorithm is very, very
simple. This is a governing equation, basic
equation. So a scale, multiplied by speed, remains
constant. So which means, if your speed is faster,
speed is larger. Scale get's smaller and then speed is
smaller. And then scale gets larger. So it's so simple, and easy to implement. So, this ensures that the perceptual
scrolling space, speed, on the screen remains
constant. However this naive implementation has some
problems. So, two problems, sudden zoom-out at the
beginning of scrolling, and then also abrupt swelling
at turning the directions. Let me describe one by one, the first one is sudden zoom-out, so let me describe
here. So naive implementation of this technique
is fast. We said speed, proportional to mouse
movement. As in stand out like they're scrolling. And then scale is calculated based on the
equation 1. So here's a diagram. So you change the mouse position and then
speed, linearly increases. Based on this equation. Speed equals constant by [SOUND] dy, mouse
position. And you get speed. And then based on the equation 1, you get
this speed. However, look at here. As soon as you start zooming, scale
suddenly drops. So this sudden drop is very very annoying, if you're actually interacting
with a system. So but thinking about zooming, zooming
should be exponential. As you move your mouse, scale should be. Multiplied with the same ratio each time. For example, as the mouse move here and
then scale [UNKNOWN] half, and now they move faster and the scale
[UNKNOWN] in a half again. So revised implementation, is scale is
exponential to mouse movement first, and then speed is
calculated based on equation first. So, here's a diagram. So as soon as you start scaling, then scale is exponential function of
mouse position. Like, like this. So this will show very constant, smooth
scaling. Then after that, you compute speed, based
on the equation 1. As a. You know, inverse proportional. And then in this way, you will get a very smooth introduction, as shown in my
demonstration. And then, second problem is abrupt
swelling at turning. Suppose you are moving downwards fast. And then, you moved a mouse upwards. And then you change the directions, and
then go up. And then do this. On here, you know, as you change the direction, velocity and [UNKNOWN] temp,
temp, temporarily becomes zero. Which means. That scale, equals suddenly zero. Which means that as you change direction
in a screen abruptly it gets larger. Which is very very annoying. So one possible solution is like this. So we introduce delay, in scale change. So as you change the direction, then zooming scale changes slowly, and then
when, when you go back to the ori, original
speed, and then scale will be recovered. So this way, you will get a smoother
interaction. So that's a brief description of the paper
we published at the UIST 2000. Title, speed, speed-dependent automatic
zooming for browsing large documents. And here is a couple of pointers for
sources of study. Further study. So one is zooming interface. Zooming interface is very interesting. A popular topic in user interface and
computer graphic research fields. Original paper was published as an, at
SIGGRAPH 93 by Ken Perlin. And you can still see demos here. And then there are also many follow up
studies and techniques. And also this work is One, one example of a research project with the information visualization
techniques. And information visualization itself is a
large research field, and you can learn many more from resources
available on the net. And also there's a very popular textbook
by Edward Tufte called The Visual Display of
Quantitative Information. And I recommend you to take a look at that
book. That`s it in this video. Thank you.