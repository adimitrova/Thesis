our
next
topic
is
digital
ink
.
and
so
what
we
introduce
here
is
called
flatland
.
and
the
research
goal
here
is
design
computational
augmented
office
whiteboard
.
so
,
in
,
work
,
in
many
workplaces
there
is
a
whiteboard
,
near
the
desk
,
or
near
the
walking
meeting
space
.
and
then
you
got
people
take
various
notes
.
so
we
try
to
provide
computational
support
.
this
kind
of
computational
this
kind
of
whiteboard
.
and
this
work
started
with
an
ob
,
observation
that
office
whiteboards
are
used
for
informer
,
informal
product
,
pre-production
activities
.
so
examples
are
note
taking
while
you
are
on
a
phone
.
or
organizing
to
do
list
.
or
sketching
paper
outlines
,
or
discussion
with
other
office
mate
.
so
this
kind
offi
offline
informal
discussions
is
what
we
want
to
support
.
and
so
this
was
it
was
,
this
was
from
users
point
of
view
.
from
system
design
's
point
of
view
,
what
we
try
to
do
is
to
design
a
computational
system
that
complements
client
desktop
computers
.
so
suppose
we
have
desktop
computers
,
and
then
whiteboards
.
and
these
very
complementary
.
for
example
the
tasks
on
the
desktop
computer
is
very
goal
oriented
.
you
have
a
space
for
goal
,
prepare
document
,
prepare
presentation
make
a
email
and
so
on
.
however
works
,
activities
on
a
white
board
is
very
informal
and
very
pre-productive
.
there
is
no
space
for
goal
in
many
cases
.
and
then
,
operation
on
desktop
computers
can
be
very
tedious
or
complicated
because
you
have
to
satisfy
many
constraints
however
,
white
board
is
very
easy
,
just
pick
up
a
pen
,
and
then
write
down
.
so
its
very
lightweight
,
simple
and
easy
.
and
then
finally
visual
representation
on
desktop
computers
are
very
formal
and
typed
you
see
typed
text
,
but
however
visuals
on
disc
of
white
boards
are
very
,
very
informal
.
so
these
are
the
differences
and
then
we
try
to
support
these
kind
of
activities
.
and
,
so
,
the
system
we
proposed
has
three
features
.
and
one
,
is
a
way
to
manage
space
.
the
other
is
to
applications
running
on
this
surfaces
,
and
also
history
management
.
so
let
me
show
you
a
demo
.
[
sound
]
so
suppose
you
have
a
whiteboard
and
you
pick
up
a
pen
,
and
[
inaudible
]
do
writing
here
.
so
i
use
mouse
here
,
but
please
assume
that
i
'm
using
a
pen
on
a
whiteboard
.
and
then
you
can
take
various
notes
,
such
as
like
a
phone
number
or
you
may
want
to
take
a
note
or
about
a
schedule
.
[
sound
]
or
you
maybe
just
like
drawings
,
or
you
may
want
to
draw
a
map
.
and
as
you
see
,
system
starts
to
cluster
.
nearby
[
unknown
]
automatically
.
and
then
you
can
grab
a
cluster
,
and
then
move
around
.
so
,
this
is
very
convenient
.
you
do
not
need
[
unknown
]
to
get
that
one
up
.
or
you
can
manually
spread
.
to
grab
clusters
away
and
so
.
and
one
important
program
seen
here
is
that
visibility
is
very
important
.
if
you
have
desktop
windows
,
windows
starts
to
overlap
each
other
soon
.
but
however
,
visibility
is
important
here
so
,
you
should
be
able
to
see
all
information
,
all
the
time
.
so
,
as
you
start
dragging
and
if
it
collides
with
other
segment
,
it
starts
the
push
other
segments
away
.
so
,
in
this
way
,
system
pretty
bends
,
overlapping
.
and
if
no
more
space
available
,
it
starts
to
shrink
.
so
,
in
this
way
.
you
can
still
see
the
content
of
the
[
inaudible
]
,
but
you
can
use
limited
screen
space
very
efficiently
.
and
you
can
just
click
and
start
drawing
,
and
click
and
start
drawing
.
we
also
support
[
unknown
]
to
other
seats
,
like
this
way
.
so
this
is
kind
of
infinite
screen
connected
by
horizontally
infinite
screen
space
.
so
this
is
the
screen
management
.
and
the
next
feature
is
applications
.
so
here
is
a
[
unknown
]
application
we
support
here
.
like
we
have
to
sleep
or
you
may
want
to
eat
,
and
you
also
need
to
work
.
and
then
you
can
change
priorities
,
or
you
can
delete
them
.
so
here
we
can
use
visceral
interaction
using
pen
gestures
.
and
then
another
application
is
map
drawings
.
so
you
can
do
a
line
,
and
you
can
get
a
map
or
you
can
erase
and
you
can
get
a
map
.
so
you
just
,
just
draw
a
single
strokes
,
the
system
automatically
makes
them
a
map
.
and
one
important
feature
here
is
that
application
can
be
removable
.
here
it
becomes
to
view
a
simple
plain
drawing
and
you
can
add
other
operation
applications
like
this
one
.
this
is
a
beautification
of
your
.
informal
handwriting
.
[
sound
]
look
at
this
.
[
sound
]
so
another
example
is
[
unknown
]
.
you
draw
numbers
here
and
you
draw
lines
and
then
you
look
at
the
result
.
we
also
implemented
3d
drawing
.
and
you
draw
something
,
and
you
can
rotate
,
and
you
can
cut
,
and
then
you
can
rotate
.
and
if
you
remove
this
guy
,
then
you
can
draw
notations
and
so
.
and
finally
the
last
feature
is
history
management
.
so
system
remains
,
remembers
everything
you
do
on
this
whiteboard
,
and
then
you
can
get
previous
state
.
for
example
,
if
you
draw
many
many
lines
,
for
a
long
time
,
then
you
erase
,
the
system
records
everything
in
the
database
.
and
then
if
you
get
slider
here
.
you
can
go
back
to
any
previous
state
,
in
the
history
.
and
then
can
go
jump
,
to
a
previous
state
.
and
as
our
feature
is
context
space
search
.
so
,
as
i
said
,
system
remembers
all
activity
on
whiteboard
,
and
later
you
can
search
them
,
just
by
time
or
used
behaviors
,
or
size
,
or
colors
,
and
so
on
.
and
here
's
an
example
.
the
system
searches
for
the
previous
drawings
activities
,
on
this
whiteboard
.
and
you
can
get
these
instantly
.
so
that
's
a
demo
.
[
sound
]
yeah
,
yeah
,
here
's
an
example
of
context-based
search
.
so
let
me
describe
the
videos
here
.
so
user
input
here
consists
of
two
kinds
.
one
is
primary
input
is
given
by
standard
ink
strokes
,
mouse
left
button
,
and
it
is
always
ink
strokes
.
and
secondary
input
like
the
other
side
of
pen
or
pen
down
is
bottom
down
is
always
a
control
strokes
and
then
input
strokes
is
always
inking
so
its
always
up
growing
on
the
screen
and
then
control
stroke
is
for
controlling
applications
.
so
it
can
be
a
eraser
,
or
can
be
dragging
or
existing
object
or
splitting
over
segment
.
or
a
pie
and
the
marking
menu
.
a
pie
and
marking
menu
is
a
laterally
arranged
menus
.
and
let
me
briefly
describe
the
architecture
behind
the
system
.
so
this
can
be
seen
as
a
kind
of
pen
version
.
standard
graphical
user
interface
window
system
.
so
here
a
comparison
,
so
we
have
standard
graphical
user
interface
and
our
flatland
.
so
standard
graphical
user
interface
use
a
mouse
,
but
here
we
use
a
pen
,
and
then
standard
gui
use
widgets
and
pixels
and
here
everything
in
strokes
.
and
graphical
user
interface
use
windows
but
here
we
use
more
informal
segments
,
and
then
graphical
user
interface
applications
corresponds
behaviors
and
the
important
thing
here
is
that
in
gui
windows
and
applications
are
very
,
how
to
say
consis
,
persistent
object
.
and
application
is
tightly
connected
to
windows
,
but
here
,
segments
can
be
merged
or
split
.
and
also
,
behaviors
can
be
flexibly
attached
or
removed
compared
to
the
windows
and
applications
.
and
here
's
a
structure
in
standard
graphical
user
interface
windows
system
.
you
know
,
data
is
,
and
handled
by
applications
.
application
encapsulates
internal
data
,
and
then
take
mouse
input
,
and
then
generates
display
output
.
using
various
,
rejects
.
in
contrast
,
in
our
case
.
you
know
,
behaviors
outside
of
the
strokes
and
then
it
opens
up
the
strokes
on
the
board
and
then
add
strokes
and
removes
strokes
and
so
on
.
so
,
behavior
works
as
an
attached
service
to
the
whiteboard
.
[
sound
]
yeah
,
here
is
a
little
bit
more
details
.
so
here
's
a
code
example
of
a
behavior
.
so
this
is
plaindrawingbehavior
.
so
this
one
takes
inputstroke
,
and
then
just
put
in
the
stroke
.
and
the
code
looks
like
this
.
so
,
addinputstroke
,
handle
's
inputstroke
.
and
then
just
put
,
painted
stroke
to
the
segment
.
so
it
's
plain
drawing
behavior
.
and
in
the
case
of
map
behavior
,
it
takes
[
inaudible
]
stroke
and
then
two
sided
street
,
the
code
looks
like
this
.
so
for
add
input
stroke
event
,
the
input
stroke
is
divided
into
left
and
right
stroke
.
and
then
these
are
individually
added
to
the
segment
.
so
,
yeah
here
's
a
summary
,
the
program
we
want
to
address
is
management
of
multiple
informal
tasks
on
a
electronic
whiteboard
system
and
then
we
presented
kind
of
window
system
for
this
link
with
very
,
very
flexible
structures
.
and
here
's
further
reading
.
the
original
work
was
published
as
flatland
,
new
dimensions
in
office
whiteboards
.
and
if
you
learn
more
about
gesture
recognition
,
there
are
a
couple
pointers
here
.
the
rubine
,
specifying
gestures
by
example
is
a
very
original
work
on
example
based
gesture
recognition
,
which
was
published
in
91.
and
the
reason
to
why
is
one
example
reason
to
why
is
gesture
without
libraries
,
toolkits
or
training
a
$
1
recognizer
for
user
interface
prototypes
.
and
also
i
showed
pie
menu
and
marking
menu
here
.
and
this
is
interesting
widget
,
popular
in
pen
computing
.
and
you
,
i
also
recommend
that
you
take
a
look
into
this
literature
.
thank
you
.
