1
00:00:00,640 --> 00:00:01,430
Okay.

2
00:00:01,430 --> 00:00:03,480
So, next topic is pointing.

3
00:00:05,170 --> 00:00:08,510
And so, what we introduce here is called
the Ninja Cursors.

4
00:00:10,180 --> 00:00:13,100
A problem we address here, is that it's
very, very

5
00:00:13,100 --> 00:00:18,950
difficult to point to a long-distance
object very far away.

6
00:00:18,950 --> 00:00:22,800
So, today, the screen resolution is gets
higher and higher.

7
00:00:22,800 --> 00:00:27,418
And then the screen gets bigger and bigger
and you can even have multiple monitors.

8
00:00:27,418 --> 00:00:30,490
So in, in such a situation it's very hard
to

9
00:00:30,490 --> 00:00:34,550
get a point, a very distant target with
the mouse you

10
00:00:34,550 --> 00:00:37,430
have to you know, move the mouse many
times to get

11
00:00:37,430 --> 00:00:39,869
the target, so this is the problem we're
going to address.

12
00:00:40,960 --> 00:00:44,090
And then we propose a message to address
this problem.

13
00:00:44,090 --> 00:00:45,340
Let me show you what we do.

14
00:00:48,700 --> 00:00:53,090
So, yeah, from here we discuss pointing
with the mouse cursor.

15
00:00:53,090 --> 00:00:57,900
But this can be very tedious if some,
target is far away like this way.

16
00:00:57,900 --> 00:00:59,939
So you have to clutch marks many times.

17
00:00:59,939 --> 00:01:06,401
[BLANK_AUDIO]

18
00:01:06,401 --> 00:01:11,983
So in the [UNKNOWN] program, we propose to
use multiple cursors covering the screen.

19
00:01:11,983 --> 00:01:14,819
So here, we have so, four cursors.

20
00:01:15,960 --> 00:01:19,000
And we, if we have multiple cursors on the
screen,

21
00:01:19,000 --> 00:01:22,660
you can just use a mouse cursor near the
target object.

22
00:01:22,660 --> 00:01:25,290
So this can save time for pointing a
distance

23
00:01:25,290 --> 00:01:28,250
target, that's the technique we propose in
this paper.

24
00:01:30,300 --> 00:01:33,400
But the problem is that, ambiguity, so if
you

25
00:01:33,400 --> 00:01:37,435
have multiple cursors and multiple objects
in the screen.

26
00:01:37,435 --> 00:01:43,140
Then it's possible that, multiple pointers
point to different targets at a time.

27
00:01:43,140 --> 00:01:44,775
So this is very problematic.

28
00:01:44,775 --> 00:01:50,247
[SOUND] So to address this problem we
allow

29
00:01:50,247 --> 00:01:55,867
only one cursor to point some object at a
time.

30
00:01:55,867 --> 00:01:58,637
So when a mouse cursor is in some other.

31
00:01:58,637 --> 00:02:00,440
Some object.

32
00:02:00,440 --> 00:02:03,781
Then another, other cursor needs to wait

33
00:02:03,781 --> 00:02:07,320
until the cursor moves out from the
target.

34
00:02:07,320 --> 00:02:12,510
So here, the user moves the mouse pointer
to the right continuously.

35
00:02:12,510 --> 00:02:13,760
And then, this one goes out.

36
00:02:13,760 --> 00:02:15,570
And, this one goes in.

37
00:02:15,570 --> 00:02:17,950
And the next one becomes in waiting state.

38
00:02:19,930 --> 00:02:22,275
So as you see pointing.

39
00:02:22,275 --> 00:02:24,690
[INAUDIBLE] pointers in a queue.

40
00:02:24,690 --> 00:02:27,340
When tries to, when trying to point to
object.

41
00:02:30,000 --> 00:02:32,330
So, yeah let me describe again.

42
00:02:32,330 --> 00:02:35,100
So the basic idea of Ninja Cursors is to
cover

43
00:02:35,100 --> 00:02:40,290
the screen with multiple syncronizedly
moving cursors, like this way.

44
00:02:40,290 --> 00:02:43,940
And the user just use the nearest cursor
to the target object.

45
00:02:46,450 --> 00:02:50,690
And this one effectively reduce the
distance of the target.

46
00:02:50,690 --> 00:02:54,230
So it reduces average distance from the
nearest cursor.

47
00:02:54,230 --> 00:02:55,360
It comes from D.

48
00:02:55,360 --> 00:02:58,190
To D divided by square n.

49
00:02:58,190 --> 00:03:00,640
So n means the number of cursors.

50
00:03:00,640 --> 00:03:04,790
And this one, this help you to point a
distant, distant target.

51
00:03:06,330 --> 00:03:10,470
By the way, this is a little bit of
background knowledge about pointing.

52
00:03:10,470 --> 00:03:14,800
So pointing is a very popular topic in HCA
field.

53
00:03:14,800 --> 00:03:18,770
And then pointing performer this models by
this

54
00:03:18,770 --> 00:03:21,530
kind of equation, and its called Fitt's
law.

55
00:03:21,530 --> 00:03:26,300
So suppose you have mouse cursor here, and
then you try to point a target

56
00:03:28,280 --> 00:03:33,190
with distance D, and suppose that the
target size is W.

57
00:03:33,190 --> 00:03:37,160
And then, here we consider only one
dimensional motion.

58
00:03:37,160 --> 00:03:43,550
And in this situation target acquisition,
or pointing time is model like this.

59
00:03:43,550 --> 00:03:51,700
Time equals a plus b log b and then inside
the log is 1 plus D divided by W.

60
00:03:51,700 --> 00:03:54,710
So which means, if the distance is longer,
longer,

61
00:03:54,710 --> 00:03:59,130
then time gets longer and longer with the
logarithmic function.

62
00:03:59,130 --> 00:04:04,290
And however, the we, width is, is, get
bigger then time will be reduced.

63
00:04:04,290 --> 00:04:07,000
So that's equation.

64
00:04:07,000 --> 00:04:11,170
And Ninja Cursors, our technique
effectively reduces this D.

65
00:04:11,170 --> 00:04:13,905
[BLANK_AUDIO]

66
00:04:13,905 --> 00:04:19,327
And as we have already discussed in the
video there is a ambiguity problem.

67
00:04:19,327 --> 00:04:25,280
If multiple cursors point to multiple
objects at a time, this can be a problem.

68
00:04:26,410 --> 00:04:32,740
So to address this problem we allow only
one cursor point to a target.

69
00:04:32,740 --> 00:04:35,790
And others are blocked and in the waiting
queue.

70
00:04:35,790 --> 00:04:39,870
So here green cursor points to this object
and then this

71
00:04:39,870 --> 00:04:43,520
red one in the waiting queue, and then our
user continuously

72
00:04:43,520 --> 00:04:47,440
moves a mouse cursor to the down, and then
green one

73
00:04:47,440 --> 00:04:51,000
goes out, and then the red one goes into
the object.

74
00:04:53,140 --> 00:04:55,300
And we provide a visual feedback

75
00:04:55,300 --> 00:04:58,730
Normal cursor, Pointing cursor and Blocked
cursor.

76
00:05:02,340 --> 00:05:07,510
And also, we also provide visual feedback
about the waiting

77
00:05:10,220 --> 00:05:10,440
time.

78
00:05:10,440 --> 00:05:12,630
So, yeah, that's it and here's the
summary.

79
00:05:12,630 --> 00:05:15,080
So we discussed the problem of pointing a

80
00:05:15,080 --> 00:05:19,470
distant target on a very large high
resolution displays.

81
00:05:19,470 --> 00:05:24,520
And then our solution is to show multiple
cursors and use the nearest one.

82
00:05:24,520 --> 00:05:27,640
And we also describe how to address
ambiguity problems.

83
00:05:29,640 --> 00:05:33,130
So original paper was published as Ninja
Cursors, Using

84
00:05:33,130 --> 00:05:37,640
Multiple Cursors to Assist Target
Acquisition on Large Screens.

85
00:05:37,640 --> 00:05:41,460
And pointing is a very, very popular topic
in your field.

86
00:05:41,460 --> 00:05:42,710
In many publications.

87
00:05:42,710 --> 00:05:46,130
And here is a couple of interesting recent
papers.

88
00:05:46,130 --> 00:05:48,040
One is bubbled cursors.

89
00:05:48,040 --> 00:05:51,447
And this mean, this bubble cursor
technique changes

90
00:05:51,447 --> 00:05:55,100
the mouse size, depending with the target
density.

91
00:05:55,100 --> 00:05:58,790
So if the target is dense, the mouse
cursor gets smaller.

92
00:05:58,790 --> 00:06:02,010
But the target is vast, the mouse cursor
gets larger.

93
00:06:02,010 --> 00:06:04,270
So it's a very interesting technique.

94
00:06:04,270 --> 00:06:08,050
Another is called drag and pop, pop and
drag and pick.

95
00:06:08,050 --> 00:06:13,200
So as you see here, as you start to locate
an object, then related

96
00:06:13,200 --> 00:06:18,920
icons jumps to near the cursor position to
help you point.

97
00:06:18,920 --> 00:06:23,120
To help you do drag and drop efficiently.

98
00:06:24,160 --> 00:06:25,250
So that's it.

99
00:06:25,250 --> 00:06:25,520
Thank you.