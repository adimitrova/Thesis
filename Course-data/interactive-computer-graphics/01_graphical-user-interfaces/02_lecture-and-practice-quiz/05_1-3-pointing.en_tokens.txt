okay
.
so
,
next
topic
is
pointing
.
and
so
,
what
we
introduce
here
is
called
the
ninja
cursors
.
a
problem
we
address
here
,
is
that
it
's
very
,
very
difficult
to
point
to
a
long-distance
object
very
far
away
.
so
,
today
,
the
screen
resolution
is
gets
higher
and
higher
.
and
then
the
screen
gets
bigger
and
bigger
and
you
can
even
have
multiple
monitors
.
so
in
,
in
such
a
situation
it
's
very
hard
to
get
a
point
,
a
very
distant
target
with
the
mouse
you
have
to
you
know
,
move
the
mouse
many
times
to
get
the
target
,
so
this
is
the
problem
we
're
going
to
address
.
and
then
we
propose
a
message
to
address
this
problem
.
let
me
show
you
what
we
do
.
so
,
yeah
,
from
here
we
discuss
pointing
with
the
mouse
cursor
.
but
this
can
be
very
tedious
if
some
,
target
is
far
away
like
this
way
.
so
you
have
to
clutch
marks
many
times
.
[
blank_audio
]
so
in
the
[
unknown
]
program
,
we
propose
to
use
multiple
cursors
covering
the
screen
.
so
here
,
we
have
so
,
four
cursors
.
and
we
,
if
we
have
multiple
cursors
on
the
screen
,
you
can
just
use
a
mouse
cursor
near
the
target
object
.
so
this
can
save
time
for
pointing
a
distance
target
,
that
's
the
technique
we
propose
in
this
paper
.
but
the
problem
is
that
,
ambiguity
,
so
if
you
have
multiple
cursors
and
multiple
objects
in
the
screen
.
then
it
's
possible
that
,
multiple
pointers
point
to
different
targets
at
a
time
.
so
this
is
very
problematic
.
[
sound
]
so
to
address
this
problem
we
allow
only
one
cursor
to
point
some
object
at
a
time
.
so
when
a
mouse
cursor
is
in
some
other
.
some
object
.
then
another
,
other
cursor
needs
to
wait
until
the
cursor
moves
out
from
the
target
.
so
here
,
the
user
moves
the
mouse
pointer
to
the
right
continuously
.
and
then
,
this
one
goes
out
.
and
,
this
one
goes
in
.
and
the
next
one
becomes
in
waiting
state
.
so
as
you
see
pointing
.
[
inaudible
]
pointers
in
a
queue
.
when
tries
to
,
when
trying
to
point
to
object
.
so
,
yeah
let
me
describe
again
.
so
the
basic
idea
of
ninja
cursors
is
to
cover
the
screen
with
multiple
syncronizedly
moving
cursors
,
like
this
way
.
and
the
user
just
use
the
nearest
cursor
to
the
target
object
.
and
this
one
effectively
reduce
the
distance
of
the
target
.
so
it
reduces
average
distance
from
the
nearest
cursor
.
it
comes
from
d.
to
d
divided
by
square
n.
so
n
means
the
number
of
cursors
.
and
this
one
,
this
help
you
to
point
a
distant
,
distant
target
.
by
the
way
,
this
is
a
little
bit
of
background
knowledge
about
pointing
.
so
pointing
is
a
very
popular
topic
in
hca
field
.
and
then
pointing
performer
this
models
by
this
kind
of
equation
,
and
its
called
fitt
's
law
.
so
suppose
you
have
mouse
cursor
here
,
and
then
you
try
to
point
a
target
with
distance
d
,
and
suppose
that
the
target
size
is
w.
and
then
,
here
we
consider
only
one
dimensional
motion
.
and
in
this
situation
target
acquisition
,
or
pointing
time
is
model
like
this
.
time
equals
a
plus
b
log
b
and
then
inside
the
log
is
1
plus
d
divided
by
w.
so
which
means
,
if
the
distance
is
longer
,
longer
,
then
time
gets
longer
and
longer
with
the
logarithmic
function
.
and
however
,
the
we
,
width
is
,
is
,
get
bigger
then
time
will
be
reduced
.
so
that
's
equation
.
and
ninja
cursors
,
our
technique
effectively
reduces
this
d.
[
blank_audio
]
and
as
we
have
already
discussed
in
the
video
there
is
a
ambiguity
problem
.
if
multiple
cursors
point
to
multiple
objects
at
a
time
,
this
can
be
a
problem
.
so
to
address
this
problem
we
allow
only
one
cursor
point
to
a
target
.
and
others
are
blocked
and
in
the
waiting
queue
.
so
here
green
cursor
points
to
this
object
and
then
this
red
one
in
the
waiting
queue
,
and
then
our
user
continuously
moves
a
mouse
cursor
to
the
down
,
and
then
green
one
goes
out
,
and
then
the
red
one
goes
into
the
object
.
and
we
provide
a
visual
feedback
normal
cursor
,
pointing
cursor
and
blocked
cursor
.
and
also
,
we
also
provide
visual
feedback
about
the
waiting
time
.
so
,
yeah
,
that
's
it
and
here
's
the
summary
.
so
we
discussed
the
problem
of
pointing
a
distant
target
on
a
very
large
high
resolution
displays
.
and
then
our
solution
is
to
show
multiple
cursors
and
use
the
nearest
one
.
and
we
also
describe
how
to
address
ambiguity
problems
.
so
original
paper
was
published
as
ninja
cursors
,
using
multiple
cursors
to
assist
target
acquisition
on
large
screens
.
and
pointing
is
a
very
,
very
popular
topic
in
your
field
.
in
many
publications
.
and
here
is
a
couple
of
interesting
recent
papers
.
one
is
bubbled
cursors
.
and
this
mean
,
this
bubble
cursor
technique
changes
the
mouse
size
,
depending
with
the
target
density
.
so
if
the
target
is
dense
,
the
mouse
cursor
gets
smaller
.
but
the
target
is
vast
,
the
mouse
cursor
gets
larger
.
so
it
's
a
very
interesting
technique
.
another
is
called
drag
and
pop
,
pop
and
drag
and
pick
.
so
as
you
see
here
,
as
you
start
to
locate
an
object
,
then
related
icons
jumps
to
near
the
cursor
position
to
help
you
point
.
to
help
you
do
drag
and
drop
efficiently
.
so
that
's
it
.
thank
you
.
